!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=121)}([function(t,e,n){var r=n(1),i=n(9),o=n(14),a=n(10),s=n(21),u=function(t,e,n){var c,f,l,p,d=t&u.F,v=t&u.G,h=t&u.S,m=t&u.P,g=t&u.B,y=v?r:h?r[e]||(r[e]={}):(r[e]||{}).prototype,b=v?i:i[e]||(i[e]={}),_=b.prototype||(b.prototype={});for(c in v&&(n=e),n)l=((f=!d&&y&&void 0!==y[c])?y:n)[c],p=g&&f?s(l,r):m&&"function"==typeof l?s(Function.call,l):l,y&&a(y,c,l,t&u.U),b[c]!=l&&o(b,c,p),m&&_[c]!=l&&(_[c]=l)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){var r=n(48)("wks"),i=n(29),o=n(1).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,e,n){var r=n(17),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(3),i=n(90),o=n(26),a=Object.defineProperty;e.f=n(8)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(2)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){var n=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(1),i=n(14),o=n(13),a=n(29)("src"),s=n(125),u=(""+s).split("toString");n(9).inspectSource=function(t){return s.call(t)},(t.exports=function(t,e,n,s){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,a)||i(n,a,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:s?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||s.call(this)})},function(t,e,n){var r=n(24);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(0),i=n(2),o=n(24),a=/"/g,s=function(t,e,n,r){var i=String(o(t)),s="<"+e;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+i+"</"+e+">"};t.exports=function(t,e){var n={};n[t]=e(s),r(r.P+r.F*i(function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}),"String",n)}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(7),i=n(28);t.exports=n(8)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(43),i=n(24);t.exports=function(t){return r(i(t))}},function(t,e,n){"use strict";var r=n(2);t.exports=function(t,e){return!!t&&r(function(){e?t.call(null,function(){},1):t.call(null)})}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(44),i=n(28),o=n(15),a=n(26),s=n(13),u=n(90),c=Object.getOwnPropertyDescriptor;e.f=n(8)?c:function(t,e){if(t=o(t),e=a(e,!0),u)try{return c(t,e)}catch(t){}if(s(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){var r=n(0),i=n(9),o=n(2);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",a)}},function(t,e,n){var r=n(21),i=n(43),o=n(11),a=n(6),s=n(215);t.exports=function(t,e){var n=1==t,u=2==t,c=3==t,f=4==t,l=6==t,p=5==t||l,d=e||s;return function(e,s,v){for(var h,m,g=o(e),y=i(g),b=r(s,v,3),_=a(y.length),w=0,x=n?d(e,_):u?d(e,0):void 0;_>w;w++)if((p||w in y)&&(m=b(h=y[w],w,g),t))if(n)x[w]=m;else if(m)switch(t){case 3:return!0;case 5:return h;case 6:return w;case 2:x.push(h)}else if(f)return!1;return l?-1:c||f?f:x}}},function(t,e,n){var r=n(22);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){"use strict";if(n(8)){var r=n(30),i=n(1),o=n(2),a=n(0),s=n(59),u=n(87),c=n(21),f=n(41),l=n(28),p=n(14),d=n(42),v=n(17),h=n(6),m=n(116),g=n(32),y=n(26),b=n(13),_=n(45),w=n(4),x=n(11),A=n(79),S=n(33),C=n(35),E=n(34).f,O=n(81),k=n(29),$=n(5),T=n(20),M=n(49),I=n(46),j=n(83),P=n(38),N=n(52),F=n(40),L=n(82),R=n(107),B=n(7),D=n(18),U=B.f,V=D.f,W=i.RangeError,H=i.TypeError,z=i.Uint8Array,G=Array.prototype,q=u.ArrayBuffer,J=u.DataView,Y=T(0),K=T(2),X=T(3),Z=T(4),Q=T(5),tt=T(6),et=M(!0),nt=M(!1),rt=j.values,it=j.keys,ot=j.entries,at=G.lastIndexOf,st=G.reduce,ut=G.reduceRight,ct=G.join,ft=G.sort,lt=G.slice,pt=G.toString,dt=G.toLocaleString,vt=$("iterator"),ht=$("toStringTag"),mt=k("typed_constructor"),gt=k("def_constructor"),yt=s.CONSTR,bt=s.TYPED,_t=s.VIEW,wt=T(1,function(t,e){return Et(I(t,t[gt]),e)}),xt=o(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),At=!!z&&!!z.prototype.set&&o(function(){new z(1).set({})}),St=function(t,e){var n=v(t);if(n<0||n%e)throw W("Wrong offset!");return n},Ct=function(t){if(w(t)&&bt in t)return t;throw H(t+" is not a typed array!")},Et=function(t,e){if(!(w(t)&&mt in t))throw H("It is not a typed array constructor!");return new t(e)},Ot=function(t,e){return kt(I(t,t[gt]),e)},kt=function(t,e){for(var n=0,r=e.length,i=Et(t,r);r>n;)i[n]=e[n++];return i},$t=function(t,e,n){U(t,e,{get:function(){return this._d[n]}})},Tt=function(t){var e,n,r,i,o,a,s=x(t),u=arguments.length,f=u>1?arguments[1]:void 0,l=void 0!==f,p=O(s);if(null!=p&&!A(p)){for(a=p.call(s),r=[],e=0;!(o=a.next()).done;e++)r.push(o.value);s=r}for(l&&u>2&&(f=c(f,arguments[2],2)),e=0,n=h(s.length),i=Et(this,n);n>e;e++)i[e]=l?f(s[e],e):s[e];return i},Mt=function(){for(var t=0,e=arguments.length,n=Et(this,e);e>t;)n[t]=arguments[t++];return n},It=!!z&&o(function(){dt.call(new z(1))}),jt=function(){return dt.apply(It?lt.call(Ct(this)):Ct(this),arguments)},Pt={copyWithin:function(t,e){return R.call(Ct(this),t,e,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Ct(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Ct(this),arguments)},filter:function(t){return Ot(this,K(Ct(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Ct(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Ct(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){Y(Ct(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return nt(Ct(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return et(Ct(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return ct.apply(Ct(this),arguments)},lastIndexOf:function(t){return at.apply(Ct(this),arguments)},map:function(t){return wt(Ct(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return st.apply(Ct(this),arguments)},reduceRight:function(t){return ut.apply(Ct(this),arguments)},reverse:function(){for(var t,e=Ct(this).length,n=Math.floor(e/2),r=0;r<n;)t=this[r],this[r++]=this[--e],this[e]=t;return this},some:function(t){return X(Ct(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Ct(this),t)},subarray:function(t,e){var n=Ct(this),r=n.length,i=g(t,r);return new(I(n,n[gt]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,h((void 0===e?r:g(e,r))-i))}},Nt=function(t,e){return Ot(this,lt.call(Ct(this),t,e))},Ft=function(t){Ct(this);var e=St(arguments[1],1),n=this.length,r=x(t),i=h(r.length),o=0;if(i+e>n)throw W("Wrong length!");for(;o<i;)this[e+o]=r[o++]},Lt={entries:function(){return ot.call(Ct(this))},keys:function(){return it.call(Ct(this))},values:function(){return rt.call(Ct(this))}},Rt=function(t,e){return w(t)&&t[bt]&&"symbol"!=typeof e&&e in t&&String(+e)==String(e)},Bt=function(t,e){return Rt(t,e=y(e,!0))?l(2,t[e]):V(t,e)},Dt=function(t,e,n){return!(Rt(t,e=y(e,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?U(t,e,n):(t[e]=n.value,t)};yt||(D.f=Bt,B.f=Dt),a(a.S+a.F*!yt,"Object",{getOwnPropertyDescriptor:Bt,defineProperty:Dt}),o(function(){pt.call({})})&&(pt=dt=function(){return ct.call(this)});var Ut=d({},Pt);d(Ut,Lt),p(Ut,vt,Lt.values),d(Ut,{slice:Nt,set:Ft,constructor:function(){},toString:pt,toLocaleString:jt}),$t(Ut,"buffer","b"),$t(Ut,"byteOffset","o"),$t(Ut,"byteLength","l"),$t(Ut,"length","e"),U(Ut,ht,{get:function(){return this[bt]}}),t.exports=function(t,e,n,u){var c=t+((u=!!u)?"Clamped":"")+"Array",l="get"+t,d="set"+t,v=i[c],g=v||{},y=v&&C(v),b=!v||!s.ABV,x={},A=v&&v.prototype,O=function(t,n){U(t,n,{get:function(){return function(t,n){var r=t._d;return r.v[l](n*e+r.o,xt)}(this,n)},set:function(t){return function(t,n,r){var i=t._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[d](n*e+i.o,r,xt)}(this,n,t)},enumerable:!0})};b?(v=n(function(t,n,r,i){f(t,v,c,"_d");var o,a,s,u,l=0,d=0;if(w(n)){if(!(n instanceof q||"ArrayBuffer"==(u=_(n))||"SharedArrayBuffer"==u))return bt in n?kt(v,n):Tt.call(v,n);o=n,d=St(r,e);var g=n.byteLength;if(void 0===i){if(g%e)throw W("Wrong length!");if((a=g-d)<0)throw W("Wrong length!")}else if((a=h(i)*e)+d>g)throw W("Wrong length!");s=a/e}else s=m(n),o=new q(a=s*e);for(p(t,"_d",{b:o,o:d,l:a,e:s,v:new J(o)});l<s;)O(t,l++)}),A=v.prototype=S(Ut),p(A,"constructor",v)):o(function(){v(1)})&&o(function(){new v(-1)})&&N(function(t){new v,new v(null),new v(1.5),new v(t)},!0)||(v=n(function(t,n,r,i){var o;return f(t,v,c),w(n)?n instanceof q||"ArrayBuffer"==(o=_(n))||"SharedArrayBuffer"==o?void 0!==i?new g(n,St(r,e),i):void 0!==r?new g(n,St(r,e)):new g(n):bt in n?kt(v,n):Tt.call(v,n):new g(m(n))}),Y(y!==Function.prototype?E(g).concat(E(y)):E(g),function(t){t in v||p(v,t,g[t])}),v.prototype=A,r||(A.constructor=v));var k=A[vt],$=!!k&&("values"==k.name||null==k.name),T=Lt.values;p(v,mt,!0),p(A,bt,c),p(A,_t,!0),p(A,gt,v),(u?new v(1)[ht]==c:ht in A)||U(A,ht,{get:function(){return c}}),x[c]=v,a(a.G+a.W+a.F*(v!=g),x),a(a.S,c,{BYTES_PER_ELEMENT:e}),a(a.S+a.F*o(function(){g.of.call(v,1)}),c,{from:Tt,of:Mt}),"BYTES_PER_ELEMENT"in A||p(A,"BYTES_PER_ELEMENT",e),a(a.P,c,Pt),F(c),a(a.P+a.F*At,c,{set:Ft}),a(a.P+a.F*!$,c,Lt),r||A.toString==pt||(A.toString=pt),a(a.P+a.F*o(function(){new v(1).slice()}),c,{slice:Nt}),a(a.P+a.F*(o(function(){return[1,2].toLocaleString()!=new v([1,2]).toLocaleString()})||!o(function(){A.toLocaleString.call([1,2])})),c,{toLocaleString:jt}),P[c]=$?k:T,r||$||p(A,vt,T)}}else t.exports=function(){}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(29)("meta"),i=n(4),o=n(13),a=n(7).f,s=0,u=Object.isExtensible||function(){return!0},c=!n(2)(function(){return u(Object.preventExtensions({}))}),f=function(t){a(t,r,{value:{i:"O"+ ++s,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!u(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!u(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return c&&l.NEED&&u(t)&&!o(t,r)&&f(t),t}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=!1},function(t,e,n){var r=n(92),i=n(65);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(17),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(3),i=n(93),o=n(65),a=n(64)("IE_PROTO"),s=function(){},u=function(){var t,e=n(62)("iframe"),r=o.length;for(e.style.display="none",n(67).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;r--;)delete u.prototype[o[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(s.prototype=r(t),n=new s,s.prototype=null,n[a]=t):n=u(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(92),i=n(65).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){var r=n(13),i=n(11),o=n(64)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){var r=n(4);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){var r=n(7).f,i=n(13),o=n(5)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e){t.exports={}},function(t,e,n){var r=n(5)("unscopables"),i=Array.prototype;null==i[r]&&n(14)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e,n){"use strict";var r=n(1),i=n(7),o=n(8),a=n(5)("species");t.exports=function(t){var e=r[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(10);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){var r=n(23);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(23),i=n(5)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(3),i=n(22),o=n(5)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(9),i=n(1),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(30)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(15),i=n(6),o=n(32);t.exports=function(t){return function(e,n,a){var s,u=r(e),c=i(u.length),f=o(a,c);if(t&&n!=n){for(;c>f;)if((s=u[f++])!=s)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===n)return t||f||0;return!t&&-1}}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(0),i=n(24),o=n(2),a=n(69),s="["+a+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),f=function(t,e,n){var i={},s=o(function(){return!!a[t]()||"​"!="​"[t]()}),u=i[t]=s?e(l):a[t];n&&(i[n]=u),r(r.P+r.F*s,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=f},function(t,e,n){var r=n(5)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(3);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,n){"use strict";var r=n(45),i=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,n){"use strict";n(109);var r=n(10),i=n(14),o=n(2),a=n(24),s=n(5),u=n(84),c=s("species"),f=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var p=s(t),d=!o(function(){var e={};return e[p]=function(){return 7},7!=""[t](e)}),v=d?!o(function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[c]=function(){return n}),n[p](""),!e}):void 0;if(!d||!v||"replace"===t&&!f||"split"===t&&!l){var h=/./[p],m=n(a,p,""[t],function(t,e,n,r,i){return e.exec===u?d&&!i?{done:!0,value:h.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}}),g=m[0],y=m[1];r(String.prototype,t,g),i(RegExp.prototype,p,2==e?function(t,e){return y.call(t,this,e)}:function(t){return y.call(t,this)})}}},function(t,e,n){var r=n(21),i=n(105),o=n(79),a=n(3),s=n(6),u=n(81),c={},f={};(e=t.exports=function(t,e,n,l,p){var d,v,h,m,g=p?function(){return t}:u(t),y=r(n,l,e?2:1),b=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(d=s(t.length);d>b;b++)if((m=e?y(a(v=t[b])[0],v[1]):y(t[b]))===c||m===f)return m}else for(h=g.call(t);!(v=h.next()).done;)if((m=i(h,y,v.value,e))===c||m===f)return m}).BREAK=c,e.RETURN=f},function(t,e,n){var r=n(1).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){"use strict";var r=n(1),i=n(0),o=n(10),a=n(42),s=n(27),u=n(56),c=n(41),f=n(4),l=n(2),p=n(52),d=n(37),v=n(70);t.exports=function(t,e,n,h,m,g){var y=r[t],b=y,_=m?"set":"add",w=b&&b.prototype,x={},A=function(t){var e=w[t];o(w,t,"delete"==t?function(t){return!(g&&!f(t))&&e.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(g||w.forEach&&!l(function(){(new b).entries().next()}))){var S=new b,C=S[_](g?{}:-0,1)!=S,E=l(function(){S.has(1)}),O=p(function(t){new b(t)}),k=!g&&l(function(){for(var t=new b,e=5;e--;)t[_](e,e);return!t.has(-0)});O||((b=e(function(e,n){c(e,b,t);var r=v(new y,e,b);return null!=n&&u(n,m,r[_],r),r})).prototype=w,w.constructor=b),(E||k)&&(A("delete"),A("has"),m&&A("get")),(k||C)&&A(_),g&&w.clear&&delete w.clear}else b=h.getConstructor(e,t,m,_),a(b.prototype,n),s.NEED=!0;return d(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=y),x),g||h.setStrong(b,t,m),b}},function(t,e,n){for(var r,i=n(1),o=n(14),a=n(29),s=a("typed_array"),u=a("view"),c=!(!i.ArrayBuffer||!i.DataView),f=c,l=0,p="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=i[p[l++]])?(o(r.prototype,s,!0),o(r.prototype,u,!0)):f=!1;t.exports={ABV:c,CONSTR:f,TYPED:s,VIEW:u}},function(t,e,n){var r=n(289);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(89).default)("a83daffc",r,!1,{})},function(t,e,n){var r=n(291);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(89).default)("216fba80",r,!1,{})},function(t,e,n){var r=n(4),i=n(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){e.f=n(5)},function(t,e,n){var r=n(48)("keys"),i=n(29);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(23);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(1).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(4),i=n(3),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(21)(Function.call,n(18).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(4),i=n(68).set;t.exports=function(t,e,n){var o,a=e.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},function(t,e,n){"use strict";var r=n(17),i=n(24);t.exports=function(t){var e=String(i(this)),n="",o=r(t);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(e+=e))1&o&&(n+=e);return n}},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e){var n=Math.expm1;t.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:n},function(t,e,n){var r=n(17),i=n(24);t.exports=function(t){return function(e,n){var o,a,s=String(i(e)),u=r(n),c=s.length;return u<0||u>=c?t?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?t?s.charAt(u):o:t?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(30),i=n(0),o=n(10),a=n(14),s=n(38),u=n(104),c=n(37),f=n(35),l=n(5)("iterator"),p=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,e,n,v,h,m,g){u(n,e,v);var y,b,_,w=function(t){if(!p&&t in C)return C[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},x=e+" Iterator",A="values"==h,S=!1,C=t.prototype,E=C[l]||C["@@iterator"]||h&&C[h],O=E||w(h),k=h?A?w("entries"):O:void 0,$="Array"==e&&C.entries||E;if($&&(_=f($.call(new t)))!==Object.prototype&&_.next&&(c(_,x,!0),r||"function"==typeof _[l]||a(_,l,d)),A&&E&&"values"!==E.name&&(S=!0,O=function(){return E.call(this)}),r&&!g||!p&&!S&&C[l]||a(C,l,O),s[e]=O,s[x]=d,h)if(y={values:A?O:w("values"),keys:m?O:w("keys"),entries:k},g)for(b in y)b in C||o(C,b,y[b]);else i(i.P+i.F*(p||S),e,y);return y}},function(t,e,n){var r=n(77),i=n(24);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},function(t,e,n){var r=n(4),i=n(23),o=n(5)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e,n){var r=n(5)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){var r=n(38),i=n(5)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){"use strict";var r=n(7),i=n(28);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){var r=n(45),i=n(5)("iterator"),o=n(38);t.exports=n(9).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){"use strict";var r=n(11),i=n(32),o=n(6);t.exports=function(t){for(var e=r(this),n=o(e.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)e[s++]=t;return e}},function(t,e,n){"use strict";var r=n(39),i=n(108),o=n(38),a=n(15);t.exports=n(75)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,n){"use strict";var r,i,o=n(53),a=RegExp.prototype.exec,s=String.prototype.replace,u=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(c||f)&&(u=function(t){var e,n,r,i,u=this;return f&&(n=new RegExp("^"+u.source+"$(?!\\s)",o.call(u))),c&&(e=u.lastIndex),r=a.call(u,t),c&&r&&(u.lastIndex=u.global?r.index+r[0].length:e),f&&r&&r.length>1&&s.call(r[0],n,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=u},function(t,e,n){"use strict";var r=n(74)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r,i,o,a=n(21),s=n(98),u=n(67),c=n(62),f=n(1),l=f.process,p=f.setImmediate,d=f.clearImmediate,v=f.MessageChannel,h=f.Dispatch,m=0,g={},y=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},b=function(t){y.call(t.data)};p&&d||(p=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++m]=function(){s("function"==typeof t?t:Function(t),e)},r(m),m},d=function(t){delete g[t]},"process"==n(23)(l)?r=function(t){l.nextTick(a(y,t,1))}:h&&h.now?r=function(t){h.now(a(y,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),t.exports={set:p,clear:d}},function(t,e,n){"use strict";var r=n(1),i=n(8),o=n(30),a=n(59),s=n(14),u=n(42),c=n(2),f=n(41),l=n(17),p=n(6),d=n(116),v=n(34).f,h=n(7).f,m=n(82),g=n(37),y="prototype",b="Wrong index!",_=r.ArrayBuffer,w=r.DataView,x=r.Math,A=r.RangeError,S=r.Infinity,C=_,E=x.abs,O=x.pow,k=x.floor,$=x.log,T=x.LN2,M=i?"_b":"buffer",I=i?"_l":"byteLength",j=i?"_o":"byteOffset";function P(t,e,n){var r,i,o,a=new Array(n),s=8*n-e-1,u=(1<<s)-1,c=u>>1,f=23===e?O(2,-24)-O(2,-77):0,l=0,p=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===S?(i=t!=t?1:0,r=u):(r=k($(t)/T),t*(o=O(2,-r))<1&&(r--,o*=2),(t+=r+c>=1?f/o:f*O(2,1-c))*o>=2&&(r++,o/=2),r+c>=u?(i=0,r=u):r+c>=1?(i=(t*o-1)*O(2,e),r+=c):(i=t*O(2,c-1)*O(2,e),r=0));e>=8;a[l++]=255&i,i/=256,e-=8);for(r=r<<e|i,s+=e;s>0;a[l++]=255&r,r/=256,s-=8);return a[--l]|=128*p,a}function N(t,e,n){var r,i=8*n-e-1,o=(1<<i)-1,a=o>>1,s=i-7,u=n-1,c=t[u--],f=127&c;for(c>>=7;s>0;f=256*f+t[u],u--,s-=8);for(r=f&(1<<-s)-1,f>>=-s,s+=e;s>0;r=256*r+t[u],u--,s-=8);if(0===f)f=1-a;else{if(f===o)return r?NaN:c?-S:S;r+=O(2,e),f-=a}return(c?-1:1)*r*O(2,f-e)}function F(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function R(t){return[255&t,t>>8&255]}function B(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return P(t,52,8)}function U(t){return P(t,23,4)}function V(t,e,n){h(t[y],e,{get:function(){return this[n]}})}function W(t,e,n,r){var i=d(+n);if(i+e>t[I])throw A(b);var o=t[M]._b,a=i+t[j],s=o.slice(a,a+e);return r?s:s.reverse()}function H(t,e,n,r,i,o){var a=d(+n);if(a+e>t[I])throw A(b);for(var s=t[M]._b,u=a+t[j],c=r(+i),f=0;f<e;f++)s[u+f]=c[o?f:e-f-1]}if(a.ABV){if(!c(function(){_(1)})||!c(function(){new _(-1)})||c(function(){return new _,new _(1.5),new _(NaN),"ArrayBuffer"!=_.name})){for(var z,G=(_=function(t){return f(this,_),new C(d(t))})[y]=C[y],q=v(C),J=0;q.length>J;)(z=q[J++])in _||s(_,z,C[z]);o||(G.constructor=_)}var Y=new w(new _(2)),K=w[y].setInt8;Y.setInt8(0,2147483648),Y.setInt8(1,2147483649),!Y.getInt8(0)&&Y.getInt8(1)||u(w[y],{setInt8:function(t,e){K.call(this,t,e<<24>>24)},setUint8:function(t,e){K.call(this,t,e<<24>>24)}},!0)}else _=function(t){f(this,_,"ArrayBuffer");var e=d(t);this._b=m.call(new Array(e),0),this[I]=e},w=function(t,e,n){f(this,w,"DataView"),f(t,_,"DataView");var r=t[I],i=l(e);if(i<0||i>r)throw A("Wrong offset!");if(i+(n=void 0===n?r-i:p(n))>r)throw A("Wrong length!");this[M]=t,this[j]=i,this[I]=n},i&&(V(_,"byteLength","_l"),V(w,"buffer","_b"),V(w,"byteLength","_l"),V(w,"byteOffset","_o")),u(w[y],{getInt8:function(t){return W(this,1,t)[0]<<24>>24},getUint8:function(t){return W(this,1,t)[0]},getInt16:function(t){var e=W(this,2,t,arguments[1]);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=W(this,2,t,arguments[1]);return e[1]<<8|e[0]},getInt32:function(t){return F(W(this,4,t,arguments[1]))},getUint32:function(t){return F(W(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return N(W(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return N(W(this,8,t,arguments[1]),52,8)},setInt8:function(t,e){H(this,1,t,L,e)},setUint8:function(t,e){H(this,1,t,L,e)},setInt16:function(t,e){H(this,2,t,R,e,arguments[2])},setUint16:function(t,e){H(this,2,t,R,e,arguments[2])},setInt32:function(t,e){H(this,4,t,B,e,arguments[2])},setUint32:function(t,e){H(this,4,t,B,e,arguments[2])},setFloat32:function(t,e){H(this,4,t,U,e,arguments[2])},setFloat64:function(t,e){H(this,8,t,D,e,arguments[2])}});g(_,"ArrayBuffer"),g(w,"DataView"),s(w[y],a.VIEW,!0),e.ArrayBuffer=_,e.DataView=w},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var i=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),o=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[n].concat(o).concat([i]).join("\n")}var a;return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+n+"}":n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];null!=o&&(r[o]=!0)}for(i=0;i<t.length;i++){var a=t[i];null!=a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),e.push(a))}},e}},function(t,e,n){"use strict";function r(t,e){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],a=o[0],s={id:t+":"+i,css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}n.r(e),n.d(e,"default",function(){return v});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var o={},a=i&&(document.head||document.getElementsByTagName("head")[0]),s=null,u=0,c=!1,f=function(){},l=null,p="data-vue-ssr-id",d="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function v(t,e,n,i){c=n,l=i||{};var a=r(t,e);return h(a),function(e){for(var n=[],i=0;i<a.length;i++){var s=a[i];(u=o[s.id]).refs--,n.push(u)}e?h(a=r(t,e)):a=[];for(i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var c=0;c<u.parts.length;c++)u.parts[c]();delete o[u.id]}}}}function h(t){for(var e=0;e<t.length;e++){var n=t[e],r=o[n.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](n.parts[i]);for(;i<n.parts.length;i++)r.parts.push(g(n.parts[i]));r.parts.length>n.parts.length&&(r.parts.length=n.parts.length)}else{var a=[];for(i=0;i<n.parts.length;i++)a.push(g(n.parts[i]));o[n.id]={id:n.id,refs:1,parts:a}}}}function m(){var t=document.createElement("style");return t.type="text/css",a.appendChild(t),t}function g(t){var e,n,r=document.querySelector("style["+p+'~="'+t.id+'"]');if(r){if(c)return f;r.parentNode.removeChild(r)}if(d){var i=u++;r=s||(s=m()),e=_.bind(null,r,i,!1),n=_.bind(null,r,i,!0)}else r=m(),e=function(t,e){var n=e.css,r=e.media,i=e.sourceMap;r&&t.setAttribute("media",r);l.ssrId&&t.setAttribute(p,e.id);i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,r),n=function(){r.parentNode.removeChild(r)};return e(t),function(r){if(r){if(r.css===t.css&&r.media===t.media&&r.sourceMap===t.sourceMap)return;e(t=r)}else n()}}var y,b=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function _(t,e,n,r){var i=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=b(e,i);else{var o=document.createTextNode(i),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(o,a[e]):t.appendChild(o)}}},function(t,e,n){t.exports=!n(8)&&!n(2)(function(){return 7!=Object.defineProperty(n(62)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(1),i=n(9),o=n(30),a=n(63),s=n(7).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||s(e,t,{value:a.f(t)})}},function(t,e,n){var r=n(13),i=n(15),o=n(49)(!1),a=n(64)("IE_PROTO");t.exports=function(t,e){var n,s=i(t),u=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;e.length>u;)r(s,n=e[u++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(7),i=n(3),o=n(31);t.exports=n(8)?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),s=a.length,u=0;s>u;)r.f(t,n=a[u++],e[n]);return t}},function(t,e,n){var r=n(15),i=n(34).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e,n){"use strict";var r=n(31),i=n(50),o=n(44),a=n(11),s=n(43),u=Object.assign;t.exports=!u||n(2)(function(){var t={},e={},n=Symbol(),r="abcdefghijklmnopqrst";return t[n]=7,r.split("").forEach(function(t){e[t]=t}),7!=u({},t)[n]||Object.keys(u({},e)).join("")!=r})?function(t,e){for(var n=a(t),u=arguments.length,c=1,f=i.f,l=o.f;u>c;)for(var p,d=s(arguments[c++]),v=f?r(d).concat(f(d)):r(d),h=v.length,m=0;h>m;)l.call(d,p=v[m++])&&(n[p]=d[p]);return n}:u},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,n){"use strict";var r=n(22),i=n(4),o=n(98),a=[].slice,s={};t.exports=Function.bind||function(t){var e=r(this),n=a.call(arguments,1),u=function(){var r=n.concat(a.call(arguments));return this instanceof u?function(t,e,n){if(!(e in s)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";s[e]=Function("F,a","return new F("+r.join(",")+")")}return s[e](t,n)}(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(1).parseInt,i=n(51).trim,o=n(69),a=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(a.test(n)?16:10))}:r},function(t,e,n){var r=n(1).parseFloat,i=n(51).trim;t.exports=1/r(n(69)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){var r=n(23);t.exports=function(t,e){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(e);return+t}},function(t,e,n){var r=n(4),i=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&i(t)===t}},function(t,e){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,e,n){"use strict";var r=n(33),i=n(28),o=n(37),a={};n(14)(a,n(5)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(3);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(22),i=n(11),o=n(43),a=n(6);t.exports=function(t,e,n,s,u){r(e);var c=i(t),f=o(c),l=a(c.length),p=u?l-1:0,d=u?-1:1;if(n<2)for(;;){if(p in f){s=f[p],p+=d;break}if(p+=d,u?p<0:l<=p)throw TypeError("Reduce of empty array with no initial value")}for(;u?p>=0:l>p;p+=d)p in f&&(s=e(s,f[p],p,c));return s}},function(t,e,n){"use strict";var r=n(11),i=n(32),o=n(6);t.exports=[].copyWithin||function(t,e){var n=r(this),a=o(n.length),s=i(t,a),u=i(e,a),c=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===c?a:i(c,a))-u,a-s),l=1;for(u<s&&s<u+f&&(l=-1,u+=f-1,s+=f-1);f-- >0;)u in n?n[s]=n[u]:delete n[s],s+=l,u+=l;return n}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r=n(84);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){n(8)&&"g"!=/./g.flags&&n(7).f(RegExp.prototype,"flags",{configurable:!0,get:n(53)})},function(t,e,n){"use strict";var r,i,o,a,s=n(30),u=n(1),c=n(21),f=n(45),l=n(0),p=n(4),d=n(22),v=n(41),h=n(56),m=n(46),g=n(86).set,y=n(236)(),b=n(112),_=n(237),w=n(57),x=n(113),A=u.TypeError,S=u.process,C=S&&S.versions,E=C&&C.v8||"",O=u.Promise,k="process"==f(S),$=function(){},T=i=b.f,M=!!function(){try{var t=O.resolve(1),e=(t.constructor={})[n(5)("species")]=function(t){t($,$)};return(k||"function"==typeof PromiseRejectionEvent)&&t.then($)instanceof e&&0!==E.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),I=function(t){var e;return!(!p(t)||"function"!=typeof(e=t.then))&&e},j=function(t,e){if(!t._n){t._n=!0;var n=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,a=function(e){var n,o,a,s=i?e.ok:e.fail,u=e.resolve,c=e.reject,f=e.domain;try{s?(i||(2==t._h&&F(t),t._h=1),!0===s?n=r:(f&&f.enter(),n=s(r),f&&(f.exit(),a=!0)),n===e.promise?c(A("Promise-chain cycle")):(o=I(n))?o.call(n,u,c):u(n)):c(r)}catch(t){f&&!a&&f.exit(),c(t)}};n.length>o;)a(n[o++]);t._c=[],t._n=!1,e&&!t._h&&P(t)})}},P=function(t){g.call(u,function(){var e,n,r,i=t._v,o=N(t);if(o&&(e=_(function(){k?S.emit("unhandledRejection",i,t):(n=u.onunhandledrejection)?n({promise:t,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=k||N(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},N=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){g.call(u,function(){var e;k?S.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},L=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),j(e,!0))},R=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw A("Promise can't be resolved itself");(e=I(t))?y(function(){var r={_w:n,_d:!1};try{e.call(t,c(R,r,1),c(L,r,1))}catch(t){L.call(r,t)}}):(n._v=t,n._s=1,j(n,!1))}catch(t){L.call({_w:n,_d:!1},t)}}};M||(O=function(t){v(this,O,"Promise","_h"),d(t),r.call(this);try{t(c(R,this,1),c(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(42)(O.prototype,{then:function(t,e){var n=T(m(this,O));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=k?S.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&j(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(R,t,1),this.reject=c(L,t,1)},b.f=T=function(t){return t===O||t===a?new o(t):i(t)}),l(l.G+l.W+l.F*!M,{Promise:O}),n(37)(O,"Promise"),n(40)("Promise"),a=n(9).Promise,l(l.S+l.F*!M,"Promise",{reject:function(t){var e=T(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(s||!M),"Promise",{resolve:function(t){return x(s&&this===a?O:this,t)}}),l(l.S+l.F*!(M&&n(52)(function(t){O.all(t).catch($)})),"Promise",{all:function(t){var e=this,n=T(e),r=n.resolve,i=n.reject,o=_(function(){var n=[],o=0,a=1;h(t,!1,function(t){var s=o++,u=!1;n.push(void 0),a++,e.resolve(t).then(function(t){u||(u=!0,n[s]=t,--a||r(n))},i)}),--a||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=T(e),r=n.reject,i=_(function(){h(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},function(t,e,n){"use strict";var r=n(22);function i(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},function(t,e,n){var r=n(3),i=n(4),o=n(112);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";var r=n(7).f,i=n(33),o=n(42),a=n(21),s=n(41),u=n(56),c=n(75),f=n(108),l=n(40),p=n(8),d=n(27).fastKey,v=n(36),h=p?"_s":"size",m=function(t,e){var n,r=d(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,c){var f=t(function(t,r){s(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[h]=0,null!=r&&u(r,n,t[c],t)});return o(f.prototype,{clear:function(){for(var t=v(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[h]=0},delete:function(t){var n=v(this,e),r=m(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[h]--}return!!r},forEach:function(t){v(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!m(v(this,e),t)}}),p&&r(f.prototype,"size",{get:function(){return v(this,e)[h]}}),f},def:function(t,e,n){var r,i,o=m(t,e);return o?o.v=n:(t._l=o={i:i=d(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[h]++,"F"!==i&&(t._i[i]=o)),t},getEntry:m,setStrong:function(t,e,n){c(t,e,function(t,n){this._t=v(t,e),this._k=n,this._l=void 0},function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))},n?"entries":"values",!n,!0),l(e)}}},function(t,e,n){"use strict";var r=n(42),i=n(27).getWeak,o=n(3),a=n(4),s=n(41),u=n(56),c=n(20),f=n(13),l=n(36),p=c(5),d=c(6),v=0,h=function(t){return t._l||(t._l=new m)},m=function(){this.a=[]},g=function(t,e){return p(t.a,function(t){return t[0]===e})};m.prototype={get:function(t){var e=g(this,t);if(e)return e[1]},has:function(t){return!!g(this,t)},set:function(t,e){var n=g(this,t);n?n[1]=e:this.a.push([t,e])},delete:function(t){var e=d(this.a,function(e){return e[0]===t});return~e&&this.a.splice(e,1),!!~e}},t.exports={getConstructor:function(t,e,n,o){var c=t(function(t,r){s(t,c,e,"_i"),t._t=e,t._i=v++,t._l=void 0,null!=r&&u(r,n,t[o],t)});return r(c.prototype,{delete:function(t){if(!a(t))return!1;var n=i(t);return!0===n?h(l(this,e)).delete(t):n&&f(n,this._i)&&delete n[this._i]},has:function(t){if(!a(t))return!1;var n=i(t);return!0===n?h(l(this,e)).has(t):n&&f(n,this._i)}}),c},def:function(t,e,n){var r=i(o(e),!0);return!0===r?h(t).set(e,n):r[t._i]=n,t},ufstore:h}},function(t,e,n){var r=n(17),i=n(6);t.exports=function(t){if(void 0===t)return 0;var e=r(t),n=i(e);if(e!==n)throw RangeError("Wrong length!");return n}},function(t,e,n){var r=n(34),i=n(50),o=n(3),a=n(1).Reflect;t.exports=a&&a.ownKeys||function(t){var e=r.f(o(t)),n=i.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(6),i=n(71),o=n(24);t.exports=function(t,e,n,a){var s=String(o(t)),u=s.length,c=void 0===n?" ":String(n),f=r(e);if(f<=u||""==c)return s;var l=f-u,p=i.call(c,Math.ceil(l/c.length));return p.length>l&&(p=p.slice(0,l)),a?p+s:s+p}},function(t,e,n){var r=n(31),i=n(15),o=n(44).f;t.exports=function(t){return function(e){for(var n,a=i(e),s=r(a),u=s.length,c=0,f=[];u>c;)o.call(a,n=s[c++])&&f.push(t?[n,a[n]]:a[n]);return f}}},function(t,e,n){(function(e,n){
/*!
 * Vue.js v2.6.7
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */var r;r=function(){"use strict";var t=Object.freeze({});function r(t){return null==t}function i(t){return null!=t}function o(t){return!0===t}function a(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function s(t){return null!==t&&"object"==typeof t}var u=Object.prototype.toString;function c(t){return u.call(t).slice(8,-1)}function f(t){return"[object Object]"===u.call(t)}function l(t){return"[object RegExp]"===u.call(t)}function p(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function d(t){return i(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function v(t){return null==t?"":Array.isArray(t)||f(t)&&t.toString===u?JSON.stringify(t,null,2):String(t)}function h(t){var e=parseFloat(t);return isNaN(e)?t:e}function m(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var g=m("slot,component",!0),y=m("key,ref,slot,slot-scope,is");function b(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var _=Object.prototype.hasOwnProperty;function w(t,e){return _.call(t,e)}function x(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var A=/-(\w)/g,S=x(function(t){return t.replace(A,function(t,e){return e?e.toUpperCase():""})}),C=x(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),E=/\B([A-Z])/g,O=x(function(t){return t.replace(E,"-$1").toLowerCase()}),k=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function $(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function T(t,e){for(var n in e)t[n]=e[n];return t}function M(t){for(var e={},n=0;n<t.length;n++)t[n]&&T(e,t[n]);return e}function I(t,e,n){}var j=function(t,e,n){return!1},P=function(t){return t};function N(t,e){if(t===e)return!0;var n=s(t),r=s(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every(function(t,n){return N(t,e[n])});if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||o)return!1;var a=Object.keys(t),u=Object.keys(e);return a.length===u.length&&a.every(function(n){return N(t[n],e[n])})}catch(t){return!1}}function F(t,e){for(var n=0;n<t.length;n++)if(N(t[n],e))return n;return-1}function L(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var R="data-server-rendered",B=["component","directive","filter"],D=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],U={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:j,isReservedAttr:j,isUnknownElement:j,getTagNamespace:I,parsePlatformTagName:P,mustUseProp:j,async:!0,_lifecycleHooks:D},V="a-zA-Z·À-ÖØ-öø-ͽͿ-῿‌-‍‿-⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";function W(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function H(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var z,G=new RegExp("[^"+V+".$_\\d]"),q="__proto__"in{},J="undefined"!=typeof window,Y="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,K=Y&&WXEnvironment.platform.toLowerCase(),X=J&&window.navigator.userAgent.toLowerCase(),Z=X&&/msie|trident/.test(X),Q=X&&X.indexOf("msie 9.0")>0,tt=X&&X.indexOf("edge/")>0,et=(X&&X.indexOf("android"),X&&/iphone|ipad|ipod|ios/.test(X)||"ios"===K),nt=(X&&/chrome\/\d+/.test(X),X&&/phantomjs/.test(X),X&&X.match(/firefox\/(\d+)/)),rt={}.watch,it=!1;if(J)try{var ot={};Object.defineProperty(ot,"passive",{get:function(){it=!0}}),window.addEventListener("test-passive",null,ot)}catch(t){}var at=function(){return void 0===z&&(z=!J&&!Y&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),z},st=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ut(t){return"function"==typeof t&&/native code/.test(t.toString())}var ct,ft="undefined"!=typeof Symbol&&ut(Symbol)&&"undefined"!=typeof Reflect&&ut(Reflect.ownKeys);ct="undefined"!=typeof Set&&ut(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var lt=I,pt=I,dt=I,vt=I,ht="undefined"!=typeof console,mt=/(?:^|[-_])(\w)/g;lt=function(t,e){var n=e?dt(e):"";U.warnHandler?U.warnHandler.call(null,t,e,n):ht&&!U.silent&&console.error("[Vue warn]: "+t+n)},pt=function(t,e){ht&&!U.silent&&console.warn("[Vue tip]: "+t+(e?dt(e):""))},vt=function(t,e){if(t.$root===t)return"<Root>";var n="function"==typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,r=n.name||n._componentTag,i=n.__file;if(!r&&i){var o=i.match(/([^\/\\]+)\.vue$/);r=o&&o[1]}return(r?"<"+r.replace(mt,function(t){return t.toUpperCase()}).replace(/[-_]/g,"")+">":"<Anonymous>")+(i&&!1!==e?" at "+i:"")},dt=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map(function(t,e){return""+(0===e?"---\x3e ":function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n}(" ",5+2*e))+(Array.isArray(t)?vt(t[0])+"... ("+t[1]+" recursive calls)":vt(t))}).join("\n")}return"\n\n(found in "+vt(t)+")"};var gt=0,yt=function(){this.id=gt++,this.subs=[]};yt.prototype.addSub=function(t){this.subs.push(t)},yt.prototype.removeSub=function(t){b(this.subs,t)},yt.prototype.depend=function(){yt.target&&yt.target.addDep(this)},yt.prototype.notify=function(){var t=this.subs.slice();U.async||t.sort(function(t,e){return t.id-e.id});for(var e=0,n=t.length;e<n;e++)t[e].update()},yt.target=null;var bt=[];function _t(t){bt.push(t),yt.target=t}function wt(){bt.pop(),yt.target=bt[bt.length-1]}var xt=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},At={child:{configurable:!0}};At.child.get=function(){return this.componentInstance},Object.defineProperties(xt.prototype,At);var St=function(t){void 0===t&&(t="");var e=new xt;return e.text=t,e.isComment=!0,e};function Ct(t){return new xt(void 0,void 0,void 0,String(t))}function Et(t){var e=new xt(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Ot=Array.prototype,kt=Object.create(Ot);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Ot[t];H(kt,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var $t=Object.getOwnPropertyNames(kt),Tt=!0;function Mt(t){Tt=t}var It=function(t){var e;this.value=t,this.dep=new yt,this.vmCount=0,H(t,"__ob__",this),Array.isArray(t)?(q?(e=kt,t.__proto__=e):function(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];H(t,o,e[o])}}(t,kt,$t),this.observeArray(t)):this.walk(t)};function jt(t,e){var n;if(s(t)&&!(t instanceof xt))return w(t,"__ob__")&&t.__ob__ instanceof It?n=t.__ob__:Tt&&!at()&&(Array.isArray(t)||f(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new It(t)),e&&n&&n.vmCount++,n}function Pt(t,e,n,r,i){var o=new yt,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,u=a&&a.set;s&&!u||2!==arguments.length||(n=t[e]);var c=!i&&jt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return yt.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,i=e.length;r<i;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var a=s?s.call(t):n;e===a||e!=e&&a!=a||(r&&r(),s&&!u||(u?u.call(t,e):n=e,c=!i&&jt(e),o.notify()))}})}}function Nt(t,e,n){if((r(t)||a(t))&&lt("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var i=t.__ob__;return t._isVue||i&&i.vmCount?(lt("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):i?(Pt(i.value,e,n),i.dep.notify(),n):(t[e]=n,n)}function Ft(t,e){if((r(t)||a(t))&&lt("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&p(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?lt("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(t,e)&&(delete t[e],n&&n.dep.notify())}}It.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Pt(t,e[n])},It.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)jt(t[e])};var Lt=U.optionMergeStrategies;function Rt(t,e){if(!e)return t;for(var n,r,i,o=ft?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(r=t[n],i=e[n],w(t,n)?r!==i&&f(r)&&f(i)&&Rt(r,i):Nt(t,n,i));return t}function Bt(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?Rt(r,i):i}:e?t?function(){return Rt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function Dt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function Ut(t,e,n,r){var i=Object.create(t||null);return e?(Ht(r,e,n),T(i,e)):i}Lt.el=Lt.propsData=function(t,e,n,r){return n||lt('option "'+r+'" can only be used during instance creation with the `new` keyword.'),Vt(t,e)},Lt.data=function(t,e,n){return n?Bt(t,e,n):e&&"function"!=typeof e?(lt('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):Bt(t,e)},D.forEach(function(t){Lt[t]=Dt}),B.forEach(function(t){Lt[t+"s"]=Ut}),Lt.watch=function(t,e,n,r){if(t===rt&&(t=void 0),e===rt&&(e=void 0),!e)return Object.create(t||null);if(Ht(r,e,n),!t)return e;var i={};for(var o in T(i,t),e){var a=i[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},Lt.props=Lt.methods=Lt.inject=Lt.computed=function(t,e,n,r){if(e&&Ht(r,e,n),!t)return e;var i=Object.create(null);return T(i,t),e&&T(i,e),i},Lt.provide=Bt;var Vt=function(t,e){return void 0===e?t:e};function Wt(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+V+"]*$").test(t)||lt('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(g(t)||U.isReservedTag(t))&&lt("Do not use built-in or reserved HTML elements as component id: "+t)}function Ht(t,e,n){f(e)||lt('Invalid value for option "'+t+'": expected an Object, but got '+c(e)+".",n)}function zt(t,e,n){if(function(t){for(var e in t.components)Wt(e)}(e),"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])?o[S(i)]={type:null}:lt("props must be strings when using array syntax.");else if(f(n))for(var a in n)i=n[a],o[S(a)]=f(i)?i:{type:i};else lt('Invalid value for option "props": expected an Array or an Object, but got '+c(n)+".",e);t.props=o}}(e,n),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(f(n))for(var o in n){var a=n[o];r[o]=f(a)?T({from:o},a):{from:a}}else lt('Invalid value for option "inject": expected an Array or an Object, but got '+c(n)+".",e)}}(e,n),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=zt(t,e.extends,n)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)t=zt(t,e.mixins[r],n);var o,a={};for(o in t)s(o);for(o in e)w(t,o)||s(o);function s(r){var i=Lt[r]||Vt;a[r]=i(t[r],e[r],n,r)}return a}function Gt(t,e,n,r){if("string"==typeof n){var i=t[e];if(w(i,n))return i[n];var o=S(n);if(w(i,o))return i[o];var a=C(o);if(w(i,a))return i[a];var s=i[n]||i[o]||i[a];return r&&!s&&lt("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function qt(t,e,n,r){var i=e[t],o=!w(n,t),a=n[t],u=Zt(Boolean,i.type);if(u>-1)if(o&&!w(i,"default"))a=!1;else if(""===a||a===O(t)){var f=Zt(String,i.type);(f<0||u<f)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!w(e,"default"))return;var r=e.default;s(r)&&lt('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t);if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==Kt(e.type)?r.call(t):r}(r,i,t);var l=Tt;Mt(!0),jt(a),Mt(l)}return function(t,e,n,r,i){if(t.required&&i)return void lt('Missing required prop: "'+e+'"',r);if(null==n&&!t.required)return;var o=t.type,a=!o||!0===o,s=[];if(o){Array.isArray(o)||(o=[o]);for(var u=0;u<o.length&&!a;u++){var f=Yt(n,o[u]);s.push(f.expectedType||""),a=f.valid}}if(!a)return void lt(function(t,e,n){var r='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(C).join(", "),i=n[0],o=c(e),a=Qt(e,i),s=Qt(e,o);1===n.length&&te(i)&&!function(){var t=[],e=arguments.length;for(;e--;)t[e]=arguments[e];return t.some(function(t){return"boolean"===t.toLowerCase()})}(i,o)&&(r+=" with value "+a);r+=", got "+o+" ",te(o)&&(r+="with value "+s+".");return r}(e,n,s),r);var l=t.validator;l&&(l(n)||lt('Invalid prop: custom validator check failed for prop "'+e+'".',r))}(i,t,a,r,o),a}var Jt=/^(String|Number|Boolean|Function|Symbol)$/;function Yt(t,e){var n,r=Kt(e);if(Jt.test(r)){var i=typeof t;(n=i===r.toLowerCase())||"object"!==i||(n=t instanceof e)}else n="Object"===r?f(t):"Array"===r?Array.isArray(t):t instanceof e;return{valid:n,expectedType:r}}function Kt(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function Xt(t,e){return Kt(t)===Kt(e)}function Zt(t,e){if(!Array.isArray(e))return Xt(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(Xt(e[n],t))return n;return-1}function Qt(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}function te(t){return["string","number","boolean"].some(function(e){return t.toLowerCase()===e})}function ee(t,e,n){_t();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,t,e,n))return}catch(t){re(t,r,"errorCaptured hook")}}re(t,e,n)}finally{wt()}}function ne(t,e,n,r,i){var o;try{(o=n?t.apply(e,n):t.call(e))&&!o._isVue&&d(o)&&(o=o.catch(function(t){return ee(t,r,i+" (Promise/async)")}))}catch(t){ee(t,r,i)}return o}function re(t,e,n){if(U.errorHandler)try{return U.errorHandler.call(null,t,e,n)}catch(e){e!==t&&ie(e,null,"config.errorHandler")}ie(t,e,n)}function ie(t,e,n){if(lt("Error in "+n+': "'+t.toString()+'"',e),!J&&!Y||"undefined"==typeof console)throw t;console.error(t)}var oe,ae,se,ue=!1,ce=[],fe=!1;function le(){fe=!1;var t=ce.slice(0);ce.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&ut(Promise)){var pe=Promise.resolve();oe=function(){pe.then(le),et&&setTimeout(I)},ue=!0}else if(Z||"undefined"==typeof MutationObserver||!ut(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())oe=void 0!==n&&ut(n)?function(){n(le)}:function(){setTimeout(le,0)};else{var de=1,ve=new MutationObserver(le),he=document.createTextNode(String(de));ve.observe(he,{characterData:!0}),oe=function(){de=(de+1)%2,he.data=String(de)},ue=!0}function me(t,e){var n;if(ce.push(function(){if(t)try{t.call(e)}catch(t){ee(t,e,"nextTick")}else n&&n(e)}),fe||(fe=!0,oe()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var ge,ye=J&&window.performance;ye&&ye.mark&&ye.measure&&ye.clearMarks&&ye.clearMeasures&&(ae=function(t){return ye.mark(t)},se=function(t,e,n){ye.measure(t,e,n),ye.clearMarks(e),ye.clearMarks(n)});var be=m("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),_e=function(t,e){lt('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},we=function(t,e){lt('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',t)},xe="undefined"!=typeof Proxy&&ut(Proxy);if(xe){var Ae=m("stop,prevent,self,ctrl,shift,alt,meta,exact");U.keyCodes=new Proxy(U.keyCodes,{set:function(t,e,n){return Ae(e)?(lt("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var Se={has:function(t,e){var n=e in t,r=be(e)||"string"==typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||r||(e in t.$data?we(t,e):_e(t,e)),n||!r}},Ce={get:function(t,e){return"string"!=typeof e||e in t||(e in t.$data?we(t,e):_e(t,e)),t[e]}};ge=function(t){if(xe){var e=t.$options,n=e.render&&e.render._withStripped?Ce:Se;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var Ee=new ct;function Oe(t){!function t(e,n){var r,i;var o=Array.isArray(e);if(!o&&!s(e)||Object.isFrozen(e)||e instanceof xt)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}(t,Ee),Ee.clear()}var ke=x(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function $e(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return ne(r,null,arguments,e,"v-on handler");for(var i=r.slice(),o=0;o<i.length;o++)ne(i[o],null,t,e,"v-on handler")}return n.fns=t,n}function Te(t,e,n,i,a,s){var u,c,f,l;for(u in t)c=t[u],f=e[u],l=ke(u),r(c)?lt('Invalid handler for event "'+l.name+'": got '+String(c),s):r(f)?(r(c.fns)&&(c=t[u]=$e(c,s)),o(l.once)&&(c=t[u]=a(l.name,c,l.capture)),n(l.name,c,l.capture,l.passive,l.params)):c!==f&&(f.fns=c,t[u]=f);for(u in e)r(t[u])&&i((l=ke(u)).name,e[u],l.capture)}function Me(t,e,n){var a;t instanceof xt&&(t=t.data.hook||(t.data.hook={}));var s=t[e];function u(){n.apply(this,arguments),b(a.fns,u)}r(s)?a=$e([u]):i(s.fns)&&o(s.merged)?(a=s).fns.push(u):a=$e([s,u]),a.merged=!0,t[e]=a}function Ie(t,e,n,r,o){if(i(e)){if(w(e,n))return t[n]=e[n],o||delete e[n],!0;if(w(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function je(t){return a(t)?[Ct(t)]:Array.isArray(t)?function t(e,n){var s=[];var u,c,f,l;for(u=0;u<e.length;u++)r(c=e[u])||"boolean"==typeof c||(f=s.length-1,l=s[f],Array.isArray(c)?c.length>0&&(Pe((c=t(c,(n||"")+"_"+u))[0])&&Pe(l)&&(s[f]=Ct(l.text+c[0].text),c.shift()),s.push.apply(s,c)):a(c)?Pe(l)?s[f]=Ct(l.text+c):""!==c&&s.push(Ct(c)):Pe(c)&&Pe(l)?s[f]=Ct(l.text+c.text):(o(e._isVList)&&i(c.tag)&&r(c.key)&&i(n)&&(c.key="__vlist"+n+"_"+u+"__"),s.push(c)));return s}(t):void 0}function Pe(t){return i(t)&&i(t.text)&&!1===t.isComment}function Ne(t,e){if(t){for(var n=Object.create(null),r=ft?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){for(var a=t[o].from,s=e;s;){if(s._provided&&w(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[o]){var u=t[o].default;n[o]="function"==typeof u?u.call(e):u}else lt('Injection "'+o+'" not found',e)}}return n}}function Fe(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,u=n[s]||(n[s]=[]);"template"===o.tag?u.push.apply(u,o.children||[]):u.push(o)}}for(var c in n)n[c].every(Le)&&delete n[c];return n}function Le(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Re(e,n,r){var i,o=!e||!!e.$stable,a=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(o&&r&&r!==t&&a===r.$key&&0===Object.keys(n).length)return r;for(var s in i={},e)e[s]&&"$"!==s[0]&&(i[s]=Be(n,s,e[s]))}else i={};for(var u in n)u in i||(i[u]=De(n,u));return e&&Object.isExtensible(e)&&(e._normalized=i),H(i,"$stable",o),H(i,"$key",a),i}function Be(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:je(t))&&0===t.length?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function De(t,e){return function(){return t[e]}}function Ue(t,e){var n,r,o,a,u;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(s(t))if(ft&&t[Symbol.iterator]){n=[];for(var c=t[Symbol.iterator](),f=c.next();!f.done;)n.push(e(f.value,n.length)),f=c.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,o=a.length;r<o;r++)u=a[r],n[r]=e(t[u],u,r);return i(n)||(n=[]),n._isVList=!0,n}function Ve(t,e,n,r){var i,o=this.$scopedSlots[t];o?(n=n||{},r&&(s(r)||lt("slot v-bind without argument expects an Object",this),n=T(T({},r),n)),i=o(n)||e):i=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function We(t){return Gt(this.$options,"filters",t,!0)||P}function He(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function ze(t,e,n,r,i){var o=U.keyCodes[e]||n;return i&&r&&!U.keyCodes[e]?He(i,r):o?He(o,t):r?O(r)!==e:void 0}function Ge(t,e,n,r,i){if(n)if(s(n)){var o;Array.isArray(n)&&(n=M(n));var a=function(a){if("class"===a||"style"===a||y(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||U.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var u=S(a);a in o||u in o||(o[a]=n[a],i&&((t.on||(t.on={}))["update:"+u]=function(t){n[a]=t}))};for(var u in n)a(u)}else lt("v-bind without argument expects an Object or Array value",this);return t}function qe(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(Ye(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function Je(t,e,n){return Ye(t,"__once__"+e+(n?"_"+n:""),!0),t}function Ye(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&Ke(t[r],e+"_"+r,n);else Ke(t,e,n)}function Ke(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function Xe(t,e){if(e)if(f(e)){var n=t.on=t.on?T({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(i,o):o}}else lt("v-on without argument expects an Object value",this);return t}function Ze(t,e,n,r){e=e||{$stable:!n};for(var i=0;i<t.length;i++){var o=t[i];Array.isArray(o)?Ze(o,e,n):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return r&&(e.$key=r),e}function Qe(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r?t[e[n]]=e[n+1]:""!==r&&null!==r&&lt("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return t}function tn(t,e){return"string"==typeof t?e+t:t}function en(t){t._o=Je,t._n=h,t._s=v,t._l=Ue,t._t=Ve,t._q=N,t._i=F,t._m=qe,t._f=We,t._k=ze,t._b=Ge,t._v=Ct,t._e=St,t._u=Ze,t._g=Xe,t._d=Qe,t._p=tn}function nn(e,n,r,i,a){var s,u=this,c=a.options;w(i,"_uid")?(s=Object.create(i))._original=i:(s=i,i=i._original);var f=o(c._compiled),l=!f;this.data=e,this.props=n,this.children=r,this.parent=i,this.listeners=e.on||t,this.injections=Ne(c.inject,i),this.slots=function(){return u.$slots||Re(e.scopedSlots,u.$slots=Fe(r,i)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Re(e.scopedSlots,this.slots())}}),f&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=Re(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(t,e,n,r){var o=pn(s,t,e,n,r,l);return o&&!Array.isArray(o)&&(o.fnScopeId=c._scopeId,o.fnContext=i),o}:this._c=function(t,e,n,r){return pn(s,t,e,n,r,l)}}function rn(t,e,n,r,i){var o=Et(t);return o.fnContext=n,o.fnOptions=r,(o.devtoolsMeta=o.devtoolsMeta||{}).renderContext=i,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function on(t,e){for(var n in e)t[S(n)]=e[n]}en(nn.prototype);var an={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;an.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,xn)).$mount(e?t.elm:void 0,e)}},prepatch:function(e,n){var r=n.componentOptions;!function(e,n,r,i,o){An=!0;var a=i.data.scopedSlots,s=e.$scopedSlots,u=!!(a&&!a.$stable||s!==t&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key),c=!!(o||e.$options._renderChildren||u);e.$options._parentVnode=i,e.$vnode=i,e._vnode&&(e._vnode.parent=i);if(e.$options._renderChildren=o,e.$attrs=i.data.attrs||t,e.$listeners=r||t,n&&e.$options.props){Mt(!1);for(var f=e._props,l=e.$options._propKeys||[],p=0;p<l.length;p++){var d=l[p],v=e.$options.props;f[d]=qt(d,v,n,e)}Mt(!0),e.$options.propsData=n}r=r||t;var h=e.$options._parentListeners;e.$options._parentListeners=r,wn(e,r,h),c&&(e.$slots=Fe(o,i.context),e.$forceUpdate());An=!1}(n.componentInstance=e.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,On(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Tn.push(e)):En(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,Cn(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);On(e,"deactivated")}}(e,!0):e.$destroy())}},sn=Object.keys(an);function un(e,n,a,u,c){if(!r(e)){var f=a.$options._base;if(s(e)&&(e=f.extend(e)),"function"==typeof e){var l;if(r(e.cid)&&void 0===(e=function(t,e){if(o(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;if(o(t.loading)&&i(t.loadingComp))return t.loadingComp;var n=vn;if(!i(t.owners)){var a=t.owners=[n],u=!0,c=function(t){for(var e=0,n=a.length;e<n;e++)a[e].$forceUpdate();t&&(a.length=0)},f=L(function(n){t.resolved=hn(n,e),u?a.length=0:c(!0)}),l=L(function(e){lt("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),i(t.errorComp)&&(t.error=!0,c(!0))}),p=t(f,l);return s(p)&&(d(p)?r(t.resolved)&&p.then(f,l):d(p.component)&&(p.component.then(f,l),i(p.error)&&(t.errorComp=hn(p.error,e)),i(p.loading)&&(t.loadingComp=hn(p.loading,e),0===p.delay?t.loading=!0:setTimeout(function(){r(t.resolved)&&r(t.error)&&(t.loading=!0,c(!1))},p.delay||200)),i(p.timeout)&&setTimeout(function(){r(t.resolved)&&l("timeout ("+p.timeout+"ms)")},p.timeout))),u=!1,t.loading?t.loadingComp:t.resolved}t.owners.push(n)}(l=e,f)))return function(t,e,n,r,i){var o=St();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}(l,n,a,u,c);n=n||{},Kn(e),i(n.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var o=e.on||(e.on={}),a=o[r],s=e.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}(e.options,n);var p=function(t,e,n){var o=e.options.props;if(!r(o)){var a={},s=t.attrs,u=t.props;if(i(s)||i(u))for(var c in o){var f=O(c),l=c.toLowerCase();c!==l&&s&&w(s,l)&&pt('Prop "'+l+'" is passed to component '+vt(n||e)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+f+'" instead of "'+c+'".'),Ie(a,u,c,f,!0)||Ie(a,s,c,f,!1)}return a}}(n,e,c);if(o(e.options.functional))return function(e,n,r,o,a){var s=e.options,u={},c=s.props;if(i(c))for(var f in c)u[f]=qt(f,c,n||t);else i(r.attrs)&&on(u,r.attrs),i(r.props)&&on(u,r.props);var l=new nn(r,u,a,o,e),p=s.render.call(null,l._c,l);if(p instanceof xt)return rn(p,r,l.parent,s,l);if(Array.isArray(p)){for(var d=je(p)||[],v=new Array(d.length),h=0;h<d.length;h++)v[h]=rn(d[h],r,l.parent,s,l);return v}}(e,p,n,a,u);var v=n.on;if(n.on=n.nativeOn,o(e.options.abstract)){var h=n.slot;n={},h&&(n.slot=h)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<sn.length;n++){var r=sn[n],i=e[r],o=an[r];i===o||i&&i._merged||(e[r]=i?cn(o,i):o)}}(n);var m=e.options.name||c;return new xt("vue-component-"+e.cid+(m?"-"+m:""),n,void 0,void 0,void 0,a,{Ctor:e,propsData:p,listeners:v,tag:c,children:u},l)}lt("Invalid Component definition: "+String(e),a)}}function cn(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}var fn=1,ln=2;function pn(t,e,n,u,c,f){return(Array.isArray(n)||a(n))&&(c=u,u=n,n=void 0),o(f)&&(c=ln),function(t,e,n,u,c){if(i(n)&&i(n.__ob__))return lt("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),St();i(n)&&i(n.is)&&(e=n.is);if(!e)return St();i(n)&&i(n.key)&&!a(n.key)&&lt("Avoid using non-primitive value as key, use string/number value instead.",t);Array.isArray(u)&&"function"==typeof u[0]&&((n=n||{}).scopedSlots={default:u[0]},u.length=0);c===ln?u=je(u):c===fn&&(u=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(u));var f,l;if("string"==typeof e){var p;l=t.$vnode&&t.$vnode.ns||U.getTagNamespace(e),f=U.isReservedTag(e)?new xt(U.parsePlatformTagName(e),n,u,void 0,void 0,t):n&&n.pre||!i(p=Gt(t.$options,"components",e))?new xt(e,n,u,void 0,void 0,t):un(p,n,t,u,e)}else f=un(e,n,t,u);return Array.isArray(f)?f:i(f)?(i(l)&&function t(e,n,a){e.ns=n;"foreignObject"===e.tag&&(n=void 0,a=!0);if(i(e.children))for(var s=0,u=e.children.length;s<u;s++){var c=e.children[s];i(c.tag)&&(r(c.ns)||o(a)&&"svg"!==c.tag)&&t(c,n,a)}}(f,l),i(n)&&function(t){s(t.style)&&Oe(t.style);s(t.class)&&Oe(t.class)}(n),f):St()}(t,e,n,u,c)}var dn,vn=null;function hn(t,e){return(t.__esModule||ft&&"Module"===t[Symbol.toStringTag])&&(t=t.default),s(t)?e.extend(t):t}function mn(t){return t.isComment&&t.asyncFactory}function gn(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||mn(n)))return n}}function yn(t,e){dn.$on(t,e)}function bn(t,e){dn.$off(t,e)}function _n(t,e){var n=dn;return function r(){null!==e.apply(null,arguments)&&n.$off(t,r)}}function wn(t,e,n){dn=t,Te(e,n||{},yn,bn,_n,t),dn=void 0}var xn=null,An=!1;function Sn(t){var e=xn;return xn=t,function(){xn=e}}function Cn(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function En(t,e){if(e){if(t._directInactive=!1,Cn(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)En(t.$children[n]);On(t,"activated")}}function On(t,e){_t();var n=t.$options[e],r=e+" hook";if(n)for(var i=0,o=n.length;i<o;i++)ne(n[i],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),wt()}var kn=100,$n=[],Tn=[],Mn={},In={},jn=!1,Pn=!1,Nn=0,Fn=0,Ln=Date.now;function Rn(){var t,e;for(Fn=Ln(),Pn=!0,$n.sort(function(t,e){return t.id-e.id}),Nn=0;Nn<$n.length;Nn++)if((t=$n[Nn]).before&&t.before(),e=t.id,Mn[e]=null,t.run(),null!=Mn[e]&&(In[e]=(In[e]||0)+1,In[e]>kn)){lt("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=Tn.slice(),r=$n.slice();Nn=$n.length=Tn.length=0,Mn={},In={},jn=Pn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,En(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&On(r,"updated")}}(r),st&&U.devtools&&st.emit("flush")}J&&Ln()>document.createEvent("Event").timeStamp&&(Ln=function(){return performance.now()});var Bn=0,Dn=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Bn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ct,this.newDepIds=new ct,this.expression=e.toString(),"function"==typeof e?this.getter=e:(this.getter=function(t){if(!G.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=I,lt('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};Dn.prototype.get=function(){var t;_t(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;ee(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Oe(t),wt(),this.cleanupDeps()}return t},Dn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},Dn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Dn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Mn[e]){if(Mn[e]=!0,Pn){for(var n=$n.length-1;n>Nn&&$n[n].id>t.id;)n--;$n.splice(n+1,0,t)}else $n.push(t);if(!jn){if(jn=!0,!U.async)return void Rn();me(Rn)}}}(this)},Dn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||s(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){ee(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},Dn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Dn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},Dn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var Un={enumerable:!0,configurable:!0,get:I,set:I};function Vn(t,e,n){Un.get=function(){return this[e][n]},Un.set=function(t){this[e][n]=t},Object.defineProperty(t,n,Un)}function Wn(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[],o=!t.$parent;o||Mt(!1);var a=function(a){i.push(a);var s=qt(a,e,n,t),u=O(a);(y(u)||U.isReservedAttr(u))&&lt('"'+u+'" is a reserved attribute and cannot be used as component prop.',t),Pt(r,a,s,function(){o||An||lt("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)}),a in t||Vn(t,"_props",a)};for(var s in e)a(s);Mt(!0)}(t,e.props),e.methods&&function(t,e){var n=t.$options.props;for(var r in e)"function"!=typeof e[r]&&lt('Method "'+r+'" has type "'+typeof e[r]+'" in the component definition. Did you reference the function correctly?',t),n&&w(n,r)&&lt('Method "'+r+'" has already been defined as a prop.',t),r in t&&W(r)&&lt('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[r]="function"!=typeof e[r]?I:k(e[r],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;f(e=t._data="function"==typeof e?function(t,e){_t();try{return t.call(e,e)}catch(t){return ee(t,e,"data()"),{}}finally{wt()}}(e,t):e||{})||(e={},lt("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));var n=Object.keys(e),r=t.$options.props,i=t.$options.methods,o=n.length;for(;o--;){var a=n[o];i&&w(i,a)&&lt('Method "'+a+'" has already been defined as a data property.',t),r&&w(r,a)?lt('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',t):W(a)||Vn(t,"_data",a)}jt(e,!0)}(t):jt(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=at();for(var i in e){var o=e[i],a="function"==typeof o?o:o.get;null==a&&lt('Getter is missing for computed property "'+i+'".',t),r||(n[i]=new Dn(t,a||I,I,Hn)),i in t?i in t.$data?lt('The computed property "'+i+'" is already defined in data.',t):t.$options.props&&i in t.$options.props&&lt('The computed property "'+i+'" is already defined as a prop.',t):zn(t,i,o)}}(t,e.computed),e.watch&&e.watch!==rt&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)Jn(t,n,r[i]);else Jn(t,n,r)}}(t,e.watch)}var Hn={lazy:!0};function zn(t,e,n){var r=!at();"function"==typeof n?(Un.get=r?Gn(e):qn(n),Un.set=I):(Un.get=n.get?r&&!1!==n.cache?Gn(e):qn(n.get):I,Un.set=n.set||I),Un.set===I&&(Un.set=function(){lt('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,Un)}function Gn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),yt.target&&e.depend(),e.value}}function qn(t){return function(){return t.call(this,this)}}function Jn(t,e,n,r){return f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var Yn=0;function Kn(t){var e=t.options;if(t.super){var n=Kn(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}(t);r&&T(t.extendOptions,r),(e=t.options=zt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function Xn(t){this instanceof Xn||lt("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function Zn(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name;o&&Wt(o);var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=zt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Vn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)zn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,B.forEach(function(t){a[t]=n[t]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=T({},a.options),i[r]=a,a}}function Qn(t){return t&&(t.Ctor.options.name||t.tag)}function tr(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!l(t)&&t.test(e)}function er(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=Qn(a.componentOptions);s&&!e(s)&&nr(n,o,r,i)}}}function nr(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,b(n,e)}!function(e){e.prototype._init=function(e){var n,r,i=this;i._uid=Yn++,U.performance&&ae&&(n="vue-perf-start:"+i._uid,r="vue-perf-end:"+i._uid,ae(n)),i._isVue=!0,e&&e._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(i,e):i.$options=zt(Kn(i.constructor),e||{},i),ge(i),i._self=i,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(i),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&wn(t,e)}(i),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,r=e.$vnode=n._parentVnode,i=r&&r.context;e.$slots=Fe(n._renderChildren,i),e.$scopedSlots=t,e._c=function(t,n,r,i){return pn(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return pn(e,t,n,r,i,!0)};var o=r&&r.data;Pt(e,"$attrs",o&&o.attrs||t,function(){!An&&lt("$attrs is readonly.",e)},!0),Pt(e,"$listeners",n._parentListeners||t,function(){!An&&lt("$listeners is readonly.",e)},!0)}(i),On(i,"beforeCreate"),function(t){var e=Ne(t.$options.inject,t);e&&(Mt(!1),Object.keys(e).forEach(function(n){Pt(t,n,e[n],function(){lt('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)})}),Mt(!0))}(i),Wn(i),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(i),On(i,"created"),U.performance&&ae&&(i._name=vt(i,!1),ae(r),se("vue "+i._name+" init",n,r)),i.$options.el&&i.$mount(i.$options.el)}}(Xn),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){lt("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){lt("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Nt,t.prototype.$delete=Ft,t.prototype.$watch=function(t,e,n){if(f(e))return Jn(this,t,e,n);(n=n||{}).user=!0;var r=new Dn(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){ee(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(Xn),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)r.$on(t[i],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)n.$off(t[r],e);return n}var o,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((o=a[s])===e||o.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&pt('Event "'+n+'" is emitted in component '+vt(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+O(t)+'" instead of "'+t+'".');var r=e._events[t];if(r){r=r.length>1?$(r):r;for(var i=$(arguments,1),o='event handler for "'+t+'"',a=0,s=r.length;a<s;a++)ne(r[a],e,i,e,o)}return e}}(Xn),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,o=Sn(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){On(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||b(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),On(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(Xn),function(t){en(t.prototype),t.prototype.$nextTick=function(t){return me(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,i=n._parentVnode;i&&(e.$scopedSlots=Re(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{vn=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){if(ee(n,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,n)}catch(n){ee(n,e,"renderError"),t=e._vnode}else t=e._vnode}finally{vn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof xt||(Array.isArray(t)&&lt("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=St()),t.parent=i,t}}(Xn);var rr=[String,RegExp,Array],ir={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:rr,exclude:rr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)nr(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){er(t,function(t){return tr(e,t)})}),this.$watch("exclude",function(e){er(t,function(t){return!tr(e,t)})})},render:function(){var t=this.$slots.default,e=gn(t),n=e&&e.componentOptions;if(n){var r=Qn(n),i=this.include,o=this.exclude;if(i&&(!r||!tr(i,r))||o&&r&&tr(o,r))return e;var a=this.cache,s=this.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[u]?(e.componentInstance=a[u].componentInstance,b(s,u),s.push(u)):(a[u]=e,s.push(u),this.max&&s.length>parseInt(this.max)&&nr(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return U},set:function(){lt("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:lt,extend:T,mergeOptions:zt,defineReactive:Pt},t.set=Nt,t.delete=Ft,t.nextTick=me,t.observable=function(t){return jt(t),t},t.options=Object.create(null),B.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,T(t.options.components,ir),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=$(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=zt(this.options,t),this}}(t),Zn(t),function(t){B.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&Wt(t),"component"===e&&f(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(Xn),Object.defineProperty(Xn.prototype,"$isServer",{get:at}),Object.defineProperty(Xn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Xn,"FunctionalRenderContext",{value:nn}),Xn.version="2.6.7";var or=m("style,class"),ar=m("input,textarea,option,select,progress"),sr=function(t,e,n){return"value"===n&&ar(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},ur=m("contenteditable,draggable,spellcheck"),cr=m("events,caret,typing,plaintext-only"),fr=function(t,e){return hr(e)||"false"===e?"false":"contenteditable"===t&&cr(e)?e:"true"},lr=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),pr="http://www.w3.org/1999/xlink",dr=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},vr=function(t){return dr(t)?t.slice(6,t.length):""},hr=function(t){return null==t||!1===t};function mr(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=gr(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=gr(e,n.data));return function(t,e){if(i(t)||i(e))return yr(t,br(e));return""}(e.staticClass,e.class)}function gr(t,e){return{staticClass:yr(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function yr(t,e){return t?e?t+" "+e:t:e||""}function br(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=br(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):s(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var _r={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},wr=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),xr=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ar=function(t){return wr(t)||xr(t)};function Sr(t){return xr(t)?"svg":"math"===t?"math":void 0}var Cr=Object.create(null),Er=m("text,number,password,search,email,tel,url");function Or(t){if("string"==typeof t){var e=document.querySelector(t);return e||(lt("Cannot find element: "+t),document.createElement("div"))}return t}var kr=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(_r[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),$r={create:function(t,e){Tr(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Tr(t,!0),Tr(e))},destroy:function(t){Tr(t,!0)}};function Tr(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?b(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var Mr=new xt("",{},[]),Ir=["create","activate","update","remove","destroy"];function jr(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&i(t.data)===i(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||Er(r)&&Er(o)}(t,e)||o(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&r(e.asyncFactory.error))}function Pr(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var Nr={create:Fr,update:Fr,destroy:function(t){Fr(t,Mr)}};function Fr(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,o=t===Mr,a=e===Mr,s=Rr(t.data.directives,t.context),u=Rr(e.data.directives,e.context),c=[],f=[];for(n in u)r=s[n],i=u[n],r?(i.oldValue=r.value,i.oldArg=r.arg,Dr(i,"update",e,t),i.def&&i.def.componentUpdated&&f.push(i)):(Dr(i,"bind",e,t),i.def&&i.def.inserted&&c.push(i));if(c.length){var l=function(){for(var n=0;n<c.length;n++)Dr(c[n],"inserted",e,t)};o?Me(e,"insert",l):l()}f.length&&Me(e,"postpatch",function(){for(var n=0;n<f.length;n++)Dr(f[n],"componentUpdated",e,t)});if(!o)for(n in s)u[n]||Dr(s[n],"unbind",t,t,a)}(t,e)}var Lr=Object.create(null);function Rr(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=Lr),i[Br(r)]=r,r.def=Gt(e.$options,"directives",r.name,!0);return i}function Br(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Dr(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){ee(r,n.context,"directive "+t.name+" "+e+" hook")}}var Ur=[$r,Nr];function Vr(t,e){var n=e.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||r(t.data.attrs)&&r(e.data.attrs))){var o,a,s=e.elm,u=t.data.attrs||{},c=e.data.attrs||{};for(o in i(c.__ob__)&&(c=e.data.attrs=T({},c)),c)a=c[o],u[o]!==a&&Wr(s,o,a);for(o in(Z||tt)&&c.value!==u.value&&Wr(s,"value",c.value),u)r(c[o])&&(dr(o)?s.removeAttributeNS(pr,vr(o)):ur(o)||s.removeAttribute(o))}}function Wr(t,e,n){t.tagName.indexOf("-")>-1?Hr(t,e,n):lr(e)?hr(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):ur(e)?t.setAttribute(e,fr(e,n)):dr(e)?hr(n)?t.removeAttributeNS(pr,vr(e)):t.setAttributeNS(pr,e,n):Hr(t,e,n)}function Hr(t,e,n){if(hr(n))t.removeAttribute(e);else{if(Z&&!Q&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var r=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",r)};t.addEventListener("input",r),t.__ieph=!0}t.setAttribute(e,n)}}var zr={create:Vr,update:Vr};function Gr(t,e){var n=e.elm,o=e.data,a=t.data;if(!(r(o.staticClass)&&r(o.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=mr(e),u=n._transitionClasses;i(u)&&(s=yr(s,br(u))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var qr,Jr,Yr,Kr,Xr,Zr,Qr,ti={create:Gr,update:Gr},ei=/[\w).+\-_$\]]/;function ni(t){var e,n,r,i,o,a=!1,s=!1,u=!1,c=!1,f=0,l=0,p=0,d=0;for(r=0;r<t.length;r++)if(n=e,e=t.charCodeAt(r),a)39===e&&92!==n&&(a=!1);else if(s)34===e&&92!==n&&(s=!1);else if(u)96===e&&92!==n&&(u=!1);else if(c)47===e&&92!==n&&(c=!1);else if(124!==e||124===t.charCodeAt(r+1)||124===t.charCodeAt(r-1)||f||l||p){switch(e){case 34:s=!0;break;case 39:a=!0;break;case 96:u=!0;break;case 40:p++;break;case 41:p--;break;case 91:l++;break;case 93:l--;break;case 123:f++;break;case 125:f--}if(47===e){for(var v=r-1,h=void 0;v>=0&&" "===(h=t.charAt(v));v--);h&&ei.test(h)||(c=!0)}}else void 0===i?(d=r+1,i=t.slice(0,r).trim()):m();function m(){(o||(o=[])).push(t.slice(d,r).trim()),d=r+1}if(void 0===i?i=t.slice(0,r).trim():0!==d&&m(),o)for(r=0;r<o.length;r++)i=ri(i,o[r]);return i}function ri(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var r=e.slice(0,n),i=e.slice(n+1);return'_f("'+r+'")('+t+(")"!==i?","+i:i)}function ii(t,e){console.error("[Vue compiler]: "+t)}function oi(t,e){return t?t.map(function(t){return t[e]}).filter(function(t){return t}):[]}function ai(t,e,n,r,i){(t.props||(t.props=[])).push(mi({name:e,value:n,dynamic:i},r)),t.plain=!1}function si(t,e,n,r,i){(i?t.dynamicAttrs||(t.dynamicAttrs=[]):t.attrs||(t.attrs=[])).push(mi({name:e,value:n,dynamic:i},r)),t.plain=!1}function ui(t,e,n,r){t.attrsMap[e]=n,t.attrsList.push(mi({name:e,value:n},r))}function ci(t,e,n,r,i,o,a,s){(t.directives||(t.directives=[])).push(mi({name:e,rawName:n,value:r,arg:i,isDynamicArg:o,modifiers:a},s)),t.plain=!1}function fi(t,e,n){return n?"_p("+e+',"'+t+'")':t+e}function li(e,n,r,i,o,a,s,u){var c;i=i||t,a&&i.prevent&&i.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event.",s),i.right?u?n="("+n+")==='click'?'contextmenu':("+n+")":"click"===n&&(n="contextmenu",delete i.right):i.middle&&(u?n="("+n+")==='click'?'mouseup':("+n+")":"click"===n&&(n="mouseup")),i.capture&&(delete i.capture,n=fi("!",n,u)),i.once&&(delete i.once,n=fi("~",n,u)),i.passive&&(delete i.passive,n=fi("&",n,u)),i.native?(delete i.native,c=e.nativeEvents||(e.nativeEvents={})):c=e.events||(e.events={});var f=mi({value:r.trim(),dynamic:u},s);i!==t&&(f.modifiers=i);var l=c[n];Array.isArray(l)?o?l.unshift(f):l.push(f):c[n]=l?o?[f,l]:[l,f]:f,e.plain=!1}function pi(t,e){return t.rawAttrsMap[":"+e]||t.rawAttrsMap["v-bind:"+e]||t.rawAttrsMap[e]}function di(t,e,n){var r=vi(t,":"+e)||vi(t,"v-bind:"+e);if(null!=r)return ni(r);if(!1!==n){var i=vi(t,e);if(null!=i)return JSON.stringify(i)}}function vi(t,e,n){var r;if(null!=(r=t.attrsMap[e]))for(var i=t.attrsList,o=0,a=i.length;o<a;o++)if(i[o].name===e){i.splice(o,1);break}return n&&delete t.attrsMap[e],r}function hi(t,e){for(var n=t.attrsList,r=0,i=n.length;r<i;r++){var o=n[r];if(e.test(o.name))return n.splice(r,1),o}}function mi(t,e){return e&&(null!=e.start&&(t.start=e.start),null!=e.end&&(t.end=e.end)),t}function gi(t,e,n){var r=n||{},i=r.number,o="$$v";r.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(o="_n("+o+")");var a=yi(e,o);t.model={value:"("+e+")",expression:JSON.stringify(e),callback:"function ($$v) {"+a+"}"}}function yi(t,e){var n=function(t){if(t=t.trim(),qr=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<qr-1)return(Kr=t.lastIndexOf("."))>-1?{exp:t.slice(0,Kr),key:'"'+t.slice(Kr+1)+'"'}:{exp:t,key:null};Jr=t,Kr=Xr=Zr=0;for(;!_i();)wi(Yr=bi())?Ai(Yr):91===Yr&&xi(Yr);return{exp:t.slice(0,Xr),key:t.slice(Xr+1,Zr)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function bi(){return Jr.charCodeAt(++Kr)}function _i(){return Kr>=qr}function wi(t){return 34===t||39===t}function xi(t){var e=1;for(Xr=Kr;!_i();)if(wi(t=bi()))Ai(t);else if(91===t&&e++,93===t&&e--,0===e){Zr=Kr;break}}function Ai(t){for(var e=t;!_i()&&(t=bi())!==e;);}var Si,Ci="__r",Ei="__c";function Oi(t,e,n){var r=Si;return function i(){null!==e.apply(null,arguments)&&Ti(t,i,n,r)}}var ki=ue&&!(nt&&Number(nt[1])<=53);function $i(t,e,n,r){if(ki){var i=Fn,o=e;e=o._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=i||0===t.timeStamp||t.target.ownerDocument!==document)return o.apply(this,arguments)}}Si.addEventListener(t,e,it?{capture:n,passive:r}:n)}function Ti(t,e,n,r){(r||Si).removeEventListener(t,e._wrapper||e,n)}function Mi(t,e){if(!r(t.data.on)||!r(e.data.on)){var n=e.data.on||{},o=t.data.on||{};Si=e.elm,function(t){if(i(t[Ci])){var e=Z?"change":"input";t[e]=[].concat(t[Ci],t[e]||[]),delete t[Ci]}i(t[Ei])&&(t.change=[].concat(t[Ei],t.change||[]),delete t[Ei])}(n),Te(n,o,$i,Ti,Oi,e.context),Si=void 0}}var Ii,ji={create:Mi,update:Mi};function Pi(t,e){if(!r(t.data.domProps)||!r(e.data.domProps)){var n,o,a=e.elm,s=t.data.domProps||{},u=e.data.domProps||{};for(n in i(u.__ob__)&&(u=e.data.domProps=T({},u)),s)r(u[n])&&(a[n]="");for(n in u){if(o=u[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),o===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=o;var c=r(o)?"":String(o);Ni(a,c)&&(a.value=c)}else if("innerHTML"===n&&xr(a.tagName)&&r(a.innerHTML)){(Ii=Ii||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var f=Ii.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;f.firstChild;)a.appendChild(f.firstChild)}else if(o!==s[n])try{a[n]=o}catch(t){}}}}function Ni(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.number)return h(n)!==h(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var Fi={create:Pi,update:Pi},Li=x(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function Ri(t){var e=Bi(t.style);return t.staticStyle?T(t.staticStyle,e):e}function Bi(t){return Array.isArray(t)?M(t):"string"==typeof t?Li(t):t}var Di,Ui=/^--/,Vi=/\s*!important$/,Wi=function(t,e,n){if(Ui.test(e))t.style.setProperty(e,n);else if(Vi.test(n))t.style.setProperty(O(e),n.replace(Vi,""),"important");else{var r=zi(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},Hi=["Webkit","Moz","ms"],zi=x(function(t){if(Di=Di||document.createElement("div").style,"filter"!==(t=S(t))&&t in Di)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Hi.length;n++){var r=Hi[n]+e;if(r in Di)return r}});function Gi(t,e){var n=e.data,o=t.data;if(!(r(n.staticStyle)&&r(n.style)&&r(o.staticStyle)&&r(o.style))){var a,s,u=e.elm,c=o.staticStyle,f=o.normalizedStyle||o.style||{},l=c||f,p=Bi(e.data.style)||{};e.data.normalizedStyle=i(p.__ob__)?T({},p):p;var d=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=Ri(i.data))&&T(r,n);(n=Ri(t.data))&&T(r,n);for(var o=t;o=o.parent;)o.data&&(n=Ri(o.data))&&T(r,n);return r}(e,!0);for(s in l)r(d[s])&&Wi(u,s,"");for(s in d)(a=d[s])!==l[s]&&Wi(u,s,null==a?"":a)}}var qi={create:Gi,update:Gi},Ji=/\s+/;function Yi(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Ji).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Ki(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Ji).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Xi(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&T(e,Zi(t.name||"v")),T(e,t),e}return"string"==typeof t?Zi(t):void 0}}var Zi=x(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),Qi=J&&!Q,to="transition",eo="animation",no="transition",ro="transitionend",io="animation",oo="animationend";Qi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(no="WebkitTransition",ro="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(io="WebkitAnimation",oo="webkitAnimationEnd"));var ao=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function so(t){ao(function(){ao(t)})}function uo(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Yi(t,e))}function co(t,e){t._transitionClasses&&b(t._transitionClasses,e),Ki(t,e)}function fo(t,e,n){var r=po(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===to?ro:oo,u=0,c=function(){t.removeEventListener(s,f),n()},f=function(e){e.target===t&&++u>=a&&c()};setTimeout(function(){u<a&&c()},o+1),t.addEventListener(s,f)}var lo=/\b(transform|all)(,|$)/;function po(t,e){var n,r=window.getComputedStyle(t),i=(r[no+"Delay"]||"").split(", "),o=(r[no+"Duration"]||"").split(", "),a=vo(i,o),s=(r[io+"Delay"]||"").split(", "),u=(r[io+"Duration"]||"").split(", "),c=vo(s,u),f=0,l=0;return e===to?a>0&&(n=to,f=a,l=o.length):e===eo?c>0&&(n=eo,f=c,l=u.length):l=(n=(f=Math.max(a,c))>0?a>c?to:eo:null)?n===to?o.length:u.length:0,{type:n,timeout:f,propCount:l,hasTransform:n===to&&lo.test(r[no+"Property"])}}function vo(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return ho(e)+ho(t[n])}))}function ho(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function mo(t,e){var n=t.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var o=Xi(t.data.transition);if(!r(o)&&!i(n._enterCb)&&1===n.nodeType){for(var a=o.css,u=o.type,c=o.enterClass,f=o.enterToClass,l=o.enterActiveClass,p=o.appearClass,d=o.appearToClass,v=o.appearActiveClass,m=o.beforeEnter,g=o.enter,y=o.afterEnter,b=o.enterCancelled,_=o.beforeAppear,w=o.appear,x=o.afterAppear,A=o.appearCancelled,S=o.duration,C=xn,E=xn.$vnode;E&&E.parent;)C=(E=E.parent).context;var O=!C._isMounted||!t.isRootInsert;if(!O||w||""===w){var k=O&&p?p:c,$=O&&v?v:l,T=O&&d?d:f,M=O&&_||m,I=O&&"function"==typeof w?w:g,j=O&&x||y,P=O&&A||b,N=h(s(S)?S.enter:S);null!=N&&yo(N,"enter",t);var F=!1!==a&&!Q,R=_o(I),B=n._enterCb=L(function(){F&&(co(n,T),co(n,$)),B.cancelled?(F&&co(n,k),P&&P(n)):j&&j(n),n._enterCb=null});t.data.show||Me(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,B)}),M&&M(n),F&&(uo(n,k),uo(n,$),so(function(){co(n,k),B.cancelled||(uo(n,T),R||(bo(N)?setTimeout(B,N):fo(n,u,B)))})),t.data.show&&(e&&e(),I&&I(n,B)),F||R||B()}}}function go(t,e){var n=t.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var o=Xi(t.data.transition);if(r(o)||1!==n.nodeType)return e();if(!i(n._leaveCb)){var a=o.css,u=o.type,c=o.leaveClass,f=o.leaveToClass,l=o.leaveActiveClass,p=o.beforeLeave,d=o.leave,v=o.afterLeave,m=o.leaveCancelled,g=o.delayLeave,y=o.duration,b=!1!==a&&!Q,_=_o(d),w=h(s(y)?y.leave:y);i(w)&&yo(w,"leave",t);var x=n._leaveCb=L(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),b&&(co(n,f),co(n,l)),x.cancelled?(b&&co(n,c),m&&m(n)):(e(),v&&v(n)),n._leaveCb=null});g?g(A):A()}function A(){x.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),p&&p(n),b&&(uo(n,c),uo(n,l),so(function(){co(n,c),x.cancelled||(uo(n,f),_||(bo(w)?setTimeout(x,w):fo(n,u,x)))})),d&&d(n,x),b||_||x())}}function yo(t,e,n){"number"!=typeof t?lt("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&lt("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function bo(t){return"number"==typeof t&&!isNaN(t)}function _o(t){if(r(t))return!1;var e=t.fns;return i(e)?_o(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function wo(t,e){!0!==e.data.show&&mo(e)}var xo=function(t){var e,n,s={},u=t.modules,c=t.nodeOps;for(e=0;e<Ir.length;++e)for(s[Ir[e]]=[],n=0;n<u.length;++n)i(u[n][Ir[e]])&&s[Ir[e]].push(u[n][Ir[e]]);function f(t){var e=c.parentNode(t);i(e)&&c.removeChild(e,t)}function p(t,e){return!e&&!t.ns&&!(U.ignoredElements.length&&U.ignoredElements.some(function(e){return l(e)?e.test(t.tag):e===t.tag}))&&U.isUnknownElement(t.tag)}var d=0;function v(t,e,n,r,a,u,f){if(i(t.elm)&&i(u)&&(t=u[f]=Et(t)),t.isRootInsert=!a,!function(t,e,n,r){var a=t.data;if(i(a)){var u=i(t.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(t,!1),i(t.componentInstance))return h(t,e),g(n,t.elm,r),o(u)&&function(t,e,n,r){for(var o,a=t;a.componentInstance;)if(a=a.componentInstance._vnode,i(o=a.data)&&i(o=o.transition)){for(o=0;o<s.activate.length;++o)s.activate[o](Mr,a);e.push(a);break}g(n,t.elm,r)}(t,e,n,r),!0}}(t,e,n,r)){var l=t.data,v=t.children,m=t.tag;i(m)?(l&&l.pre&&d++,p(t,d)&&lt("Unknown custom element: <"+m+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context),t.elm=t.ns?c.createElementNS(t.ns,m):c.createElement(m,t),w(t),y(t,v,e),i(l)&&_(t,e),g(n,t.elm,r),l&&l.pre&&d--):o(t.isComment)?(t.elm=c.createComment(t.text),g(n,t.elm,r)):(t.elm=c.createTextNode(t.text),g(n,t.elm,r))}}function h(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,b(t)?(_(t,e),w(t)):(Tr(t),e.push(t))}function g(t,e,n){i(t)&&(i(n)?c.parentNode(n)===t&&c.insertBefore(t,e,n):c.appendChild(t,e))}function y(t,e,n){if(Array.isArray(e)){E(e);for(var r=0;r<e.length;++r)v(e[r],n,t.elm,null,!0,e,r)}else a(t.text)&&c.appendChild(t.elm,c.createTextNode(String(t.text)))}function b(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function _(t,n){for(var r=0;r<s.create.length;++r)s.create[r](Mr,t);i(e=t.data.hook)&&(i(e.create)&&e.create(Mr,t),i(e.insert)&&n.push(t))}function w(t){var e;if(i(e=t.fnScopeId))c.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e),n=n.parent;i(e=xn)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e)}function x(t,e,n,r,i,o){for(;r<=i;++r)v(n[r],o,t,e,!1,n,r)}function A(t){var e,n,r=t.data;if(i(r))for(i(e=r.hook)&&i(e=e.destroy)&&e(t),e=0;e<s.destroy.length;++e)s.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)A(t.children[n])}function S(t,e,n,r){for(;n<=r;++n){var o=e[n];i(o)&&(i(o.tag)?(C(o),A(o)):f(o.elm))}}function C(t,e){if(i(e)||i(t.data)){var n,r=s.remove.length+1;for(i(e)?e.listeners+=r:e=function(t,e){function n(){0==--n.listeners&&f(t)}return n.listeners=e,n}(t.elm,r),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&C(n,e),n=0;n<s.remove.length;++n)s.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else f(t.elm)}function E(t){for(var e={},n=0;n<t.length;n++){var r=t[n],o=r.key;i(o)&&(e[o]?lt("Duplicate keys detected: '"+o+"'. This may cause an update error.",r.context):e[o]=!0)}}function O(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&jr(t,a))return o}}function k(t,e,n,a,u,f){if(t!==e){i(e.elm)&&i(a)&&(e=a[u]=Et(e));var l=e.elm=t.elm;if(o(t.isAsyncPlaceholder))i(e.asyncFactory.resolved)?I(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(o(e.isStatic)&&o(t.isStatic)&&e.key===t.key&&(o(e.isCloned)||o(e.isOnce)))e.componentInstance=t.componentInstance;else{var p,d=e.data;i(d)&&i(p=d.hook)&&i(p=p.prepatch)&&p(t,e);var h=t.children,m=e.children;if(i(d)&&b(e)){for(p=0;p<s.update.length;++p)s.update[p](t,e);i(p=d.hook)&&i(p=p.update)&&p(t,e)}r(e.text)?i(h)&&i(m)?h!==m&&function(t,e,n,o,a){var s,u,f,l=0,p=0,d=e.length-1,h=e[0],m=e[d],g=n.length-1,y=n[0],b=n[g],_=!a;for(E(n);l<=d&&p<=g;)r(h)?h=e[++l]:r(m)?m=e[--d]:jr(h,y)?(k(h,y,o,n,p),h=e[++l],y=n[++p]):jr(m,b)?(k(m,b,o,n,g),m=e[--d],b=n[--g]):jr(h,b)?(k(h,b,o,n,g),_&&c.insertBefore(t,h.elm,c.nextSibling(m.elm)),h=e[++l],b=n[--g]):jr(m,y)?(k(m,y,o,n,p),_&&c.insertBefore(t,m.elm,h.elm),m=e[--d],y=n[++p]):(r(s)&&(s=Pr(e,l,d)),r(u=i(y.key)?s[y.key]:O(y,e,l,d))?v(y,o,t,h.elm,!1,n,p):jr(f=e[u],y)?(k(f,y,o,n,p),e[u]=void 0,_&&c.insertBefore(t,f.elm,h.elm)):v(y,o,t,h.elm,!1,n,p),y=n[++p]);l>d?x(t,r(n[g+1])?null:n[g+1].elm,n,p,g,o):p>g&&S(0,e,l,d)}(l,h,m,n,f):i(m)?(E(m),i(t.text)&&c.setTextContent(l,""),x(l,null,m,0,m.length-1,n)):i(h)?S(0,h,0,h.length-1):i(t.text)&&c.setTextContent(l,""):t.text!==e.text&&c.setTextContent(l,e.text),i(d)&&i(p=d.hook)&&i(p=p.postpatch)&&p(t,e)}}}function $(t,e,n){if(o(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=!1,M=m("attrs,class,staticClass,staticStyle,key");function I(t,e,n,r){var a,s=e.tag,u=e.data,c=e.children;if(r=r||u&&u.pre,e.elm=t,o(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(!function(t,e,n){return i(e.tag)?0===e.tag.indexOf("vue-component")||!p(e,n)&&e.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(e.isComment?8:3)}(t,e,r))return!1;if(i(u)&&(i(a=u.hook)&&i(a=a.init)&&a(e,!0),i(a=e.componentInstance)))return h(e,n),!0;if(i(s)){if(i(c))if(t.hasChildNodes())if(i(a=u)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==t.innerHTML)return"undefined"==typeof console||T||(T=!0,console.warn("Parent: ",t),console.warn("server innerHTML: ",a),console.warn("client innerHTML: ",t.innerHTML)),!1}else{for(var f=!0,l=t.firstChild,d=0;d<c.length;d++){if(!l||!I(l,c[d],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return"undefined"==typeof console||T||(T=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",t.childNodes,c)),!1}else y(e,c,n);if(i(u)){var v=!1;for(var m in u)if(!M(m)){v=!0,_(e,n);break}!v&&u.class&&Oe(u.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,a){if(!r(e)){var u,f=!1,l=[];if(r(t))f=!0,v(e,l);else{var p=i(t.nodeType);if(!p&&jr(t,e))k(t,e,l,null,null,a);else{if(p){if(1===t.nodeType&&t.hasAttribute(R)&&(t.removeAttribute(R),n=!0),o(n)){if(I(t,e,l))return $(e,l,!0),t;lt("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}u=t,t=new xt(c.tagName(u).toLowerCase(),{},[],void 0,u)}var d=t.elm,h=c.parentNode(d);if(v(e,l,d._leaveCb?null:h,c.nextSibling(d)),i(e.parent))for(var m=e.parent,g=b(e);m;){for(var y=0;y<s.destroy.length;++y)s.destroy[y](m);if(m.elm=e.elm,g){for(var _=0;_<s.create.length;++_)s.create[_](Mr,m);var w=m.data.hook.insert;if(w.merged)for(var x=1;x<w.fns.length;x++)w.fns[x]()}else Tr(m);m=m.parent}i(h)?S(0,[t],0,0):i(t.tag)&&A(t)}}return $(e,l,f),e.elm}i(t)&&A(t)}}({nodeOps:kr,modules:[zr,ti,ji,Fi,qi,J?{create:wo,activate:wo,remove:function(t,e){!0!==t.data.show?go(t,e):e()}}:{}].concat(Ur)});Q&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&To(t,"input")});var Ao={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Me(n,"postpatch",function(){Ao.componentUpdated(t,e,n)}):So(t,e,n.context),t._vOptions=[].map.call(t.options,Oo)):("textarea"===n.tag||Er(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",ko),t.addEventListener("compositionend",$o),t.addEventListener("change",$o),Q&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){So(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Oo);if(i.some(function(t,e){return!N(t,r[e])}))(t.multiple?e.value.some(function(t){return Eo(t,i)}):e.value!==e.oldValue&&Eo(e.value,i))&&To(t,"change")}}};function So(t,e,n){Co(t,e,n),(Z||tt)&&setTimeout(function(){Co(t,e,n)},0)}function Co(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,u=t.options.length;s<u;s++)if(a=t.options[s],i)o=F(r,Oo(a))>-1,a.selected!==o&&(a.selected=o);else if(N(Oo(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}else lt('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function Eo(t,e){return e.every(function(e){return!N(e,t)})}function Oo(t){return"_value"in t?t._value:t.value}function ko(t){t.target.composing=!0}function $o(t){t.target.composing&&(t.target.composing=!1,To(t.target,"input"))}function To(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Mo(t){return!t.componentInstance||t.data&&t.data.transition?t:Mo(t.componentInstance._vnode)}var Io={model:Ao,show:{bind:function(t,e,n){var r=e.value,i=(n=Mo(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,mo(n,function(){t.style.display=o})):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Mo(n)).data&&n.data.transition?(n.data.show=!0,r?mo(n,function(){t.style.display=t.__vOriginalDisplay}):go(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},jo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Po(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Po(gn(e.children)):t}function No(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[S(o)]=i[o];return e}function Fo(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var Lo=function(t){return t.tag||mn(t)},Ro=function(t){return"show"===t.name},Bo={name:"transition",props:jo,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(Lo)).length){n.length>1&&lt("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&lt("invalid <transition> mode: "+r,this.$parent);var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var o=Po(i);if(!o)return i;if(this._leaving)return Fo(t,i);var s="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?s+"comment":s+o.tag:a(o.key)?0===String(o.key).indexOf(s)?o.key:s+o.key:o.key;var u=(o.data||(o.data={})).transition=No(this),c=this._vnode,f=Po(c);if(o.data.directives&&o.data.directives.some(Ro)&&(o.data.show=!0),f&&f.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(o,f)&&!mn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=T({},u);if("out-in"===r)return this._leaving=!0,Me(l,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),Fo(t,i);if("in-out"===r){if(mn(o))return c;var p,d=function(){p()};Me(u,"afterEnter",d),Me(u,"enterCancelled",d),Me(l,"delayLeave",function(t){p=t})}}return i}}},Do=T({tag:String,moveClass:String},jo);function Uo(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function Vo(t){t.data.newPos=t.elm.getBoundingClientRect()}function Wo(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete Do.mode;var Ho={Transition:Bo,TransitionGroup:{props:Do,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var i=Sn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,i(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=No(this),s=0;s<i.length;s++){var u=i[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))o.push(u),n[u.key]=u,(u.data||(u.data={})).transition=a;else{var c=u.componentOptions,f=c?c.Ctor.options.name||c.tag||"":u.tag;lt("<transition-group> children must be keyed: <"+f+">")}}if(r){for(var l=[],p=[],d=0;d<r.length;d++){var v=r[d];v.data.transition=a,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?l.push(v):p.push(v)}this.kept=t(e,null,l),this.removed=p}return t(e,null,o)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Uo),t.forEach(Vo),t.forEach(Wo),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;uo(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ro,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ro,t),n._moveCb=null,co(n,e))})}}))},methods:{hasMove:function(t,e){if(!Qi)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){Ki(n,t)}),Yi(n,e),n.style.display="none",this.$el.appendChild(n);var r=po(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};Xn.config.mustUseProp=sr,Xn.config.isReservedTag=Ar,Xn.config.isReservedAttr=or,Xn.config.getTagNamespace=Sr,Xn.config.isUnknownElement=function(t){if(!J)return!0;if(Ar(t))return!1;if(t=t.toLowerCase(),null!=Cr[t])return Cr[t];var e=document.createElement(t);return t.indexOf("-")>-1?Cr[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Cr[t]=/HTMLUnknownElement/.test(e.toString())},T(Xn.options.directives,Io),T(Xn.options.components,Ho),Xn.prototype.__patch__=J?xo:I,Xn.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=St,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?lt("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):lt("Failed to mount component: template or render function not defined.",t)),On(t,"beforeMount"),r=U.performance&&ae?function(){var e=t._name,r=t._uid,i="vue-perf-start:"+r,o="vue-perf-end:"+r;ae(i);var a=t._render();ae(o),se("vue "+e+" render",i,o),ae(i),t._update(a,n),ae(o),se("vue "+e+" patch",i,o)}:function(){t._update(t._render(),n)},new Dn(t,r,I,{before:function(){t._isMounted&&!t._isDestroyed&&On(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,On(t,"mounted")),t}(this,t=t&&J?Or(t):void 0,e)},J&&setTimeout(function(){U.devtools&&(st?st.emit("init",Xn):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==U.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var zo=/\{\{((?:.|\r?\n)+?)\}\}/g,Go=/[-.*+?^${}()|[\]\/\\]/g,qo=x(function(t){var e=t[0].replace(Go,"\\$&"),n=t[1].replace(Go,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")});function Jo(t,e){var n=e?qo(e):zo;if(n.test(t)){for(var r,i,o,a=[],s=[],u=n.lastIndex=0;r=n.exec(t);){(i=r.index)>u&&(s.push(o=t.slice(u,i)),a.push(JSON.stringify(o)));var c=ni(r[1].trim());a.push("_s("+c+")"),s.push({"@binding":c}),u=i+r[0].length}return u<t.length&&(s.push(o=t.slice(u)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}var Yo,Ko={staticKeys:["staticClass"],transformNode:function(t,e){var n=e.warn||ii,r=vi(t,"class");r&&Jo(r,e.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',t.rawAttrsMap.class),r&&(t.staticClass=JSON.stringify(r));var i=di(t,"class",!1);i&&(t.classBinding=i)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}},Xo={staticKeys:["staticStyle"],transformNode:function(t,e){var n=e.warn||ii,r=vi(t,"style");r&&(Jo(r,e.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',t.rawAttrsMap.style),t.staticStyle=JSON.stringify(Li(r)));var i=di(t,"style",!1);i&&(t.styleBinding=i)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},Zo=function(t){return(Yo=Yo||document.createElement("div")).innerHTML=t,Yo.textContent},Qo=m("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),ta=m("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ea=m("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),na=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ra=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ia="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+V+"]*",oa="((?:"+ia+"\\:)?"+ia+")",aa=new RegExp("^<"+oa),sa=/^\s*(\/?)>/,ua=new RegExp("^<\\/"+oa+"[^>]*>"),ca=/^<!DOCTYPE [^>]+>/i,fa=/^<!\--/,la=/^<!\[/,pa=m("script,style,textarea",!0),da={},va={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},ha=/&(?:lt|gt|quot|amp|#39);/g,ma=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,ga=m("pre,textarea",!0),ya=function(t,e){return t&&ga(t)&&"\n"===e[0]};function ba(t,e){var n=e?ma:ha;return t.replace(n,function(t){return va[t]})}var _a,wa,xa,Aa,Sa,Ca,Ea,Oa,ka,$a=/^@|^v-on:/,Ta=/^v-|^@|^:/,Ma=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Ia=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,ja=/^\(|\)$/g,Pa=/^\[.*\]$/,Na=/:(.*)$/,Fa=/^:|^\.|^v-bind:/,La=/\.[^.]+/g,Ra=/^v-slot(:|$)|^#/,Ba=/[\r\n]/,Da=/\s+/g,Ua=/[\s"'<>\/=]/,Va=x(Zo),Wa="_empty_";function Ha(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:Xa(e),rawAttrsMap:{},parent:n,children:[]}}function za(t,e){_a=e.warn||ii,Ca=e.isPreTag||j,Ea=e.mustUseProp||j,Oa=e.getTagNamespace||j;var n=e.isReservedTag||j;ka=function(t){return!!t.component||!n(t.tag)},xa=oi(e.modules,"transformNode"),Aa=oi(e.modules,"preTransformNode"),Sa=oi(e.modules,"postTransformNode"),wa=e.delimiters;var r,i,o=[],a=!1!==e.preserveWhitespace,s=e.whitespace,u=!1,c=!1,f=!1;function l(t,e){f||(f=!0,_a(t,e))}function p(t){if(d(t),u||t.processed||(t=Ga(t,e)),o.length||t===r||(r.if&&(t.elseif||t.else)?(v(t),Ja(r,{exp:t.elseif,block:t})):l("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:t.start})),i&&!t.forbidden)if(t.elseif||t.else)a=t,(s=function(t){var e=t.length;for(;e--;){if(1===t[e].type)return t[e];" "!==t[e].text&&_a('text "'+t[e].text.trim()+'" between v-if and v-else(-if) will be ignored.',t[e]),t.pop()}}(i.children))&&s.if?Ja(s,{exp:a.elseif,block:a}):_a("v-"+(a.elseif?'else-if="'+a.elseif+'"':"else")+" used on element <"+a.tag+"> without corresponding v-if.",a.rawAttrsMap[a.elseif?"v-else-if":"v-else"]);else{if(t.slotScope){var n=t.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=t}i.children.push(t),t.parent=i}var a,s;t.children=t.children.filter(function(t){return!t.slotScope}),d(t),t.pre&&(u=!1),Ca(t.tag)&&(c=!1);for(var f=0;f<Sa.length;f++)Sa[f](t,e)}function d(t){if(!c)for(var e;(e=t.children[t.children.length-1])&&3===e.type&&" "===e.text;)t.children.pop()}function v(t){"slot"!==t.tag&&"template"!==t.tag||l("Cannot use <"+t.tag+"> as component root element because it may contain multiple nodes.",{start:t.start}),t.attrsMap.hasOwnProperty("v-for")&&l("Cannot use v-for on stateful component root element because it renders multiple elements.",t.rawAttrsMap["v-for"])}return function(t,e){for(var n,r,i=[],o=e.expectHTML,a=e.isUnaryTag||j,s=e.canBeLeftOpenTag||j,u=0;t;){if(n=t,r&&pa(r)){var c=0,f=r.toLowerCase(),l=da[f]||(da[f]=new RegExp("([\\s\\S]*?)(</"+f+"[^>]*>)","i")),p=t.replace(l,function(t,n,r){return c=r.length,pa(f)||"noscript"===f||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),ya(f,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""});u+=t.length-p.length,t=p,E(f,u-c,u)}else{var d=t.indexOf("<");if(0===d){if(fa.test(t)){var v=t.indexOf("--\x3e");if(v>=0){e.shouldKeepComment&&e.comment(t.substring(4,v),u,u+v+3),A(v+3);continue}}if(la.test(t)){var h=t.indexOf("]>");if(h>=0){A(h+2);continue}}var m=t.match(ca);if(m){A(m[0].length);continue}var g=t.match(ua);if(g){var y=u;A(g[0].length),E(g[1],y,u);continue}var b=S();if(b){C(b),ya(b.tagName,t)&&A(1);continue}}var _=void 0,w=void 0,x=void 0;if(d>=0){for(w=t.slice(d);!(ua.test(w)||aa.test(w)||fa.test(w)||la.test(w)||(x=w.indexOf("<",1))<0);)d+=x,w=t.slice(d);_=t.substring(0,d)}d<0&&(_=t),_&&A(_.length),e.chars&&_&&e.chars(_,u-_.length,u)}if(t===n){e.chars&&e.chars(t),!i.length&&e.warn&&e.warn('Mal-formatted tag at end of template: "'+t+'"',{start:u+t.length});break}}function A(e){u+=e,t=t.substring(e)}function S(){var e=t.match(aa);if(e){var n,r,i={tagName:e[1],attrs:[],start:u};for(A(e[0].length);!(n=t.match(sa))&&(r=t.match(ra)||t.match(na));)r.start=u,A(r[0].length),r.end=u,i.attrs.push(r);if(n)return i.unarySlash=n[1],A(n[0].length),i.end=u,i}}function C(t){var n=t.tagName,u=t.unarySlash;o&&("p"===r&&ea(n)&&E(r),s(n)&&r===n&&E(n));for(var c=a(n)||!!u,f=t.attrs.length,l=new Array(f),p=0;p<f;p++){var d=t.attrs[p],v=d[3]||d[4]||d[5]||"",h="a"===n&&"href"===d[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;l[p]={name:d[1],value:ba(v,h)},e.outputSourceRange&&(l[p].start=d.start+d[0].match(/^\s*/).length,l[p].end=d.end)}c||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:l,start:t.start,end:t.end}),r=n),e.start&&e.start(n,l,c,t.start,t.end)}function E(t,n,o){var a,s;if(null==n&&(n=u),null==o&&(o=u),t)for(s=t.toLowerCase(),a=i.length-1;a>=0&&i[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var c=i.length-1;c>=a;c--)(c>a||!t&&e.warn)&&e.warn("tag <"+i[c].tag+"> has no matching end tag.",{start:i[c].start}),e.end&&e.end(i[c].tag,n,o);i.length=a,r=a&&i[a-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,o):"p"===s&&(e.start&&e.start(t,[],!1,n,o),e.end&&e.end(t,n,o))}E()}(t,{warn:_a,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,outputSourceRange:e.outputSourceRange,start:function(t,n,a,s){var f=i&&i.ns||Oa(t);Z&&"svg"===f&&(n=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];Za.test(r.name)||(r.name=r.name.replace(Qa,""),e.push(r))}return e}(n));var l,d=Ha(t,n,i);f&&(d.ns=f),e.outputSourceRange&&(d.start=s,d.rawAttrsMap=d.attrsList.reduce(function(t,e){return t[e.name]=e,t},{})),n.forEach(function(t){Ua.test(t.name)&&_a("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:t.start+t.name.indexOf("["),end:t.start+t.name.length})}),"style"!==(l=d).tag&&("script"!==l.tag||l.attrsMap.type&&"text/javascript"!==l.attrsMap.type)||at()||(d.forbidden=!0,_a("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+t+">, as they will not be parsed.",{start:d.start}));for(var h=0;h<Aa.length;h++)d=Aa[h](d,e)||d;u||(!function(t){null!=vi(t,"v-pre")&&(t.pre=!0)}(d),d.pre&&(u=!0)),Ca(d.tag)&&(c=!0),u?function(t){var e=t.attrsList,n=e.length;if(n)for(var r=t.attrs=new Array(n),i=0;i<n;i++)r[i]={name:e[i].name,value:JSON.stringify(e[i].value)},null!=e[i].start&&(r[i].start=e[i].start,r[i].end=e[i].end);else t.pre||(t.plain=!0)}(d):d.processed||(qa(d),function(t){var e=vi(t,"v-if");if(e)t.if=e,Ja(t,{exp:e,block:t});else{null!=vi(t,"v-else")&&(t.else=!0);var n=vi(t,"v-else-if");n&&(t.elseif=n)}}(d),function(t){null!=vi(t,"v-once")&&(t.once=!0)}(d)),r||v(r=d),a?p(d):(i=d,o.push(d))},end:function(t,n,r){var a=o[o.length-1];o.length-=1,i=o[o.length-1],e.outputSourceRange&&(a.end=r),p(a)},chars:function(n,r,o){if(i){if(!Z||"textarea"!==i.tag||i.attrsMap.placeholder!==n){var f,p,d,v=i.children;if(n=c||n.trim()?"script"===(f=i).tag||"style"===f.tag?n:Va(n):v.length?s?"condense"===s&&Ba.test(n)?"":" ":a?" ":"":"")"condense"===s&&(n=n.replace(Da," ")),!u&&" "!==n&&(p=Jo(n,wa))?d={type:2,expression:p.expression,tokens:p.tokens,text:n}:" "===n&&v.length&&" "===v[v.length-1].text||(d={type:3,text:n}),d&&(e.outputSourceRange&&(d.start=r,d.end=o),v.push(d))}}else n===t?l("Component template requires a root element, rather than just text.",{start:r}):(n=n.trim())&&l('text "'+n+'" outside root element will be ignored.',{start:r})},comment:function(t,n,r){if(i){var o={type:3,text:t,isComment:!0};e.outputSourceRange&&(o.start=n,o.end=r),i.children.push(o)}}}),r}function Ga(t,e){var n,r;!function(t){var e=di(t,"key");if(e){if("template"===t.tag&&_a("<template> cannot be keyed. Place the key on real elements instead.",pi(t,"key")),t.for){var n=t.iterator2||t.iterator1,r=t.parent;n&&n===e&&r&&"transition-group"===r.tag&&_a("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",pi(t,"key"),!0)}t.key=e}}(t),t.plain=!t.key&&!t.scopedSlots&&!t.attrsList.length,(r=di(n=t,"ref"))&&(n.ref=r,n.refInFor=function(t){for(var e=t;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(n)),function(t){var e;"template"===t.tag?((e=vi(t,"scope"))&&_a('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',t.rawAttrsMap.scope,!0),t.slotScope=e||vi(t,"slot-scope")):(e=vi(t,"slot-scope"))&&(t.attrsMap["v-for"]&&_a("Ambiguous combined usage of slot-scope and v-for on <"+t.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",t.rawAttrsMap["slot-scope"],!0),t.slotScope=e);var n=di(t,"slot");n&&(t.slotTarget='""'===n?'"default"':n,t.slotTargetDynamic=!(!t.attrsMap[":slot"]&&!t.attrsMap["v-bind:slot"]),"template"===t.tag||t.slotScope||si(t,"slot",n,pi(t,"slot")));if("template"===t.tag){var r=hi(t,Ra);if(r){(t.slotTarget||t.slotScope)&&_a("Unexpected mixed usage of different slot syntaxes.",t),t.parent&&!ka(t.parent)&&_a("<template v-slot> can only appear at the root level inside the receiving the component",t);var i=Ya(r),o=i.name,a=i.dynamic;t.slotTarget=o,t.slotTargetDynamic=a,t.slotScope=r.value||Wa}}else{var s=hi(t,Ra);if(s){ka(t)||_a("v-slot can only be used on components or <template>.",s),(t.slotScope||t.slotTarget)&&_a("Unexpected mixed usage of different slot syntaxes.",t),t.scopedSlots&&_a("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var u=t.scopedSlots||(t.scopedSlots={}),c=Ya(s),f=c.name,l=c.dynamic,p=u[f]=Ha("template",[],t);p.slotTarget=f,p.slotTargetDynamic=l,p.children=t.children.filter(function(t){if(!t.slotScope)return t.parent=p,!0}),p.slotScope=s.value||Wa,t.children=[],t.plain=!1}}}(t),function(t){"slot"===t.tag&&(t.slotName=di(t,"name"),t.key&&_a("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",pi(t,"key")))}(t),function(t){var e;(e=di(t,"is"))&&(t.component=e);null!=vi(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var i=0;i<xa.length;i++)t=xa[i](t,e)||t;return function(t){var e,n,r,i,o,a,s,u,c=t.attrsList;for(e=0,n=c.length;e<n;e++)if(r=i=c[e].name,o=c[e].value,Ta.test(r))if(t.hasBindings=!0,(a=Ka(r.replace(Ta,"")))&&(r=r.replace(La,"")),Fa.test(r))r=r.replace(Fa,""),o=ni(o),(u=Pa.test(r))&&(r=r.slice(1,-1)),0===o.trim().length&&_a('The value for a v-bind expression cannot be empty. Found in "v-bind:'+r+'"'),a&&(a.prop&&!u&&"innerHtml"===(r=S(r))&&(r="innerHTML"),a.camel&&!u&&(r=S(r)),a.sync&&(s=yi(o,"$event"),u?li(t,'"update:"+('+r+")",s,null,!1,_a,c[e],!0):(li(t,"update:"+S(r),s,null,!1,_a,c[e]),O(r)!==S(r)&&li(t,"update:"+O(r),s,null,!1,_a,c[e])))),a&&a.prop||!t.component&&Ea(t.tag,t.attrsMap.type,r)?ai(t,r,o,c[e],u):si(t,r,o,c[e],u);else if($a.test(r))r=r.replace($a,""),(u=Pa.test(r))&&(r=r.slice(1,-1)),li(t,r,o,a,!1,_a,c[e],u);else{var f=(r=r.replace(Ta,"")).match(Na),l=f&&f[1];u=!1,l&&(r=r.slice(0,-(l.length+1)),Pa.test(l)&&(l=l.slice(1,-1),u=!0)),ci(t,r,i,o,l,u,a,c[e]),"model"===r&&ts(t,o)}else{var p=Jo(o,wa);p&&_a(r+'="'+o+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',c[e]),si(t,r,JSON.stringify(o),c[e]),!t.component&&"muted"===r&&Ea(t.tag,t.attrsMap.type,r)&&ai(t,r,"true",c[e])}}(t),t}function qa(t){var e;if(e=vi(t,"v-for")){var n=function(t){var e=t.match(Ma);if(!e)return;var n={};n.for=e[2].trim();var r=e[1].trim().replace(ja,""),i=r.match(Ia);i?(n.alias=r.replace(Ia,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(e);n?T(t,n):_a("Invalid v-for expression: "+e,t.rawAttrsMap["v-for"])}}function Ja(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function Ya(t){var e=t.name.replace(Ra,"");return e||("#"!==t.name[0]?e="default":_a("v-slot shorthand syntax requires a slot name.",t)),Pa.test(e)?{name:e.slice(1,-1),dynamic:!0}:{name:'"'+e+'"',dynamic:!1}}function Ka(t){var e=t.match(La);if(e){var n={};return e.forEach(function(t){n[t.slice(1)]=!0}),n}}function Xa(t){for(var e={},n=0,r=t.length;n<r;n++)!e[t[n].name]||Z||tt||_a("duplicate attribute: "+t[n].name,t[n]),e[t[n].name]=t[n].value;return e}var Za=/^xmlns:NS\d+/,Qa=/^NS\d+:/;function ts(t,e){for(var n=t;n;)n.for&&n.alias===e&&_a("<"+t.tag+' v-model="'+e+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',t.rawAttrsMap["v-model"]),n=n.parent}function es(t){return Ha(t.tag,t.attrsList.slice(),t.parent)}var ns,rs,is=[Ko,Xo,{preTransformNode:function(t,e){if("input"===t.tag){var n,r=t.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=di(t,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=vi(t,"v-if",!0),o=i?"&&("+i+")":"",a=null!=vi(t,"v-else",!0),s=vi(t,"v-else-if",!0),u=es(t);qa(u),ui(u,"type","checkbox"),Ga(u,e),u.processed=!0,u.if="("+n+")==='checkbox'"+o,Ja(u,{exp:u.if,block:u});var c=es(t);vi(c,"v-for",!0),ui(c,"type","radio"),Ga(c,e),Ja(u,{exp:"("+n+")==='radio'"+o,block:c});var f=es(t);return vi(f,"v-for",!0),ui(f,":type",n),Ga(f,e),Ja(u,{exp:i,block:f}),a?u.else=!0:s&&(u.elseif=s),u}}}}],os={expectHTML:!0,modules:is,directives:{model:function(t,e,n){Qr=n;var r=e.value,i=e.modifiers,o=t.tag,a=t.attrsMap.type;if("input"===o&&"file"===a&&Qr("<"+t.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',t.rawAttrsMap["v-model"]),t.component)return gi(t,r,i),!1;if("select"===o)!function(t,e,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+yi(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),li(t,"change",r,null,!0)}(t,r,i);else if("input"===o&&"checkbox"===a)!function(t,e,n){var r=n&&n.number,i=di(t,"value")||"null",o=di(t,"true-value")||"true",a=di(t,"false-value")||"false";ai(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===o?":("+e+")":":_q("+e+","+o+")")),li(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+yi(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+yi(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+yi(e,"$$c")+"}",null,!0)}(t,r,i);else if("input"===o&&"radio"===a)!function(t,e,n){var r=n&&n.number,i=di(t,"value")||"null";ai(t,"checked","_q("+e+","+(i=r?"_n("+i+")":i)+")"),li(t,"change",yi(e,i),null,!0)}(t,r,i);else if("input"===o||"textarea"===o)!function(t,e,n){var r=t.attrsMap.type,i=t.attrsMap["v-bind:value"]||t.attrsMap[":value"],o=t.attrsMap["v-bind:type"]||t.attrsMap[":type"];if(i&&!o){var a=t.attrsMap["v-bind:value"]?"v-bind:value":":value";Qr(a+'="'+i+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',t.rawAttrsMap[a])}var s=n||{},u=s.lazy,c=s.number,f=s.trim,l=!u&&"range"!==r,p=u?"change":"range"===r?Ci:"input",d="$event.target.value";f&&(d="$event.target.value.trim()"),c&&(d="_n("+d+")");var v=yi(e,d);l&&(v="if($event.target.composing)return;"+v),ai(t,"value","("+e+")"),li(t,p,v,null,!0),(f||c)&&li(t,"blur","$forceUpdate()")}(t,r,i);else{if(!U.isReservedTag(o))return gi(t,r,i),!1;Qr("<"+t.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",t.rawAttrsMap["v-model"])}return!0},text:function(t,e){e.value&&ai(t,"textContent","_s("+e.value+")",e)},html:function(t,e){e.value&&ai(t,"innerHTML","_s("+e.value+")",e)}},isPreTag:function(t){return"pre"===t},isUnaryTag:Qo,mustUseProp:sr,canBeLeftOpenTag:ta,isReservedTag:Ar,getTagNamespace:Sr,staticKeys:function(t){return t.reduce(function(t,e){return t.concat(e.staticKeys||[])},[]).join(",")}(is)},as=x(function(t){return m("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(t?","+t:""))});function ss(t,e){t&&(ns=as(e.staticKeys||""),rs=e.isReservedTag||j,function t(e){e.static=function(t){if(2===t.type)return!1;if(3===t.type)return!0;return!(!t.pre&&(t.hasBindings||t.if||t.for||g(t.tag)||!rs(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(ns)))}(e);if(1===e.type){if(!rs(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];t(i),i.static||(e.static=!1)}if(e.ifConditions)for(var o=1,a=e.ifConditions.length;o<a;o++){var s=e.ifConditions[o].block;t(s),s.static||(e.static=!1)}}}(t),function t(e,n){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=n),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,i=e.children.length;r<i;r++)t(e.children[r],n||!!e.for);if(e.ifConditions)for(var o=1,a=e.ifConditions.length;o<a;o++)t(e.ifConditions[o].block,n)}}(t,!1))}var us=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,cs=/\([^)]*?\);*$/,fs=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,ls={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},ps={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},ds=function(t){return"if("+t+")return null;"},vs={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:ds("$event.target !== $event.currentTarget"),ctrl:ds("!$event.ctrlKey"),shift:ds("!$event.shiftKey"),alt:ds("!$event.altKey"),meta:ds("!$event.metaKey"),left:ds("'button' in $event && $event.button !== 0"),middle:ds("'button' in $event && $event.button !== 1"),right:ds("'button' in $event && $event.button !== 2")};function hs(t,e){var n=e?"nativeOn:":"on:",r="",i="";for(var o in t){var a=ms(t[o]);t[o]&&t[o].dynamic?i+=o+","+a+",":r+='"'+o+'":'+a+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function ms(t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return ms(t)}).join(",")+"]";var e=fs.test(t.value),n=us.test(t.value),r=fs.test(t.value.replace(cs,""));if(t.modifiers){var i="",o="",a=[];for(var s in t.modifiers)if(vs[s])o+=vs[s],ls[s]&&a.push(s);else if("exact"===s){var u=t.modifiers;o+=ds(["ctrl","shift","alt","meta"].filter(function(t){return!u[t]}).map(function(t){return"$event."+t+"Key"}).join("||"))}else a.push(s);return a.length&&(i+=function(t){return"if(!$event.type.indexOf('key')&&"+t.map(gs).join("&&")+")return null;"}(a)),o&&(i+=o),"function($event){"+i+(e?"return "+t.value+"($event)":n?"return ("+t.value+")($event)":r?"return "+t.value:t.value)+"}"}return e||n?t.value:"function($event){"+(r?"return "+t.value:t.value)+"}"}function gs(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=ls[t],r=ps[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var ys={on:function(t,e){e.modifiers&&lt("v-on without argument does not support modifiers."),t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:I},bs=function(t){this.options=t,this.warn=t.warn||ii,this.transforms=oi(t.modules,"transformCode"),this.dataGenFns=oi(t.modules,"genData"),this.directives=T(T({},ys),t.directives);var e=t.isReservedTag||j;this.maybeComponent=function(t){return!!t.component||!e(t.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function _s(t,e){var n=new bs(e);return{render:"with(this){return "+(t?ws(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function ws(t,e){if(t.parent&&(t.pre=t.pre||t.parent.pre),t.staticRoot&&!t.staticProcessed)return xs(t,e);if(t.once&&!t.onceProcessed)return As(t,e);if(t.for&&!t.forProcessed)return Cs(t,e);if(t.if&&!t.ifProcessed)return Ss(t,e);if("template"!==t.tag||t.slotTarget||e.pre){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',r=$s(t,e),i="_t("+n+(r?","+r:""),o=t.attrs||t.dynamicAttrs?Is((t.attrs||[]).concat(t.dynamicAttrs||[]).map(function(t){return{name:S(t.name),value:t.value,dynamic:t.dynamic}})):null,a=t.attrsMap["v-bind"];!o&&!a||r||(i+=",null");o&&(i+=","+o);a&&(i+=(o?"":",null")+","+a);return i+")"}(t,e);var n;if(t.component)n=function(t,e,n){var r=e.inlineTemplate?null:$s(e,n,!0);return"_c("+t+","+Es(e,n)+(r?","+r:"")+")"}(t.component,t,e);else{var r;(!t.plain||t.pre&&e.maybeComponent(t))&&(r=Es(t,e));var i=t.inlineTemplate?null:$s(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<e.transforms.length;o++)n=e.transforms[o](t,n);return n}return $s(t,e)||"void 0"}function xs(t,e){t.staticProcessed=!0;var n=e.pre;return t.pre&&(e.pre=t.pre),e.staticRenderFns.push("with(this){return "+ws(t,e)+"}"),e.pre=n,"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function As(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return Ss(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+ws(t,e)+","+e.onceId+++","+n+")":(e.warn("v-once can only be used inside v-for that is keyed. ",t.rawAttrsMap["v-once"]),ws(t,e))}return xs(t,e)}function Ss(t,e,n,r){return t.ifProcessed=!0,function t(e,n,r,i){if(!e.length)return i||"_e()";var o=e.shift();return o.exp?"("+o.exp+")?"+a(o.block)+":"+t(e,n,r,i):""+a(o.block);function a(t){return r?r(t,n):t.once?As(t,n):ws(t,n)}}(t.ifConditions.slice(),e,n,r)}function Cs(t,e,n,r){var i=t.for,o=t.alias,a=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return e.maybeComponent(t)&&"slot"!==t.tag&&"template"!==t.tag&&!t.key&&e.warn("<"+t.tag+' v-for="'+o+" in "+i+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',t.rawAttrsMap["v-for"],!0),t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||ws)(t,e)+"})"}function Es(t,e){var n="{",r=function(t,e){var n=t.directives;if(!n)return;var r,i,o,a,s="directives:[",u=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var c=e.directives[o.name];c&&(a=!!c(t,o,e.warn)),a&&(u=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?",arg:"+(o.isDynamicArg?o.arg:'"'+o.arg+'"'):"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}if(u)return s.slice(0,-1)+"]"}(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:"+Is(t.attrs)+","),t.props&&(n+="domProps:"+Is(t.props)+","),t.events&&(n+=hs(t.events,!1)+","),t.nativeEvents&&(n+=hs(t.nativeEvents,!0)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e,n){var r=Object.keys(e).some(function(t){var n=e[t];return n.slotTargetDynamic||n.if||n.for||Os(n)}),i=!!t.if;if(!r)for(var o=t.parent;o;){if(o.slotScope&&o.slotScope!==Wa||o.for){r=!0;break}o.if&&(i=!0),o=o.parent}var a=Object.keys(e).map(function(t){return ks(e[t],n)}).join(",");return"scopedSlots:_u(["+a+"]"+(r?",null,true":"")+(!r&&i?",null,false,"+function(t){var e=5381,n=t.length;for(;n;)e=33*e^t.charCodeAt(--n);return e>>>0}(a):"")+")"}(t,t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var o=function(t,e){var n=t.children[0];1===t.children.length&&1===n.type||e.warn("Inline-template components must have exactly one child element.",{start:t.start});if(n&&1===n.type){var r=_s(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(t){return"function(){"+t+"}"}).join(",")+"]}"}}(t,e);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",t.dynamicAttrs&&(n="_b("+n+',"'+t.tag+'",'+Is(t.dynamicAttrs)+")"),t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function Os(t){return 1===t.type&&("slot"===t.tag||t.children.some(Os))}function ks(t,e){var n=t.attrsMap["slot-scope"];if(t.if&&!t.ifProcessed&&!n)return Ss(t,e,ks,"null");if(t.for&&!t.forProcessed)return Cs(t,e,ks);var r=t.slotScope===Wa?"":String(t.slotScope),i="function("+r+"){return "+("template"===t.tag?t.if&&n?"("+t.if+")?"+($s(t,e)||"undefined")+":undefined":$s(t,e)||"undefined":ws(t,e))+"}",o=r?"":",proxy:true";return"{key:"+(t.slotTarget||'"default"')+",fn:"+i+o+"}"}function $s(t,e,n,r,i){var o=t.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?e.maybeComponent(a)?",1":",0":"";return""+(r||ws)(a,e)+s}var u=n?function(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(Ts(i)||i.ifConditions&&i.ifConditions.some(function(t){return Ts(t.block)})){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some(function(t){return e(t.block)}))&&(n=1)}}return n}(o,e.maybeComponent):0,c=i||Ms;return"["+o.map(function(t){return c(t,e)}).join(",")+"]"+(u?","+u:"")}}function Ts(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Ms(t,e){return 1===t.type?ws(t,e):3===t.type&&t.isComment?(r=t,"_e("+JSON.stringify(r.text)+")"):"_v("+(2===(n=t).type?n.expression:js(JSON.stringify(n.text)))+")";var n,r}function Is(t){for(var e="",n="",r=0;r<t.length;r++){var i=t[r],o=js(i.value);i.dynamic?n+=i.name+","+o+",":e+='"'+i.name+'":'+o+","}return e="{"+e.slice(0,-1)+"}",n?"_d("+e+",["+n.slice(0,-1)+"])":e}function js(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var Ps=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),Ns=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),Fs=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function Ls(t,e){t&&function t(e,n){if(1===e.type){for(var r in e.attrsMap)if(Ta.test(r)){var i=e.attrsMap[r];if(i){var o=e.rawAttrsMap[r];"v-for"===r?Bs(e,'v-for="'+i+'"',n,o):$a.test(r)?Rs(i,r+'="'+i+'"',n,o):Us(i,r+'="'+i+'"',n,o)}}if(e.children)for(var a=0;a<e.children.length;a++)t(e.children[a],n)}else 2===e.type&&Us(e.expression,e.text,n,e)}(t,e)}function Rs(t,e,n,r){var i=t.replace(Fs,""),o=i.match(Ns);o&&"$"!==i.charAt(o.index-1)&&n('avoid using JavaScript unary operator as property name: "'+o[0]+'" in expression '+e.trim(),r),Us(t,e,n,r)}function Bs(t,e,n,r){Us(t.for||"",e,n,r),Ds(t.alias,"v-for alias",e,n,r),Ds(t.iterator1,"v-for iterator",e,n,r),Ds(t.iterator2,"v-for iterator",e,n,r)}function Ds(t,e,n,r,i){if("string"==typeof t)try{new Function("var "+t+"=_")}catch(o){r("invalid "+e+' "'+t+'" in expression: '+n.trim(),i)}}function Us(t,e,n,r){try{new Function("return "+t)}catch(o){var i=t.replace(Fs,"").match(Ps);n(i?'avoid using JavaScript keyword as property name: "'+i[0]+'"\n  Raw expression: '+e.trim():"invalid expression: "+o.message+" in\n\n    "+t+"\n\n  Raw expression: "+e.trim()+"\n",r)}}var Vs=2;function Ws(t,e){var n="";if(e>0)for(;1&e&&(n+=t),!((e>>>=1)<=0);)t+=t;return n}function Hs(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),I}}function zs(t){var e=Object.create(null);return function(n,r,i){var o=(r=T({},r)).warn||lt;delete r.warn;try{new Function("return 1")}catch(t){t.toString().match(/unsafe-eval|CSP/)&&o("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var a=r.delimiters?String(r.delimiters)+n:n;if(e[a])return e[a];var s=t(n,r);s.errors&&s.errors.length&&(r.outputSourceRange?s.errors.forEach(function(t){o("Error compiling template:\n\n"+t.msg+"\n\n"+function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.length);for(var r=t.split(/\r?\n/),i=0,o=[],a=0;a<r.length;a++)if((i+=r[a].length+1)>=e){for(var s=a-Vs;s<=a+Vs||n>i;s++)if(!(s<0||s>=r.length)){o.push(""+(s+1)+Ws(" ",3-String(s+1).length)+"|  "+r[s]);var u=r[s].length;if(s===a){var c=e-(i-u)+1,f=n>i?u-c:n-e;o.push("   |  "+Ws(" ",c)+Ws("^",f))}else if(s>a){if(n>i){var l=Math.min(n-i,u);o.push("   |  "+Ws("^",l))}i+=u+1}}break}return o.join("\n")}(n,t.start,t.end),i)}):o("Error compiling template:\n\n"+n+"\n\n"+s.errors.map(function(t){return"- "+t}).join("\n")+"\n",i)),s.tips&&s.tips.length&&(r.outputSourceRange?s.tips.forEach(function(t){return pt(t.msg,i)}):s.tips.forEach(function(t){return pt(t,i)}));var u={},c=[];return u.render=Hs(s.render,c),u.staticRenderFns=s.staticRenderFns.map(function(t){return Hs(t,c)}),s.errors&&s.errors.length||!c.length||o("Failed to generate render function:\n\n"+c.map(function(t){var e=t.err,n=t.code;return e.toString()+" in\n\n"+n+"\n"}).join("\n"),i),e[a]=u}}var Gs,qs,Js=(Gs=function(t,e){var n=za(t.trim(),e);!1!==e.optimize&&ss(n,e);var r=_s(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(t){function e(e,n){var r=Object.create(t),i=[],o=[],a=function(t,e,n){(n?o:i).push(t)};if(n){if(n.outputSourceRange){var s=e.match(/^\s*/)[0].length;a=function(t,e,n){var r={msg:t};e&&(null!=e.start&&(r.start=e.start+s),null!=e.end&&(r.end=e.end+s)),(n?o:i).push(r)}}for(var u in n.modules&&(r.modules=(t.modules||[]).concat(n.modules)),n.directives&&(r.directives=T(Object.create(t.directives||null),n.directives)),n)"modules"!==u&&"directives"!==u&&(r[u]=n[u])}r.warn=a;var c=Gs(e.trim(),r);return Ls(c.ast,a),c.errors=i,c.tips=o,c}return{compile:e,compileToFunctions:zs(e)}})(os),Ys=(Js.compile,Js.compileToFunctions);function Ks(t){return(qs=qs||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',qs.innerHTML.indexOf("&#10;")>0}var Xs=!!J&&Ks(!1),Zs=!!J&&Ks(!0),Qs=x(function(t){var e=Or(t);return e&&e.innerHTML}),tu=Xn.prototype.$mount;return Xn.prototype.$mount=function(t,e){if((t=t&&Or(t))===document.body||t===document.documentElement)return lt("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=Qs(r))||lt("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return lt("invalid template option:"+r,this),this;r=r.innerHTML}else t&&(r=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(r){U.performance&&ae&&ae("compile");var i=Ys(r,{outputSourceRange:!0,shouldDecodeNewlines:Xs,shouldDecodeNewlinesForHref:Zs,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a,U.performance&&ae&&(ae("compile end"),se("vue "+this._name+" compile","compile","compile end"))}}return tu.call(this,t,e)},Xn.compile=Ys,Xn},t.exports=r()}).call(this,n(47),n(292).setImmediate)},function(t,e,n){n(122),t.exports=n(297)},function(t,e,n){"use strict";(function(t){n(123),n(267),n(269),n(271),n(273),n(275),n(277),n(279),n(281),n(283),n(287),t._babelPolyfill&&"undefined"!=typeof console&&console.warn&&console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended and may have consequences if different versions of the polyfills are applied sequentially. If you do need to load the polyfill more than once, use @babel/polyfill/noConflict instead to bypass the warning."),t._babelPolyfill=!0}).call(this,n(47))},function(t,e,n){n(124),n(127),n(128),n(129),n(130),n(131),n(132),n(133),n(134),n(135),n(136),n(137),n(138),n(139),n(140),n(141),n(142),n(143),n(144),n(145),n(146),n(147),n(148),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(163),n(164),n(165),n(166),n(167),n(168),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(205),n(206),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(83),n(230),n(109),n(231),n(110),n(232),n(233),n(234),n(235),n(111),n(238),n(239),n(240),n(241),n(242),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(250),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(264),n(265),n(266),t.exports=n(9)},function(t,e,n){"use strict";var r=n(1),i=n(13),o=n(8),a=n(0),s=n(10),u=n(27).KEY,c=n(2),f=n(48),l=n(37),p=n(29),d=n(5),v=n(63),h=n(91),m=n(126),g=n(66),y=n(3),b=n(4),_=n(15),w=n(26),x=n(28),A=n(33),S=n(94),C=n(18),E=n(7),O=n(31),k=C.f,$=E.f,T=S.f,M=r.Symbol,I=r.JSON,j=I&&I.stringify,P=d("_hidden"),N=d("toPrimitive"),F={}.propertyIsEnumerable,L=f("symbol-registry"),R=f("symbols"),B=f("op-symbols"),D=Object.prototype,U="function"==typeof M,V=r.QObject,W=!V||!V.prototype||!V.prototype.findChild,H=o&&c(function(){return 7!=A($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=k(D,e);r&&delete D[e],$(t,e,n),r&&t!==D&&$(D,e,r)}:$,z=function(t){var e=R[t]=A(M.prototype);return e._k=t,e},G=U&&"symbol"==typeof M.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof M},q=function(t,e,n){return t===D&&q(B,e,n),y(t),e=w(e,!0),y(n),i(R,e)?(n.enumerable?(i(t,P)&&t[P][e]&&(t[P][e]=!1),n=A(n,{enumerable:x(0,!1)})):(i(t,P)||$(t,P,x(1,{})),t[P][e]=!0),H(t,e,n)):$(t,e,n)},J=function(t,e){y(t);for(var n,r=m(e=_(e)),i=0,o=r.length;o>i;)q(t,n=r[i++],e[n]);return t},Y=function(t){var e=F.call(this,t=w(t,!0));return!(this===D&&i(R,t)&&!i(B,t))&&(!(e||!i(this,t)||!i(R,t)||i(this,P)&&this[P][t])||e)},K=function(t,e){if(t=_(t),e=w(e,!0),t!==D||!i(R,e)||i(B,e)){var n=k(t,e);return!n||!i(R,e)||i(t,P)&&t[P][e]||(n.enumerable=!0),n}},X=function(t){for(var e,n=T(_(t)),r=[],o=0;n.length>o;)i(R,e=n[o++])||e==P||e==u||r.push(e);return r},Z=function(t){for(var e,n=t===D,r=T(n?B:_(t)),o=[],a=0;r.length>a;)!i(R,e=r[a++])||n&&!i(D,e)||o.push(R[e]);return o};U||(s((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var t=p(arguments.length>0?arguments[0]:void 0),e=function(n){this===D&&e.call(B,n),i(this,P)&&i(this[P],t)&&(this[P][t]=!1),H(this,t,x(1,n))};return o&&W&&H(D,t,{configurable:!0,set:e}),z(t)}).prototype,"toString",function(){return this._k}),C.f=K,E.f=q,n(34).f=S.f=X,n(44).f=Y,n(50).f=Z,o&&!n(30)&&s(D,"propertyIsEnumerable",Y,!0),v.f=function(t){return z(d(t))}),a(a.G+a.W+a.F*!U,{Symbol:M});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)d(Q[tt++]);for(var et=O(d.store),nt=0;et.length>nt;)h(et[nt++]);a(a.S+a.F*!U,"Symbol",{for:function(t){return i(L,t+="")?L[t]:L[t]=M(t)},keyFor:function(t){if(!G(t))throw TypeError(t+" is not a symbol!");for(var e in L)if(L[e]===t)return e},useSetter:function(){W=!0},useSimple:function(){W=!1}}),a(a.S+a.F*!U,"Object",{create:function(t,e){return void 0===e?A(t):J(A(t),e)},defineProperty:q,defineProperties:J,getOwnPropertyDescriptor:K,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),I&&a(a.S+a.F*(!U||c(function(){var t=M();return"[null]"!=j([t])||"{}"!=j({a:t})||"{}"!=j(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!G(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!G(e))return e}),r[1]=e,j.apply(I,r)}}),M.prototype[N]||n(14)(M.prototype,N,M.prototype.valueOf),l(M,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e,n){t.exports=n(48)("native-function-to-string",Function.toString)},function(t,e,n){var r=n(31),i=n(50),o=n(44);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var a,s=n(t),u=o.f,c=0;s.length>c;)u.call(t,a=s[c++])&&e.push(a);return e}},function(t,e,n){var r=n(0);r(r.S,"Object",{create:n(33)})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperty:n(7).f})},function(t,e,n){var r=n(0);r(r.S+r.F*!n(8),"Object",{defineProperties:n(93)})},function(t,e,n){var r=n(15),i=n(18).f;n(19)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},function(t,e,n){var r=n(11),i=n(35);n(19)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){var r=n(11),i=n(31);n(19)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){n(19)("getOwnPropertyNames",function(){return n(94).f})},function(t,e,n){var r=n(4),i=n(27).onFreeze;n(19)("freeze",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(4),i=n(27).onFreeze;n(19)("seal",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(4),i=n(27).onFreeze;n(19)("preventExtensions",function(t){return function(e){return t&&r(e)?t(i(e)):e}})},function(t,e,n){var r=n(4);n(19)("isFrozen",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(19)("isSealed",function(t){return function(e){return!r(e)||!!t&&t(e)}})},function(t,e,n){var r=n(4);n(19)("isExtensible",function(t){return function(e){return!!r(e)&&(!t||t(e))}})},function(t,e,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(95)})},function(t,e,n){var r=n(0);r(r.S,"Object",{is:n(96)})},function(t,e,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(68).set})},function(t,e,n){"use strict";var r=n(45),i={};i[n(5)("toStringTag")]="z",i+""!="[object z]"&&n(10)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,e,n){var r=n(0);r(r.P,"Function",{bind:n(97)})},function(t,e,n){var r=n(7).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(8)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(4),i=n(35),o=n(5)("hasInstance"),a=Function.prototype;o in a||n(7).f(a,o,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=i(t);)if(this.prototype===t)return!0;return!1}})},function(t,e,n){var r=n(0),i=n(99);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,e,n){var r=n(0),i=n(100);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,e,n){"use strict";var r=n(1),i=n(13),o=n(23),a=n(70),s=n(26),u=n(2),c=n(34).f,f=n(18).f,l=n(7).f,p=n(51).trim,d=r.Number,v=d,h=d.prototype,m="Number"==o(n(33)(h)),g="trim"in String.prototype,y=function(t){var e=s(t,!1);if("string"==typeof e&&e.length>2){var n,r,i,o=(e=g?e.trim():p(e,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=e.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(e.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+e}for(var a,u=e.slice(2),c=0,f=u.length;c<f;c++)if((a=u.charCodeAt(c))<48||a>i)return NaN;return parseInt(u,r)}}return+e};if(!d(" 0o1")||!d("0b1")||d("+0x1")){d=function(t){var e=arguments.length<1?0:t,n=this;return n instanceof d&&(m?u(function(){h.valueOf.call(n)}):"Number"!=o(n))?a(new v(y(e)),n,d):y(e)};for(var b,_=n(8)?c(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;_.length>w;w++)i(v,b=_[w])&&!i(d,b)&&l(d,b,f(v,b));d.prototype=h,h.constructor=d,n(10)(r,"Number",d)}},function(t,e,n){"use strict";var r=n(0),i=n(17),o=n(101),a=n(71),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,e){for(var n=-1,r=e;++n<6;)r+=t*c[n],c[n]=r%1e7,r=u(r/1e7)},p=function(t){for(var e=6,n=0;--e>=0;)n+=c[e],c[e]=u(n/t),n=n%t*1e7},d=function(){for(var t=6,e="";--t>=0;)if(""!==e||0===t||0!==c[t]){var n=String(c[t]);e=""===e?n:e+a.call("0",7-n.length)+n}return e},v=function(t,e,n){return 0===e?n:e%2==1?v(t,e-1,n*t):v(t*t,e/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(2)(function(){s.call({})})),"Number",{toFixed:function(t){var e,n,r,s,u=o(this,f),c=i(t),h="",m="0";if(c<0||c>20)throw RangeError(f);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(h="-",u=-u),u>1e-21)if(n=(e=function(t){for(var e=0,n=t;n>=4096;)e+=12,n/=4096;for(;n>=2;)e+=1,n/=2;return e}(u*v(2,69,1))-69)<0?u*v(2,-e,1):u/v(2,e,1),n*=4503599627370496,(e=52-e)>0){for(l(0,n),r=c;r>=7;)l(1e7,0),r-=7;for(l(v(10,r,1),0),r=e-1;r>=23;)p(1<<23),r-=23;p(1<<r),l(1,1),p(2),m=d()}else l(0,n),l(1<<-e,0),m=d()+a.call("0",c);return m=c>0?h+((s=m.length)<=c?"0."+a.call("0",c-s)+m:m.slice(0,s-c)+"."+m.slice(s-c)):h+m}})},function(t,e,n){"use strict";var r=n(0),i=n(2),o=n(101),a=1..toPrecision;r(r.P+r.F*(i(function(){return"1"!==a.call(1,void 0)})||!i(function(){a.call({})})),"Number",{toPrecision:function(t){var e=o(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(e):a.call(e,t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,e,n){var r=n(0),i=n(1).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&i(t)}})},function(t,e,n){var r=n(0);r(r.S,"Number",{isInteger:n(102)})},function(t,e,n){var r=n(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,e,n){var r=n(0),i=n(102),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return i(t)&&o(t)<=9007199254740991}})},function(t,e,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,n){var r=n(0),i=n(100);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(t,e,n){var r=n(0),i=n(99);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(t,e,n){var r=n(0),i=n(103),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:i(t-1+o(t-1)*o(t+1))}})},function(t,e,n){var r=n(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):Math.log(e+Math.sqrt(e*e+1)):e}})},function(t,e,n){var r=n(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,e,n){var r=n(0),i=n(72);r(r.S,"Math",{cbrt:function(t){return i(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,e,n){var r=n(0),i=Math.exp;r(r.S,"Math",{cosh:function(t){return(i(t=+t)+i(-t))/2}})},function(t,e,n){var r=n(0),i=n(73);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(t,e,n){var r=n(0);r(r.S,"Math",{fround:n(169)})},function(t,e,n){var r=n(72),i=Math.pow,o=i(2,-52),a=i(2,-23),s=i(2,127)*(2-a),u=i(2,-126);t.exports=Math.fround||function(t){var e,n,i=Math.abs(t),c=r(t);return i<u?c*(i/u/a+1/o-1/o)*u*a:(n=(e=(1+a/o)*i)-(e-i))>s||n!=n?c*(1/0):c*n}},function(t,e,n){var r=n(0),i=Math.abs;r(r.S,"Math",{hypot:function(t,e){for(var n,r,o=0,a=0,s=arguments.length,u=0;a<s;)u<(n=i(arguments[a++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(o)}})},function(t,e,n){var r=n(0),i=Math.imul;r(r.S+r.F*n(2)(function(){return-5!=i(4294967295,5)||2!=i.length}),"Math",{imul:function(t,e){var n=+t,r=+e,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,e,n){var r=n(0);r(r.S,"Math",{log1p:n(103)})},function(t,e,n){var r=n(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,e,n){var r=n(0);r(r.S,"Math",{sign:n(72)})},function(t,e,n){var r=n(0),i=n(73),o=Math.exp;r(r.S+r.F*n(2)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(i(t)-i(-t))/2:(o(t-1)-o(-t-1))*(Math.E/2)}})},function(t,e,n){var r=n(0),i=n(73),o=Math.exp;r(r.S,"Math",{tanh:function(t){var e=i(t=+t),n=i(-t);return e==1/0?1:n==1/0?-1:(e-n)/(o(t)+o(-t))}})},function(t,e,n){var r=n(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,e,n){var r=n(0),i=n(32),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var e,n=[],r=arguments.length,a=0;r>a;){if(e=+arguments[a++],i(e,1114111)!==e)throw RangeError(e+" is not a valid code point");n.push(e<65536?o(e):o(55296+((e-=65536)>>10),e%1024+56320))}return n.join("")}})},function(t,e,n){var r=n(0),i=n(15),o=n(6);r(r.S,"String",{raw:function(t){for(var e=i(t.raw),n=o(e.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(e[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},function(t,e,n){"use strict";n(51)("trim",function(t){return function(){return t(this,3)}})},function(t,e,n){"use strict";var r=n(74)(!0);n(75)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(0),i=n(74)(!1);r(r.P,"String",{codePointAt:function(t){return i(this,t)}})},function(t,e,n){"use strict";var r=n(0),i=n(6),o=n(76),a="".endsWith;r(r.P+r.F*n(78)("endsWith"),"String",{endsWith:function(t){var e=o(this,t,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(e.length),s=void 0===n?r:Math.min(i(n),r),u=String(t);return a?a.call(e,u,s):e.slice(s-u.length,s)===u}})},function(t,e,n){"use strict";var r=n(0),i=n(76);r(r.P+r.F*n(78)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,n){var r=n(0);r(r.P,"String",{repeat:n(71)})},function(t,e,n){"use strict";var r=n(0),i=n(6),o=n(76),a="".startsWith;r(r.P+r.F*n(78)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return a?a.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){"use strict";n(12)("anchor",function(t){return function(e){return t(this,"a","name",e)}})},function(t,e,n){"use strict";n(12)("big",function(t){return function(){return t(this,"big","","")}})},function(t,e,n){"use strict";n(12)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,e,n){"use strict";n(12)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,e,n){"use strict";n(12)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,e,n){"use strict";n(12)("fontcolor",function(t){return function(e){return t(this,"font","color",e)}})},function(t,e,n){"use strict";n(12)("fontsize",function(t){return function(e){return t(this,"font","size",e)}})},function(t,e,n){"use strict";n(12)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,e,n){"use strict";n(12)("link",function(t){return function(e){return t(this,"a","href",e)}})},function(t,e,n){"use strict";n(12)("small",function(t){return function(){return t(this,"small","","")}})},function(t,e,n){"use strict";n(12)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,e,n){"use strict";n(12)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,e,n){"use strict";n(12)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,e,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){"use strict";var r=n(0),i=n(11),o=n(26);r(r.P+r.F*n(2)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var e=i(this),n=o(e);return"number"!=typeof n||isFinite(n)?e.toISOString():null}})},function(t,e,n){var r=n(0),i=n(204);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(t,e,n){"use strict";var r=n(2),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))})||!r(function(){o.call(new Date(NaN))})?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var t=this,e=t.getUTCFullYear(),n=t.getUTCMilliseconds(),r=e<0?"-":e>9999?"+":"";return r+("00000"+Math.abs(e)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},function(t,e,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(10)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,e,n){var r=n(5)("toPrimitive"),i=Date.prototype;r in i||n(14)(i,r,n(207))},function(t,e,n){"use strict";var r=n(3),i=n(26);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return i(r(this),"number"!=t)}},function(t,e,n){var r=n(0);r(r.S,"Array",{isArray:n(66)})},function(t,e,n){"use strict";var r=n(21),i=n(0),o=n(11),a=n(105),s=n(79),u=n(6),c=n(80),f=n(81);i(i.S+i.F*!n(52)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,i,l,p=o(t),d="function"==typeof this?this:Array,v=arguments.length,h=v>1?arguments[1]:void 0,m=void 0!==h,g=0,y=f(p);if(m&&(h=r(h,v>2?arguments[2]:void 0,2)),null==y||d==Array&&s(y))for(n=new d(e=u(p.length));e>g;g++)c(n,g,m?h(p[g],g):p[g]);else for(l=y.call(p),n=new d;!(i=l.next()).done;g++)c(n,g,m?a(l,h,[i.value,g],!0):i.value);return n.length=g,n}})},function(t,e,n){"use strict";var r=n(0),i=n(80);r(r.S+r.F*n(2)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,e=arguments.length,n=new("function"==typeof this?this:Array)(e);e>t;)i(n,t,arguments[t++]);return n.length=e,n}})},function(t,e,n){"use strict";var r=n(0),i=n(15),o=[].join;r(r.P+r.F*(n(43)!=Object||!n(16)(o)),"Array",{join:function(t){return o.call(i(this),void 0===t?",":t)}})},function(t,e,n){"use strict";var r=n(0),i=n(67),o=n(23),a=n(32),s=n(6),u=[].slice;r(r.P+r.F*n(2)(function(){i&&u.call(i)}),"Array",{slice:function(t,e){var n=s(this.length),r=o(this);if(e=void 0===e?n:e,"Array"==r)return u.call(this,t,e);for(var i=a(t,n),c=a(e,n),f=s(c-i),l=new Array(f),p=0;p<f;p++)l[p]="String"==r?this.charAt(i+p):this[i+p];return l}})},function(t,e,n){"use strict";var r=n(0),i=n(22),o=n(11),a=n(2),s=[].sort,u=[1,2,3];r(r.P+r.F*(a(function(){u.sort(void 0)})||!a(function(){u.sort(null)})||!n(16)(s)),"Array",{sort:function(t){return void 0===t?s.call(o(this)):s.call(o(this),i(t))}})},function(t,e,n){"use strict";var r=n(0),i=n(20)(0),o=n(16)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,n){var r=n(216);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(4),i=n(66),o=n(5)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){"use strict";var r=n(0),i=n(20)(1);r(r.P+r.F*!n(16)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(20)(2);r(r.P+r.F*!n(16)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(20)(3);r(r.P+r.F*!n(16)([].some,!0),"Array",{some:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(20)(4);r(r.P+r.F*!n(16)([].every,!0),"Array",{every:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(106);r(r.P+r.F*!n(16)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(0),i=n(106);r(r.P+r.F*!n(16)([].reduceRight,!0),"Array",{reduceRight:function(t){return i(this,t,arguments.length,arguments[1],!0)}})},function(t,e,n){"use strict";var r=n(0),i=n(49)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(16)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(0),i=n(15),o=n(17),a=n(6),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(16)(s)),"Array",{lastIndexOf:function(t){if(u)return s.apply(this,arguments)||0;var e=i(this),n=a(e.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in e&&e[r]===t)return r||0;return-1}})},function(t,e,n){var r=n(0);r(r.P,"Array",{copyWithin:n(107)}),n(39)("copyWithin")},function(t,e,n){var r=n(0);r(r.P,"Array",{fill:n(82)}),n(39)("fill")},function(t,e,n){"use strict";var r=n(0),i=n(20)(5),o=!0;"find"in[]&&Array(1).find(function(){o=!1}),r(r.P+r.F*o,"Array",{find:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(39)("find")},function(t,e,n){"use strict";var r=n(0),i=n(20)(6),o="findIndex",a=!0;o in[]&&Array(1)[o](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(39)(o)},function(t,e,n){n(40)("Array")},function(t,e,n){var r=n(1),i=n(70),o=n(7).f,a=n(34).f,s=n(77),u=n(53),c=r.RegExp,f=c,l=c.prototype,p=/a/g,d=/a/g,v=new c(p)!==p;if(n(8)&&(!v||n(2)(function(){return d[n(5)("match")]=!1,c(p)!=p||c(d)==d||"/a/i"!=c(p,"i")}))){c=function(t,e){var n=this instanceof c,r=s(t),o=void 0===e;return!n&&r&&t.constructor===c&&o?t:i(v?new f(r&&!o?t.source:t,e):f((r=t instanceof c)?t.source:t,r&&o?u.call(t):e),n?this:l,c)};for(var h=function(t){t in c||o(c,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},m=a(f),g=0;m.length>g;)h(m[g++]);l.constructor=c,c.prototype=l,n(10)(r,"RegExp",c)}n(40)("RegExp")},function(t,e,n){"use strict";n(110);var r=n(3),i=n(53),o=n(8),a=/./.toString,s=function(t){n(10)(RegExp.prototype,"toString",t,!0)};n(2)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?s(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&s(function(){return a.call(this)})},function(t,e,n){"use strict";var r=n(3),i=n(6),o=n(85),a=n(54);n(55)("match",1,function(t,e,n,s){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=s(n,t,this);if(e.done)return e.value;var u=r(t),c=String(this);if(!u.global)return a(u,c);var f=u.unicode;u.lastIndex=0;for(var l,p=[],d=0;null!==(l=a(u,c));){var v=String(l[0]);p[d]=v,""===v&&(u.lastIndex=o(c,i(u.lastIndex),f)),d++}return 0===d?null:p}]})},function(t,e,n){"use strict";var r=n(3),i=n(11),o=n(6),a=n(17),s=n(85),u=n(54),c=Math.max,f=Math.min,l=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;n(55)("replace",2,function(t,e,n,v){return[function(r,i){var o=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(t,e){var i=v(n,t,this,e);if(i.done)return i.value;var l=r(t),p=String(this),d="function"==typeof e;d||(e=String(e));var m=l.global;if(m){var g=l.unicode;l.lastIndex=0}for(var y=[];;){var b=u(l,p);if(null===b)break;if(y.push(b),!m)break;""===String(b[0])&&(l.lastIndex=s(p,o(l.lastIndex),g))}for(var _,w="",x=0,A=0;A<y.length;A++){b=y[A];for(var S=String(b[0]),C=c(f(a(b.index),p.length),0),E=[],O=1;O<b.length;O++)E.push(void 0===(_=b[O])?_:String(_));var k=b.groups;if(d){var $=[S].concat(E,C,p);void 0!==k&&$.push(k);var T=String(e.apply(void 0,$))}else T=h(S,p,C,E,k,e);C>=x&&(w+=p.slice(x,C)+T,x=C+S.length)}return w+p.slice(x)}];function h(t,e,r,o,a,s){var u=r+t.length,c=o.length,f=d;return void 0!==a&&(a=i(a),f=p),n.call(s,f,function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(u);case"<":s=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return n;if(f>c){var p=l(f/10);return 0===p?n:p<=c?void 0===o[p-1]?i.charAt(1):o[p-1]+i.charAt(1):n}s=o[f-1]}return void 0===s?"":s})}})},function(t,e,n){"use strict";var r=n(3),i=n(96),o=n(54);n(55)("search",1,function(t,e,n,a){return[function(n){var r=t(this),i=null==n?void 0:n[e];return void 0!==i?i.call(n,r):new RegExp(n)[e](String(r))},function(t){var e=a(n,t,this);if(e.done)return e.value;var s=r(t),u=String(this),c=s.lastIndex;i(c,0)||(s.lastIndex=0);var f=o(s,u);return i(s.lastIndex,c)||(s.lastIndex=c),null===f?-1:f.index}]})},function(t,e,n){"use strict";var r=n(77),i=n(3),o=n(46),a=n(85),s=n(6),u=n(54),c=n(84),f=n(2),l=Math.min,p=[].push,d=!f(function(){RegExp(4294967295,"y")});n(55)("split",2,function(t,e,n,f){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var o,a,s,u=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,d=void 0===e?4294967295:e>>>0,v=new RegExp(t.source,f+"g");(o=c.call(v,i))&&!((a=v.lastIndex)>l&&(u.push(i.slice(l,o.index)),o.length>1&&o.index<i.length&&p.apply(u,o.slice(1)),s=o[0].length,l=a,u.length>=d));)v.lastIndex===o.index&&v.lastIndex++;return l===i.length?!s&&v.test("")||u.push(""):u.push(i.slice(l)),u.length>d?u.slice(0,d):u}:"0".split(void 0,0).length?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):v.call(String(i),n,r)},function(t,e){var r=f(v,t,this,e,v!==n);if(r.done)return r.value;var c=i(t),p=String(this),h=o(c,RegExp),m=c.unicode,g=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(d?"y":"g"),y=new h(d?c:"^(?:"+c.source+")",g),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===p.length)return null===u(y,p)?[p]:[];for(var _=0,w=0,x=[];w<p.length;){y.lastIndex=d?w:0;var A,S=u(y,d?p:p.slice(w));if(null===S||(A=l(s(y.lastIndex+(d?0:w)),p.length))===_)w=a(p,w,m);else{if(x.push(p.slice(_,w)),x.length===b)return x;for(var C=1;C<=S.length-1;C++)if(x.push(S[C]),x.length===b)return x;w=_=A}}return x.push(p.slice(_)),x}]})},function(t,e,n){var r=n(1),i=n(86).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==n(23)(a);t.exports=function(){var t,e,n,c=function(){var r,i;for(u&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var f=s.resolve(void 0);n=function(){f.then(c)}}else n=function(){i.call(r,c)};else{var l=!0,p=document.createTextNode("");new o(c).observe(p,{characterData:!0}),n=function(){p.data=l=!l}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){"use strict";var r=n(114),i=n(36);t.exports=n(58)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var e=r.getEntry(i(this,"Map"),t);return e&&e.v},set:function(t,e){return r.def(i(this,"Map"),0===t?0:t,e)}},r,!0)},function(t,e,n){"use strict";var r=n(114),i=n(36);t.exports=n(58)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r,i=n(1),o=n(20)(0),a=n(10),s=n(27),u=n(95),c=n(115),f=n(4),l=n(36),p=n(36),d=!i.ActiveXObject&&"ActiveXObject"in i,v=s.getWeak,h=Object.isExtensible,m=c.ufstore,g=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var e=v(t);return!0===e?m(l(this,"WeakMap")).get(t):e?e[this._i]:void 0}},set:function(t,e){return c.def(l(this,"WeakMap"),t,e)}},b=t.exports=n(58)("WeakMap",g,y,c,!0,!0);p&&d&&(u((r=c.getConstructor(g,"WeakMap")).prototype,y),s.NEED=!0,o(["delete","has","get","set"],function(t){var e=b.prototype,n=e[t];a(e,t,function(e,i){if(f(e)&&!h(e)){this._f||(this._f=new r);var o=this._f[t](e,i);return"set"==t?this:o}return n.call(this,e,i)})}))},function(t,e,n){"use strict";var r=n(115),i=n(36);n(58)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,e,n){"use strict";var r=n(0),i=n(59),o=n(87),a=n(3),s=n(32),u=n(6),c=n(4),f=n(1).ArrayBuffer,l=n(46),p=o.ArrayBuffer,d=o.DataView,v=i.ABV&&f.isView,h=p.prototype.slice,m=i.VIEW;r(r.G+r.W+r.F*(f!==p),{ArrayBuffer:p}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(t){return v&&v(t)||c(t)&&m in t}}),r(r.P+r.U+r.F*n(2)(function(){return!new p(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,e){if(void 0!==h&&void 0===e)return h.call(a(this),t);for(var n=a(this).byteLength,r=s(t,n),i=s(void 0===e?n:e,n),o=new(l(this,p))(u(i-r)),c=new d(this),f=new d(o),v=0;r<i;)f.setUint8(v++,c.getUint8(r++));return o}}),n(40)("ArrayBuffer")},function(t,e,n){var r=n(0);r(r.G+r.W+r.F*!n(59).ABV,{DataView:n(87).DataView})},function(t,e,n){n(25)("Int8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint8",1,function(t){return function(e,n,r){return t(this,e,n,r)}},!0)},function(t,e,n){n(25)("Int16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint16",2,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Int32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Uint32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Float32",4,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){n(25)("Float64",8,function(t){return function(e,n,r){return t(this,e,n,r)}})},function(t,e,n){var r=n(0),i=n(22),o=n(3),a=(n(1).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(2)(function(){a(function(){})}),"Reflect",{apply:function(t,e,n){var r=i(t),u=o(n);return a?a(r,e,u):s.call(r,e,u)}})},function(t,e,n){var r=n(0),i=n(33),o=n(22),a=n(3),s=n(4),u=n(2),c=n(97),f=(n(1).Reflect||{}).construct,l=u(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),p=!u(function(){f(function(){})});r(r.S+r.F*(l||p),"Reflect",{construct:function(t,e){o(t),a(e);var n=arguments.length<3?t:o(arguments[2]);if(p&&!l)return f(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var u=n.prototype,d=i(s(u)?u:Object.prototype),v=Function.apply.call(t,d,e);return s(v)?v:d}})},function(t,e,n){var r=n(7),i=n(0),o=n(3),a=n(26);i(i.S+i.F*n(2)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,e,n){o(t),e=a(e,!0),o(n);try{return r.f(t,e,n),!0}catch(t){return!1}}})},function(t,e,n){var r=n(0),i=n(18).f,o=n(3);r(r.S,"Reflect",{deleteProperty:function(t,e){var n=i(o(t),e);return!(n&&!n.configurable)&&delete t[e]}})},function(t,e,n){"use strict";var r=n(0),i=n(3),o=function(t){this._t=i(t),this._i=0;var e,n=this._k=[];for(e in t)n.push(e)};n(104)(o,"Object",function(){var t,e=this._k;do{if(this._i>=e.length)return{value:void 0,done:!0}}while(!((t=e[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new o(t)}})},function(t,e,n){var r=n(18),i=n(35),o=n(13),a=n(0),s=n(4),u=n(3);a(a.S,"Reflect",{get:function t(e,n){var a,c,f=arguments.length<3?e:arguments[2];return u(e)===f?e[n]:(a=r.f(e,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:s(c=i(e))?t(c,n,f):void 0}})},function(t,e,n){var r=n(18),i=n(0),o=n(3);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(t,e){return r.f(o(t),e)}})},function(t,e,n){var r=n(0),i=n(35),o=n(3);r(r.S,"Reflect",{getPrototypeOf:function(t){return i(o(t))}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{has:function(t,e){return e in t}})},function(t,e,n){var r=n(0),i=n(3),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return i(t),!o||o(t)}})},function(t,e,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(117)})},function(t,e,n){var r=n(0),i=n(3),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){i(t);try{return o&&o(t),!0}catch(t){return!1}}})},function(t,e,n){var r=n(7),i=n(18),o=n(35),a=n(13),s=n(0),u=n(28),c=n(3),f=n(4);s(s.S,"Reflect",{set:function t(e,n,s){var l,p,d=arguments.length<4?e:arguments[3],v=i.f(c(e),n);if(!v){if(f(p=o(e)))return t(p,n,s,d);v=u(0)}if(a(v,"value")){if(!1===v.writable||!f(d))return!1;if(l=i.f(d,n)){if(l.get||l.set||!1===l.writable)return!1;l.value=s,r.f(d,n,l)}else r.f(d,n,u(0,s));return!0}return void 0!==v.set&&(v.set.call(d,s),!0)}})},function(t,e,n){var r=n(0),i=n(68);i&&r(r.S,"Reflect",{setPrototypeOf:function(t,e){i.check(t,e);try{return i.set(t,e),!0}catch(t){return!1}}})},function(t,e,n){n(268),t.exports=n(9).Array.includes},function(t,e,n){"use strict";var r=n(0),i=n(49)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(39)("includes")},function(t,e,n){n(270),t.exports=n(9).String.padStart},function(t,e,n){"use strict";var r=n(0),i=n(118),o=n(57),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padStart:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,e,n){n(272),t.exports=n(9).String.padEnd},function(t,e,n){"use strict";var r=n(0),i=n(118),o=n(57),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padEnd:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,e,n){n(274),t.exports=n(63).f("asyncIterator")},function(t,e,n){n(91)("asyncIterator")},function(t,e,n){n(276),t.exports=n(9).Object.getOwnPropertyDescriptors},function(t,e,n){var r=n(0),i=n(117),o=n(15),a=n(18),s=n(80);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var e,n,r=o(t),u=a.f,c=i(r),f={},l=0;c.length>l;)void 0!==(n=u(r,e=c[l++]))&&s(f,e,n);return f}})},function(t,e,n){n(278),t.exports=n(9).Object.values},function(t,e,n){var r=n(0),i=n(119)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,e,n){n(280),t.exports=n(9).Object.entries},function(t,e,n){var r=n(0),i=n(119)(!0);r(r.S,"Object",{entries:function(t){return i(t)}})},function(t,e,n){"use strict";n(111),n(282),t.exports=n(9).Promise.finally},function(t,e,n){"use strict";var r=n(0),i=n(9),o=n(1),a=n(46),s=n(113);r(r.P+r.R,"Promise",{finally:function(t){var e=a(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return s(e,t()).then(function(){return n})}:t,n?function(n){return s(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){n(284),n(285),n(286),t.exports=n(9)},function(t,e,n){var r=n(1),i=n(0),o=n(57),a=[].slice,s=/MSIE .\./.test(o),u=function(t){return function(e,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof e?e:Function(e)).apply(this,i)}:e,n)}};i(i.G+i.B+i.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(t,e,n){var r=n(0),i=n(86);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,n){for(var r=n(83),i=n(31),o=n(10),a=n(1),s=n(14),u=n(38),c=n(5),f=c("iterator"),l=c("toStringTag"),p=u.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(d),h=0;h<v.length;h++){var m,g=v[h],y=d[g],b=a[g],_=b&&b.prototype;if(_&&(_[f]||s(_,f,p),_[l]||s(_,l,g),u[g]=p,y))for(m in r)_[m]||o(_,m,r[m],!0)}},function(t,e){!function(e){"use strict";var n,r=Object.prototype,i=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",c="object"==typeof t,f=e.regeneratorRuntime;if(f)c&&(t.exports=f);else{(f=e.regeneratorRuntime=c?t.exports:{}).wrap=_;var l="suspendedStart",p="suspendedYield",d="executing",v="completed",h={},m={};m[a]=function(){return this};var g=Object.getPrototypeOf,y=g&&g(g(M([])));y&&y!==r&&i.call(y,a)&&(m=y);var b=S.prototype=x.prototype=Object.create(m);A.prototype=b.constructor=S,S.constructor=A,S[u]=A.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},C(E.prototype),E.prototype[s]=function(){return this},f.AsyncIterator=E,f.async=function(t,e,n,r){var i=new E(_(t,e,n,r));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},C(b),b[u]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},f.values=M,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach($),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(r,i){return s.type="throw",s.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),$(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;$(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:M(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),h}}}function _(t,e,n,r){var i=e&&e.prototype instanceof x?e:x,o=Object.create(i.prototype),a=new T(r||[]);return o._invoke=function(t,e,n){var r=l;return function(i,o){if(r===d)throw new Error("Generator is already running");if(r===v){if("throw"===i)throw o;return I()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=O(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===l)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var u=w(t,e,n);if("normal"===u.type){if(r=n.done?v:p,u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=v,n.method="throw",n.arg=u.arg)}}}(t,n,a),o}function w(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function x(){}function A(){}function S(){}function C(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function E(t){var e;this._invoke=function(n,r){function o(){return new Promise(function(e,o){!function e(n,r,o,a){var s=w(t[n],t,r);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,o,a)},function(t){e("throw",t,o,a)}):Promise.resolve(c).then(function(t){u.value=t,o(u)},function(t){return e("throw",t,o,a)})}a(s.arg)}(n,r,e,o)})}return e=e?e.then(o,o):o()}}function O(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,O(t,e),"throw"===e.method))return h;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var i=w(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,h;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,h):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function $(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function M(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(i.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,e,n){"use strict";var r=n(60);n.n(r).a},function(t,e,n){(t.exports=n(88)(!0)).push([t.i,'form {\n  align-self: center;\n  padding: 0 1em 1em 1em;\n}\nform [type="search"] {\n    border: none;\n    line-height: 24pt;\n    border-radius: 0.5em;\n    padding: 0 0.5em;\n}\nform [type="submit"] {\n    background: slategrey;\n    border: 1px solid transparent;\n    border-radius: 0.5em;\n    font-size: 1.1em;\n    font-weight: 700;\n    color: white;\n    cursor: pointer;\n    padding: 0.5em;\n}\nform [type="submit"]:hover {\n      border: 1px solid white;\n}\n',"",{version:3,sources:["/home/toto/Documents/web/odin-project/javascript/weather-js/src/app/app-components/search-form.vue?vue&type=style&index=0&lang=scss&"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,sBAAsB;AACxB;AACA;IACI,YAAY;IACZ,iBAAiB;IACjB,oBAAoB;IACpB,gBAAgB;AACpB;AACA;IACI,qBAAqB;IACrB,6BAA6B;IAC7B,oBAAoB;IACpB,gBAAgB;IAChB,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,cAAc;AAClB;AACA;MACM,uBAAuB;AAC7B",file:"search-form.vue?vue&type=style&index=0&lang=scss&",sourcesContent:['form {\n  align-self: center;\n  padding: 0 1em 1em 1em;\n}\nform [type="search"] {\n    border: none;\n    line-height: 24pt;\n    border-radius: 0.5em;\n    padding: 0 0.5em;\n}\nform [type="submit"] {\n    background: slategrey;\n    border: 1px solid transparent;\n    border-radius: 0.5em;\n    font-size: 1.1em;\n    font-weight: 700;\n    color: white;\n    cursor: pointer;\n    padding: 0.5em;\n}\nform [type="submit"]:hover {\n      border: 1px solid white;\n}\n'],sourceRoot:""}])},function(t,e,n){"use strict";var r=n(61);n.n(r).a},function(t,e,n){(t.exports=n(88)(!0)).push([t.i,"#report {\n  display: grid;\n  grid-gap: 2em;\n  place-content: center;\n  padding: 1em;\n}\n#report h1 {\n    text-align: center;\n}\nmain {\n  display: flex;\n  justify-content: space-evenly;\n  font-weight: 700;\n}\n#temp {\n  font-size: 3em;\n}\n#weather {\n  text-align: center;\n  margin: auto 0;\n}\n#weather-description {\n  font-weight: 400;\n  font-style: italic;\n}\n.more-info {\n  display: flex;\n  text-align: justify;\n}\n.info {\n  padding: 0 1em;\n}\n","",{version:3,sources:["/home/toto/Documents/web/odin-project/javascript/weather-js/src/app/app-components/report.vue?vue&type=style&index=0&lang=scss&"],names:[],mappings:"AAAA;EACE,aAAa;EACb,aAAa;EACb,qBAAqB;EACrB,YAAY;AACd;AACA;IACI,kBAAkB;AACtB;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB;AACA;EACE,kBAAkB;EAClB,cAAc;AAChB;AACA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,cAAc;AAChB",file:"report.vue?vue&type=style&index=0&lang=scss&",sourcesContent:["#report {\n  display: grid;\n  grid-gap: 2em;\n  place-content: center;\n  padding: 1em;\n}\n#report h1 {\n    text-align: center;\n}\nmain {\n  display: flex;\n  justify-content: space-evenly;\n  font-weight: 700;\n}\n#temp {\n  font-size: 3em;\n}\n#weather {\n  text-align: center;\n  margin: auto 0;\n}\n#weather-description {\n  font-weight: 400;\n  font-style: italic;\n}\n.more-info {\n  display: flex;\n  text-align: justify;\n}\n.info {\n  padding: 0 1em;\n}\n"],sourceRoot:""}])},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(293),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(47))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,i,o,a,s,u=1,c={},f=!1,l=t.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(t);p=p&&p.setTimeout?p:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick(function(){v(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){v(t.data)},r=function(t){o.port2.postMessage(t)}):l&&"onreadystatechange"in l.createElement("script")?(i=l.documentElement,r=function(t){var e=l.createElement("script");e.onreadystatechange=function(){v(t),e.onreadystatechange=null,i.removeChild(e),e=null},i.appendChild(e)}):r=function(t){setTimeout(v,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&v(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),p.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var i={callback:t,args:e};return c[u]=i,r(u),u++},p.clearImmediate=d}function d(t){delete c[t]}function v(t){if(f)setTimeout(v,0,t);else{var e=c[t];if(e){f=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),f=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(47),n(294))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&d())}function d(){if(!f){var t=s(p);f=!0;for(var e=c.length;e;){for(u=c,c=[];++l<e;)u&&u[l].run();l=-1,e=c.length}u=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function v(t,e){this.fun=t,this.array=e}function h(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new v(t,e)),1!==c.length||f||s(d)},v.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(296);"string"==typeof r&&(r=[[t.i,r,""]]),r.locals&&(t.exports=r.locals);(0,n(89).default)("1b96dff4",r,!1,{})},function(t,e,n){(e=t.exports=n(88)(!0)).push([t.i,"@import url(https://fonts.googleapis.com/css?family=Nunito:400,400i,700);",""]),e.push([t.i,"* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0; }\n\nbody {\n  background: lightgrey;\n  font-family: 'Nunito', Arial, Helvetica, sans-serif;\n  color: white; }\n\n.wrapper {\n  display: grid;\n  place-content: center;\n  height: 100%;\n  width: 100%; }\n\n#app {\n  display: grid;\n  place-items: center;\n  background: slategrey;\n  min-width: 500px;\n  min-height: 125px; }\n","",{version:3,sources:["/home/toto/Documents/web/odin-project/javascript/weather-js/src/main.scss"],names:[],mappings:"AACA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU,EAAE;;AAEd;EACE,qBAAqB;EACrB,mDAAmD;EACnD,YAAY,EAAE;;AAEhB;EACE,aAAa;EACb,qBAAqB;EACrB,YAAY;EACZ,WAAW,EAAE;;AAEf;EACE,aAAa;EACb,mBAAmB;EACnB,qBAAqB;EACrB,gBAAgB;EAChB,iBAAiB,EAAE",file:"main.scss",sourcesContent:["@import url(\"https://fonts.googleapis.com/css?family=Nunito:400,400i,700\");\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0; }\n\nbody {\n  background: lightgrey;\n  font-family: 'Nunito', Arial, Helvetica, sans-serif;\n  color: white; }\n\n.wrapper {\n  display: grid;\n  place-content: center;\n  height: 100%;\n  width: 100%; }\n\n#app {\n  display: grid;\n  place-items: center;\n  background: slategrey;\n  min-width: 500px;\n  min-height: 125px; }\n"],sourceRoot:""}])},function(t,e,n){"use strict";n.r(e);var r=n(120),i=n.n(r),o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("form",{on:{submit:function(e){e.preventDefault(),t.$emit("new-report",t.getReport(t.city))}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:t.city,expression:"city"}],attrs:{type:"search",placeholder:"Example: 'Trondheim'"},domProps:{value:t.city},on:{input:function(e){e.target.composing||(t.city=e.target.value)}}}),t._v(" "),n("input",{attrs:{type:"submit",value:"Go!"}})])};function a(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}function s(t){return function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function s(t){a(o,r,i,s,u,"next",t)}function u(t){a(o,r,i,s,u,"throw",t)}s(void 0)})}}o._withStripped=!0;var u={props:{appId:String,loadingReport:Boolean},data:function(){return{city:""}},methods:{getRawReport:function(){var t=s(regeneratorRuntime.mark(function t(e){var n,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,fetch("https://api.openweathermap.org/data/2.5/weather?q=".concat(e,"&units=metric&APPID=").concat(this.appId));case 3:return n=t.sent,t.next=6,n.json();case 6:return r=t.sent,t.abrupt("return",r);case 10:t.prev=10,t.t0=t.catch(0),alert("Sorry there was an error: ".concat(t.t0.code,": ").concat(t.t0.message));case 13:case"end":return t.stop()}},t,this,[[0,10]])}));return function(e){return t.apply(this,arguments)}}(),cleanRawReport:function(t){return{city:t.name,country:t.sys.country,humidity:t.main.humidity,pressure:t.main.pressure,temp:Math.floor(t.main.temp),weather:{description:t.weather[0].description,main:t.weather[0].main},wind:{direction:t.wind.deg,speed:t.wind.speed}}},getReport:function(){var t=s(regeneratorRuntime.mark(function t(e){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.$emit("toggle-loading"),t.prev=1,t.next=4,this.getRawReport(e);case 4:return n=t.sent,t.abrupt("return",this.cleanRawReport(n));case 8:t.prev=8,t.t0=t.catch(1),alert("Sorry there was an error on: ".concat(t.t0.code,": ").concat(t.t0.message));case 11:return t.prev=11,this.city="",this.$emit("toggle-loading"),t.finish(11);case 15:case"end":return t.stop()}},t,this,[[1,8,11,15]])}));return function(e){return t.apply(this,arguments)}}()}};n(288);function c(t,e,n,r,i,o,a,s){var u,c="function"==typeof t?t.options:t;if(e&&(c.render=e,c.staticRenderFns=n,c._compiled=!0),r&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),a?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},c._ssrRegister=u):i&&(u=s?function(){i.call(this,this.$root.$options.shadowRoot)}:i),u)if(c.functional){c._injectStyles=u;var f=c.render;c.render=function(t,e){return u.call(e),f(t,e)}}else{var l=c.beforeCreate;c.beforeCreate=l?[].concat(l,u):[u]}return{exports:t,options:c}}var f=c(u,o,[],!1,null,null,null);f.options.__file="src/app/app-components/search-form.vue";var l=f.exports,p=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"report"}},[t.loading?n("div",[n("h1",[t._v("loading...")])]):t.isEmpty(t.info)?n("div",[n("h1",[t._v("Look for a city")])]):n("div",[n("h1",[t._v(t._s(t.title))]),t._v(" "),n("main",[n("div",{attrs:{id:"temp"}},[t._v(t._s(t.info.temp)+"°")]),t._v(" "),n("div",{attrs:{id:"weather"}},[n("p",{attrs:{id:"weather-main"}},[t._v(t._s(t.info.weather.main))]),t._v(" "),n("p",{attrs:{id:"weather-description"}},[t._v(t._s(t.info.weather.description))])])]),t._v(" "),n("section",{staticClass:"more-info"},[n("div",{staticClass:"info"},[n("h2",{staticClass:"info-title"},[t._v("Humidity:")]),t._v(" "),n("p",[t._v(t._s(t.info.humidity)+"%")])]),t._v(" "),n("div",{staticClass:"info"},[n("h2",{staticClass:"info-title"},[t._v("Pressure:")]),t._v(" "),n("p",[t._v(t._s(t.info.pressure)+" hpa")])]),t._v(" "),n("div",{staticClass:"info"},[n("h2",{staticClass:"info-title"},[t._v("Wind:")]),t._v(" "),n("p",[t._v(t._s(t.info.wind.speed)+" m/s")])])])])])};p._withStripped=!0;var d={props:{info:Object,loading:Boolean},methods:{isEmpty:function(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}},computed:{title:function(){return"".concat(this.info.city,", ").concat(this.info.country)},wind:function(){return"".concat(this.info.wind.speed," m/s - ").concat(this.info.wind.direction,"°")}}},v=(n(290),c(d,p,[],!1,null,null,null));v.options.__file="src/app/app-components/report.vue";var h=v.exports;function m(t,e,n,r,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,i)}new i.a({el:"#app",components:{searchForm:l,report:h},data:{report:{},loadingReport:!1,appId:"4ab32346d3eb123f343e0e23060ff597"},methods:{saveReport:function(){var t,e=(t=regeneratorRuntime.mark(function t(e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e;case 2:this.report=t.sent;case 3:case"end":return t.stop()}},t,this)}),function(){var e=this,n=arguments;return new Promise(function(r,i){var o=t.apply(e,n);function a(t){m(o,r,i,a,s,"next",t)}function s(t){m(o,r,i,a,s,"throw",t)}a(void 0)})});return function(t){return e.apply(this,arguments)}}(),onToggleLoading:function(){this.loadingReport=!this.loadingReport}}}),n(295)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvc2VhcmNoLWZvcm0udnVlPzE2MzEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9hcHAtY29tcG9uZW50cy9yZXBvcnQudnVlPzhlNDciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NhbWUtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcHJvbWlzZS9maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9wb2x5ZmlsbC9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvc2VhcmNoLWZvcm0udnVlPzBkNDUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9hcHAtY29tcG9uZW50cy9zZWFyY2gtZm9ybS52dWU/MmQzNCIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2FwcC1jb21wb25lbnRzL3JlcG9ydC52dWU/MGRlNSIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2FwcC1jb21wb25lbnRzL3JlcG9ydC52dWU/NmExOCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluLnNjc3M/YjcyMSIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5zY3NzIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvc2VhcmNoLWZvcm0udnVlPzdlZmEiLCJ3ZWJwYWNrOi8vL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvc2VhcmNoLWZvcm0udnVlIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvc2VhcmNoLWZvcm0udnVlPzgyYTIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2FwcC1jb21wb25lbnRzL3NlYXJjaC1mb3JtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2FwcC1jb21wb25lbnRzL3JlcG9ydC52dWU/NmEwNiIsIndlYnBhY2s6Ly8vc3JjL2FwcC9hcHAtY29tcG9uZW50cy9yZXBvcnQudnVlIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvcmVwb3J0LnZ1ZT8yMzg3Iiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLWNvbXBvbmVudHMvcmVwb3J0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3dlYXRoZXIuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJ3aW5kb3ciLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJlIiwiaXNPYmplY3QiLCJpdCIsIlR5cGVFcnJvciIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsInRvSW50ZWdlciIsIm1pbiIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiYSIsInZlcnNpb24iLCJfX2UiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZGVmaW5lZCIsImZhaWxzIiwicXVvdCIsImNyZWF0ZUhUTUwiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJwMSIsInJlcGxhY2UiLCJOQU1FIiwidGVzdCIsInRvTG93ZXJDYXNlIiwibGVuZ3RoIiwiY3JlYXRlRGVzYyIsIklPYmplY3QiLCJtZXRob2QiLCJhcmciLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInBJRSIsInRvSU9iamVjdCIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJLRVkiLCJmbiIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwiY2FsbGJhY2tmbiIsInRoYXQiLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsInB1c2giLCJhRnVuY3Rpb24iLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ0b1N0cmluZyIsInNsaWNlIiwiTElCUkFSWSIsIiR0eXBlZCIsIiRidWZmZXIiLCJhbkluc3RhbmNlIiwicHJvcGVydHlEZXNjIiwicmVkZWZpbmVBbGwiLCJ0b0luZGV4IiwidG9BYnNvbHV0ZUluZGV4IiwiY2xhc3NvZiIsImlzQXJyYXlJdGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJzcmMiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsImNvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwiZGF0YSIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCJjb25jYXQiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsInZhbHVlT2YiLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImJpdG1hcCIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsIm1heCIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsImNvbnRlbnRXaW5kb3ciLCJkb2N1bWVudCIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJPYmplY3RQcm90byIsIl90IiwiZGVmIiwic3RhdCIsIlVOU0NPUEFCTEVTIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiQ29uc3RydWN0b3IiLCJmb3JiaWRkZW5GaWVsZCIsImNvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsIkQiLCJnIiwiY29weXJpZ2h0IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsInJlIiwiZ3JvdXBzIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsIm5hdGl2ZVJlZ0V4cE1ldGhvZCIsImZucyIsIm5hdGl2ZU1ldGhvZCIsInJlZ2V4cCIsInN0ciIsImFyZzIiLCJmb3JjZVN0cmluZ01ldGhvZCIsInN0cmZuIiwicnhmbiIsIkJSRUFLIiwiUkVUVVJOIiwiaXRlcmFibGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiY29udGVudCIsImxvY2FscyIsImFkZCIsImRlZmF1bHQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJzaGFyZWQiLCJpc0FycmF5IiwiZG9jdW1lbnRFbGVtZW50IiwiY2hlY2siLCJzZXRQcm90b3R5cGVPZiIsImJ1Z2d5IiwiX19wcm90b19fIiwiY291bnQiLCJJbmZpbml0eSIsInNpZ24iLCJ4IiwiJGV4cG0xIiwiZXhwbTEiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJpc1JlZ0V4cCIsInNlYXJjaFN0cmluZyIsIk1BVENIIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJldmVudCIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsInVzZVNvdXJjZU1hcCIsIml0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsaXN0VG9TdHlsZXMiLCJwYXJlbnRJZCIsInN0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJjc3MiLCJtZWRpYSIsInBhcnRzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImFkZFN0eWxlc0NsaWVudCIsImhhc0RvY3VtZW50IiwiREVCVUciLCJFcnJvciIsInN0eWxlc0luRG9tIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2luZ2xldG9uRWxlbWVudCIsInNpbmdsZXRvbkNvdW50ZXIiLCJpc1Byb2R1Y3Rpb24iLCJub29wIiwib3B0aW9ucyIsInNzcklkS2V5IiwiaXNPbGRJRSIsIl9pc1Byb2R1Y3Rpb24iLCJfb3B0aW9ucyIsImFkZFN0eWxlc1RvRG9tIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsImRvbVN0eWxlIiwicmVmcyIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50Iiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicXVlcnlTZWxlY3RvciIsInBhcmVudE5vZGUiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInNldEF0dHJpYnV0ZSIsInNzcklkIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwid2tzRXh0IiwiJFN5bWJvbCIsIm5hbWVzIiwiZ2V0S2V5cyIsImRlZmluZVByb3BlcnRpZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZ09QUyIsIiRhc3NpZ24iLCJhc3NpZ24iLCJBIiwiSyIsImsiLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwieSIsImZhY3RvcmllcyIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25zdHJ1Y3QiLCJ1biIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsImhleCIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwibXNnIiwiaXNGaW5pdGUiLCJsb2cxcCIsImRlc2NyaXB0b3IiLCJyZXQiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZm9yY2VkIiwiZmxhZ3MiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsInRhc2siLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwicHJvbWlzZSIsInJlc29sdmUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInRoZW4iLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0IiwiZG9tYWluIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiZXJyb3IiLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJlcnIiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsIlByb21pc2UiLCJjYXBhYmlsaXR5IiwiJCRyZWplY3QiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJnZXRFbnRyeSIsImVudHJ5IiwiX2YiLCJfbCIsImRlbGV0ZSIsInByZXYiLCIkaGFzIiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsIlVuY2F1Z2h0RnJvemVuU3RvcmUiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCJzcGxpY2UiLCJ1ZnN0b3JlIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwiZmFjdG9yeSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1BsYWluT2JqZWN0IiwiaXNWYWxpZEFycmF5SW5kZXgiLCJpc1Byb21pc2UiLCJ0b051bWJlciIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwiaXNCdWlsdEluVGFnIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsImhhc093biIsImNhY2hlZCIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiXyIsInRvVXBwZXJDYXNlIiwiY2FwaXRhbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiYm91bmRGbiIsIl9sZW5ndGgiLCJ0b0FycmF5IiwiZXh0ZW5kIiwiX2Zyb20iLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJEYXRlIiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlTGV0dGVycyIsImlzUmVzZXJ2ZWQiLCJfaXNTZXJ2ZXIiLCJiYWlsUkUiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlNldCIsIndhcm4iLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjbGFzc2lmeVJFIiwidm0iLCJ0cmFjZSIsImluY2x1ZGVGaWxlIiwiJHJvb3QiLCJjaWQiLCJfaXNWdWUiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwiJHBhcmVudCIsInRyZWUiLCJjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UiLCJsYXN0IiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29udGV4dCIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRJbnN0YW5jZSIsInBhcmVudCIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJjaGlsZCIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm9yaWdpbmFsIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJvYnNlcnZlIiwiYXNSb290RGF0YSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsImRlbCIsIml0ZW1zIiwic3RyYXRzIiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwiaW5zdGFuY2VEYXRhIiwiZGVmYXVsdERhdGEiLCJtZXJnZUhvb2siLCJob29rcyIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJhc3NlcnRPYmplY3RUeXBlIiwicHJvcHNEYXRhIiwiZGVmYXVsdFN0cmF0IiwiaG9vayIsImtleSQxIiwicHJvcHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJtZXJnZU9wdGlvbnMiLCJjb21wb25lbnRzIiwiY2hlY2tDb21wb25lbnRzIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsInJlcXVpcmVkIiwidmFsaWQiLCJleHBlY3RlZFR5cGVzIiwiYXNzZXJ0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsImV4cGVjdGVkVHlwZSIsIm1lc3NhZ2UiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJlbGVtIiwiaXNCb29sZWFuIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwidmFsaWRhdG9yIiwiYXNzZXJ0UHJvcCIsInNpbXBsZUNoZWNrUkUiLCJpc1NhbWVUeXBlIiwiTnVtYmVyIiwiaGFuZGxlRXJyb3IiLCJpbmZvIiwiY3VyIiwiZXJyb3JDYXB0dXJlZCIsImdsb2JhbEhhbmRsZUVycm9yIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJsb2dFcnJvciIsInRpbWVyRnVuYyIsIm1hcmsiLCJtZWFzdXJlIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsImNiIiwiX3Jlc29sdmUiLCJpbml0UHJveHkiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNhcHR1cmUiLCJjcmVhdGVGbkludm9rZXIiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJuZXN0ZWRJbmRleCIsImlzVGV4dE5vZGUiLCJzaGlmdCIsIl9pc1ZMaXN0IiwicmVzb2x2ZUluamVjdCIsInByb3ZpZGVLZXkiLCJfcHJvdmlkZWQiLCJwcm92aWRlRGVmYXVsdCIsInJlc29sdmVTbG90cyIsInNsb3RzIiwiYXR0cnMiLCJzbG90IiwibmFtZSQxIiwiaXNXaGl0ZXNwYWNlIiwibm9ybWFsaXplU2NvcGVkU2xvdHMiLCJub3JtYWxTbG90cyIsInByZXZTbG90cyIsImlzU3RhYmxlIiwiJHN0YWJsZSIsIiRrZXkiLCJfbm9ybWFsaXplZCIsIm5vcm1hbGl6ZVNjb3BlZFNsb3QiLCJrZXkkMiIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsInN0YXRpY1JlbmRlckZucyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX3EiLCJfbSIsIl9lIiwiX3UiLCJfZyIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJ0aGlzJDEiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJsaXN0ZW5lcnMiLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJyZW5kZXJDb250ZXh0IiwiY2xvbmUiLCJkZXZ0b29sc01ldGEiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImluaXQiLCJoeWRyYXRpbmciLCJfaXNEZXN0cm95ZWQiLCJrZWVwQWxpdmUiLCJtb3VudGVkTm9kZSIsInByZXBhdGNoIiwiX2lzQ29tcG9uZW50IiwiX3BhcmVudFZub2RlIiwiaW5saW5lVGVtcGxhdGUiLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQiLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiX3JlbmRlckNoaWxkcmVuIiwiJHZub2RlIiwiX3Zub2RlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwib2xkTGlzdGVuZXJzIiwiX3BhcmVudExpc3RlbmVycyIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCIkY2hpbGRyZW4iLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJvd25lciIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsIm93bmVycyIsInN5bmMiLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsImVuc3VyZUN0b3IiLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwiY2FsbGJhY2siLCJ0cmFuc2Zvcm1Nb2RlbCIsImtleUluTG93ZXJDYXNlIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImZ1bmN0aW9uYWwiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJmMSIsImYyIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwicHJlIiwiYXBwbHlOUyIsImZvcmNlIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiY29tcCIsImJhc2UiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiJG9uIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJfaGFzSG9va0V2ZW50IiwiJGVtaXQiLCJNQVhfVVBEQVRFX0NPVU5UIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsInVzZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cHJlc3Npb24iLCJwYXRoIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiaHlwaGVuYXRlZEtleSIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiX2RhdGEiLCJnZXREYXRhIiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwiaW5pdENvbXB1dGVkIiwiY3JlYXRlV2F0Y2hlciIsImluaXRXYXRjaCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiVnVlIiwiX2luaXQiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIkNvbXAiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwibWl4aW4iLCJ1c2UiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsImNhY2hlZCQkMSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiX25hbWUiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaSQxIiwiY2JzIiwibG93ZXJDYXNlRXZlbnQiLCJldmVudHNNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwibGlmZWN5Y2xlTWl4aW4iLCIkbmV4dFRpY2siLCJfcmVuZGVyIiwicmVmIiwicmVuZGVyRXJyb3IiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsImJ1aWx0SW5Db21wb25lbnRzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsIm9ic2VydmFibGUiLCJwbHVnaW4iLCJpbnN0YWxsZWRQbHVnaW5zIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJ1bnNoaWZ0IiwiaW5zdGFsbCIsImluaXRVc2UiLCJpbml0TWl4aW4kMSIsImRlZmluaXRpb24iLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwic3NyQ29udGV4dCIsImFjY2VwdFZhbHVlIiwiYXR0ciIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwiaXNGYWxzeUF0dHJWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImdlbkNsYXNzRm9yVm5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInN0YXRpY0NsYXNzIiwiZHluYW1pY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJyZW5kZXJDbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwicXVlcnkiLCJzZWxlY3RlZCIsIm5vZGVPcHMiLCJ0YWdOYW1lIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJuYW1lc3BhY2UiLCJjcmVhdGVDb21tZW50IiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGRBcmciLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwiYmFzZVNldEF0dHIiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsIndhcm4kMSIsInZhbGlkRGl2aXNpb25DaGFyUkUiLCJwYXJzZUZpbHRlcnMiLCJmaWx0ZXJzIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInB1c2hGaWx0ZXIiLCJ3cmFwRmlsdGVyIiwiYmFzZVdhcm4iLCJyYW5nZSIsInBsdWNrTW9kdWxlRnVuY3Rpb24iLCJhZGRQcm9wIiwiZHluYW1pYyIsInJhbmdlU2V0SXRlbSIsInBsYWluIiwiYWRkQXR0ciIsImR5bmFtaWNBdHRycyIsImFkZFJhd0F0dHIiLCJhdHRyc01hcCIsImF0dHJzTGlzdCIsImFkZERpcmVjdGl2ZSIsImlzRHluYW1pY0FyZyIsInByZXBlbmRNb2RpZmllck1hcmtlciIsImFkZEhhbmRsZXIiLCJpbXBvcnRhbnQiLCJldmVudHMiLCJwcmV2ZW50IiwicmlnaHQiLCJuYXRpdmUiLCJuYXRpdmVFdmVudHMiLCJuZXdIYW5kbGVyIiwiZ2V0UmF3QmluZGluZ0F0dHIiLCJyYXdBdHRyc01hcCIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwicmVtb3ZlRnJvbU1hcCIsImdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IiwiZ2VuQ29tcG9uZW50TW9kZWwiLCJ2YWx1ZUV4cHJlc3Npb24iLCJhc3NpZ25tZW50IiwiZ2VuQXNzaWdubWVudENvZGUiLCJlb2YiLCJpc1N0cmluZ1N0YXJ0IiwicGFyc2VTdHJpbmciLCJwYXJzZUJyYWNrZXQiLCJwYXJzZU1vZGVsIiwiaW5CcmFja2V0Iiwic3RyaW5nUXVvdGUiLCJ0YXJnZXQkMSIsIlJBTkdFX1RPS0VOIiwiQ0hFQ0tCT1hfUkFESU9fVE9LRU4iLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsInN2Z0NvbnRhaW5lciIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImlubmVySFRNTCIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwibm90SW5Gb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJlbXB0eVN0eWxlIiwiY3NzVmFyUkUiLCJpbXBvcnRhbnRSRSIsInNldFByb3AiLCJzZXRQcm9wZXJ0eSIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwiYWN0aXZhdGUiLCJyZWFjdGl2YXRlQ29tcG9uZW50Iiwic2V0U2NvcGUiLCJjcmVhdGVDaGlsZHJlbiIsImludm9rZUNyZWF0ZUhvb2tzIiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwicmVmJCQxIiwiY2hlY2tEdXBsaWNhdGVLZXlzIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwicmVtb3ZlVm5vZGVzIiwiY2giLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwic2VlbktleXMiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiYmluZGluZyIsIl92T3B0aW9ucyIsInNldFNlbGVjdGVkIiwiZ2V0VmFsdWUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwicHJldk9wdGlvbnMiLCJjdXJPcHRpb25zIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsInVuYmluZCIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJoIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJjYWxsUGVuZGluZ0NicyIsIl9tb3ZlQ2IiLCJyZWNvcmRQb3NpdGlvbiIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFwcGx5VHJhbnNsYXRpb24iLCJvbGRQb3MiLCJkeCIsImR5IiwidG9wIiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiX3JlZmxvdyIsImJvZHkiLCJvZmZzZXRIZWlnaHQiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwidGVtcGxhdGUiLCJtb3VudENvbXBvbmVudCIsImRlZmF1bHRUYWdSRSIsInJlZ2V4RXNjYXBlUkUiLCJidWlsZFJlZ2V4IiwiZGVsaW1pdGVycyIsInBhcnNlVGV4dCIsInRhZ1JFIiwidG9rZW5WYWx1ZSIsInRva2VucyIsInJhd1Rva2VucyIsIkBiaW5kaW5nIiwiZGVjb2RlciIsImtsYXNzJDEiLCJzdGF0aWNLZXlzIiwidHJhbnNmb3JtTm9kZSIsImNsYXNzQmluZGluZyIsImdlbkRhdGEiLCJzdHlsZSQxIiwic3R5bGVCaW5kaW5nIiwiaGUiLCJpc1VuYXJ5VGFnIiwiY2FuQmVMZWZ0T3BlblRhZyIsImlzTm9uUGhyYXNpbmdUYWciLCJkeW5hbWljQXJnQXR0cmlidXRlIiwibmNuYW1lIiwicW5hbWVDYXB0dXJlIiwic3RhcnRUYWdPcGVuIiwic3RhcnRUYWdDbG9zZSIsImRvY3R5cGUiLCJjb21tZW50IiwiY29uZGl0aW9uYWxDb21tZW50IiwiaXNQbGFpblRleHRFbGVtZW50IiwicmVDYWNoZSIsImRlY29kaW5nTWFwIiwiJmx0OyIsIiZndDsiLCImcXVvdDsiLCImYW1wOyIsIiYjMTA7IiwiJiM5OyIsIiYjMzk7IiwiZW5jb2RlZEF0dHIiLCJlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyIsImlzSWdub3JlTmV3bGluZVRhZyIsInNob3VsZElnbm9yZUZpcnN0TmV3bGluZSIsImRlY29kZUF0dHIiLCJzaG91bGREZWNvZGVOZXdsaW5lcyIsIndhcm4kMiIsInRyYW5zZm9ybXMiLCJwcmVUcmFuc2Zvcm1zIiwicG9zdFRyYW5zZm9ybXMiLCJwbGF0Zm9ybUlzUHJlVGFnIiwicGxhdGZvcm1NdXN0VXNlUHJvcCIsInBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlIiwibWF5YmVDb21wb25lbnQiLCJvblJFIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJkeW5hbWljQXJnUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJzbG90UkUiLCJsaW5lQnJlYWtSRSIsIndoaXRlc3BhY2VSRSQxIiwiaW52YWxpZEF0dHJpYnV0ZVJFIiwiZGVjb2RlSFRNTENhY2hlZCIsImVtcHR5U2xvdFNjb3BlVG9rZW4iLCJjcmVhdGVBU1RFbGVtZW50IiwibWFrZUF0dHJzTWFwIiwicGFyc2UiLCJpc1ByZVRhZyIsInJvb3QiLCJjdXJyZW50UGFyZW50Iiwic3RhY2siLCJwcmVzZXJ2ZVdoaXRlc3BhY2UiLCJ3aGl0ZXNwYWNlT3B0aW9uIiwid2hpdGVzcGFjZSIsImluUHJlIiwid2FybmVkIiwid2Fybk9uY2UiLCJjbG9zZUVsZW1lbnQiLCJlbGVtZW50IiwidHJpbUVuZGluZ1doaXRlc3BhY2UiLCJwcm9jZXNzZWQiLCJwcm9jZXNzRWxlbWVudCIsImlmIiwiZWxzZWlmIiwiZWxzZSIsImNoZWNrUm9vdENvbnN0cmFpbnRzIiwiYWRkSWZDb25kaXRpb24iLCJibG9jayIsImZvcmJpZGRlbiIsImZpbmRQcmV2RWxlbWVudCIsInNsb3RTY29wZSIsInNsb3RUYXJnZXQiLCJsYXN0Tm9kZSIsImxhc3RUYWciLCJleHBlY3RIVE1MIiwiaXNVbmFyeVRhZyQkMSIsImNhbkJlTGVmdE9wZW5UYWckJDEiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCQxIiwiY2hhcnMiLCJwYXJzZUVuZFRhZyIsInRleHRFbmQiLCJjb21tZW50RW5kIiwic2hvdWxkS2VlcENvbW1lbnQiLCJzdWJzdHJpbmciLCJhZHZhbmNlIiwiY29uZGl0aW9uYWxFbmQiLCJkb2N0eXBlTWF0Y2giLCJlbmRUYWdNYXRjaCIsImN1ckluZGV4Iiwic3RhcnRUYWdNYXRjaCIsInBhcnNlU3RhcnRUYWciLCJoYW5kbGVTdGFydFRhZyIsInJlc3QiLCJ1bmFyeVNsYXNoIiwidW5hcnkiLCJzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWYiLCJvdXRwdXRTb3VyY2VSYW5nZSIsImxvd2VyQ2FzZWRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsInBhcnNlSFRNTCIsImNvbW1lbnRzIiwic3RhcnQkMSIsImllTlNCdWciLCJpZU5TUHJlZml4IiwiZ3VhcmRJRVNWR0J1ZyIsImN1bXVsYXRlZCIsInByb2Nlc3NQcmUiLCJwcm9jZXNzUmF3QXR0cnMiLCJwcm9jZXNzRm9yIiwicHJvY2Vzc0lmIiwicHJvY2Vzc09uY2UiLCJlbmQkMSIsImZvciIsIml0ZXJhdG9yMiIsIml0ZXJhdG9yMSIsInByb2Nlc3NLZXkiLCJjaGVja0luRm9yIiwic2xvdFRhcmdldER5bmFtaWMiLCJzbG90QmluZGluZyIsImdldFNsb3ROYW1lIiwic2xvdEJpbmRpbmckMSIsInJlZiQxIiwiZHluYW1pYyQxIiwic2xvdENvbnRhaW5lciIsInByb2Nlc3NTbG90Q29udGVudCIsInNsb3ROYW1lIiwicHJvY2Vzc1Nsb3RPdXRsZXQiLCJwcm9jZXNzQ29tcG9uZW50Iiwic3luY0dlbiIsImlzRHluYW1pYyIsImhhc0JpbmRpbmdzIiwicGFyc2VNb2RpZmllcnMiLCJjYW1lbCIsImFyZ01hdGNoIiwiY2hlY2tGb3JBbGlhc01vZGVsIiwicHJvY2Vzc0F0dHJzIiwiaW5NYXRjaCIsImFsaWFzIiwiaXRlcmF0b3JNYXRjaCIsInBhcnNlRm9yIiwiY29uZGl0aW9uIiwiaWZDb25kaXRpb25zIiwiX2VsIiwiY2xvbmVBU1RFbGVtZW50IiwiaXNTdGF0aWNLZXkiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWciLCJtb2R1bGVzJDEiLCJwcmVUcmFuc2Zvcm1Ob2RlIiwidHlwZUJpbmRpbmciLCJpZkNvbmRpdGlvbiIsImlmQ29uZGl0aW9uRXh0cmEiLCJoYXNFbHNlIiwiZWxzZUlmQ29uZGl0aW9uIiwiYnJhbmNoMCIsImJyYW5jaDEiLCJicmFuY2gyIiwiYmFzZU9wdGlvbnMiLCJfd2FybiIsImNvZGUiLCJnZW5TZWxlY3QiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJnZW5DaGVja2JveE1vZGVsIiwiZ2VuUmFkaW9Nb2RlbCIsInZhbHVlJDEiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsImdlbkRlZmF1bHRNb2RlbCIsImdlblN0YXRpY0tleXMiLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwib3B0aW1pemUiLCJtYXJrU3RhdGljJDEiLCJzdGF0aWMiLCJpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciIsImwkMSIsIm1hcmtTdGF0aWNSb290cyIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImZuRXhwUkUiLCJmbkludm9rZVJFIiwic2ltcGxlUGF0aFJFIiwiZXNjIiwidGFiIiwidXAiLCJkb3duIiwia2V5TmFtZXMiLCJnZW5HdWFyZCIsIm1vZGlmaWVyQ29kZSIsInN0b3AiLCJjdHJsIiwiYWx0IiwiZ2VuSGFuZGxlcnMiLCJwcmVmaXgiLCJzdGF0aWNIYW5kbGVycyIsImR5bmFtaWNIYW5kbGVycyIsImhhbmRsZXJDb2RlIiwiZ2VuSGFuZGxlciIsImlzTWV0aG9kUGF0aCIsImlzRnVuY3Rpb25FeHByZXNzaW9uIiwiaXNGdW5jdGlvbkludm9jYXRpb24iLCJnZW5Nb2RpZmllckNvZGUiLCJrZXlNb2RpZmllciIsImdlbkZpbHRlckNvZGUiLCJnZW5LZXlGaWx0ZXIiLCJrZXlWYWwiLCJrZXlDb2RlIiwia2V5TmFtZSIsImJhc2VEaXJlY3RpdmVzIiwid3JhcExpc3RlbmVycyIsIndyYXBEYXRhIiwiY2xvYWsiLCJDb2RlZ2VuU3RhdGUiLCJkYXRhR2VuRm5zIiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJzdGF0ZSIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5DaGlsZHJlbiIsImdlblByb3BzIiwiYmluZCQkMSIsImdlblNsb3QiLCJjb21wb25lbnROYW1lIiwiZ2VuRGF0YSQyIiwiZ2VuQ29tcG9uZW50Iiwib3JpZ2luYWxQcmVTdGF0ZSIsImFsdEdlbiIsImFsdEVtcHR5IiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJhbHRIZWxwZXIiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJnZW5EaXJlY3RpdmVzIiwiY29udGFpbnNTbG90Q2hpbGQiLCJuZWVkc0tleSIsImdlbmVyYXRlZFNsb3RzIiwiZ2VuU2NvcGVkU2xvdCIsImlubGluZVJlbmRlckZucyIsImdlbklubGluZVRlbXBsYXRlIiwiaXNMZWdhY3lTeW50YXgiLCJyZXZlcnNlUHJveHkiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJub3JtYWxpemF0aW9uVHlwZSQxIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwidHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzIiwic3RhdGljUHJvcHMiLCJkeW5hbWljUHJvcHMiLCJwcm9oaWJpdGVkS2V5d29yZFJFIiwidW5hcnlPcGVyYXRvcnNSRSIsInN0cmlwU3RyaW5nUkUiLCJkZXRlY3RFcnJvcnMiLCJjaGVja05vZGUiLCJjaGVja0ZvciIsImNoZWNrRXZlbnQiLCJjaGVja0V4cHJlc3Npb24iLCJzdGlwcGVkIiwia2V5d29yZE1hdGNoIiwiY2hlY2tJZGVudGlmaWVyIiwiaWRlbnQiLCJyZXBlYXQkMSIsImNyZWF0ZUZ1bmN0aW9uIiwiZXJyb3JzIiwiY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiIsImNvbXBpbGUiLCJ3YXJuJCQxIiwiY29tcGlsZWQiLCJsaW5lcyIsImxpbmVMZW5ndGgiLCJwYWQiLCJsZW5ndGgkMSIsImdlbmVyYXRlQ29kZUZyYW1lIiwidGlwcyIsImZuR2VuRXJyb3JzIiwiYmFzZUNvbXBpbGUiLCJkaXYiLCJmaW5hbE9wdGlvbnMiLCJsZWFkaW5nU3BhY2VMZW5ndGgiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJnZXRTaG91bGREZWNvZGUiLCJocmVmIiwiaWRUb1RlbXBsYXRlIiwibW91bnQiLCJvdXRlckhUTUwiLCJjb250YWluZXIiLCJnZXRPdXRlckhUTUwiLCJfYmFiZWxQb2x5ZmlsbCIsIiRmYWlscyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIl9zdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2xzIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJhcmd1bWVudCIsInRoaXJkIiwibWF4Q29kZSIsImZpcnN0IiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiRVBTSUxPTiIsIl9pc0Zpbml0ZSIsImlzSW50ZWdlciIsImlzU2FmZUludGVnZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsInNxcnQiLCIkYWNvc2giLCJhY29zaCIsIk1BWF9WQUxVRSIsIiRhc2luaCIsImFzaW5oIiwiJGF0YW5oIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJMT0cyRSIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiJGFicyIsIiRzaWduIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsImNvbG9yIiwic2l6ZSIsInVybCIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwicHYiLCIkdG9JU09TdHJpbmciLCJseiIsIm51bSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsImhpbnQiLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJGZpbHRlciIsIiRzb21lIiwiJGV2ZXJ5IiwiJHJlZHVjZSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIiRmaW5kIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJkZWZpbmUiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiJG1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwicngiLCJmdWxsVW5pY29kZSIsIm1hdGNoU3RyIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwicG9zaXRpb24iLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJyZXBsYWNlckFyZ3MiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJxIiwibWFjcm90YXNrIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImZsdXNoIiwic3RhbmRhbG9uZSIsInRvZ2dsZSIsInN0cm9uZyIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsIiRXZWFrTWFwIiwiJGlzVmlldyIsImlzVmlldyIsImZpbiIsInZpZXdTIiwidmlld1QiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwicGFkU3RhcnQiLCIkcGFkIiwiV0VCS0lUX0JVRyIsInBhZEVuZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInVud3JhcHBlZCIsInJldHVybiIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsIl9ub2RlX21vZHVsZXNfdnVlX3N0eWxlX2xvYWRlcl9pbmRleF9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9kaXN0X2Nqc19qc19yZWZfMF8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9sb2FkZXJzX3N0eWxlUG9zdExvYWRlcl9qc19ub2RlX21vZHVsZXNfc2Fzc19sb2FkZXJfbGliX2xvYWRlcl9qc19ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfaW5kZXhfanNfdnVlX2xvYWRlcl9vcHRpb25zX3NlYXJjaF9mb3JtX3Z1ZV92dWVfdHlwZV9zdHlsZV9pbmRleF8wX2xhbmdfc2Nzc19fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIm1hcHBpbmdzIiwic291cmNlc0NvbnRlbnQiLCJfbm9kZV9tb2R1bGVzX3Z1ZV9zdHlsZV9sb2FkZXJfaW5kZXhfanNfbm9kZV9tb2R1bGVzX2Nzc19sb2FkZXJfZGlzdF9janNfanNfcmVmXzBfMV9ub2RlX21vZHVsZXNfdnVlX2xvYWRlcl9saWJfbG9hZGVyc19zdHlsZVBvc3RMb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Nhc3NfbG9hZGVyX2xpYl9sb2FkZXJfanNfbm9kZV9tb2R1bGVzX3Z1ZV9sb2FkZXJfbGliX2luZGV4X2pzX3Z1ZV9sb2FkZXJfb3B0aW9uc19yZXBvcnRfdnVlX3Z1ZV90eXBlX3N0eWxlX2luZGV4XzBfbGFuZ19zY3NzX19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic2NvcGUiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInVucmVmIiwiZW5yb2xsIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiX29uVGltZW91dCIsInJlZ2lzdGVySW1tZWRpYXRlIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJhdHRhY2hFdmVudCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5IiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIl92bSIsInN1Ym1pdCIsInByZXZlbnREZWZhdWx0IiwiZ2V0UmVwb3J0IiwiY2l0eSIsImlucHV0IiwiYXBwX2NvbXBvbmVudHNfc2VhcmNoX2Zvcm12dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJhcHBJZCIsImxvYWRpbmdSZXBvcnQiLCJnZXRSYXdSZXBvcnQiLCJfZ2V0UmF3UmVwb3J0IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfY2FsbGVlIiwiY2l0eU5hbWUiLCJyZXNwb25zZSIsInJhd1JlcG9ydCIsIl9jb250ZXh0IiwiZmV0Y2giLCJqc29uIiwidDAiLCJhbGVydCIsIl94IiwiY2xlYW5SYXdSZXBvcnQiLCJjb3VudHJ5Iiwic3lzIiwiaHVtaWRpdHkiLCJtYWluIiwicHJlc3N1cmUiLCJ0ZW1wIiwid2VhdGhlciIsImRlc2NyaXB0aW9uIiwid2luZCIsImRpcmVjdGlvbiIsImRlZyIsInNwZWVkIiwiX2dldFJlcG9ydCIsIl9jYWxsZWUyIiwiX2NvbnRleHQyIiwiX3gyIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJiZWZvcmVDcmVhdGUiLCJzZWFyY2hfZm9ybSIsInJlcG9ydHZ1ZV90eXBlX3RlbXBsYXRlX2lkX2IwYzVmNWFjX3JlbmRlciIsImlzRW1wdHkiLCJhcHBfY29tcG9uZW50c19yZXBvcnR2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJyZXBvcnRfY29tcG9uZW50IiwicmVwb3J0Iiwic2VhcmNoRm9ybSIsInNhdmVSZXBvcnQiLCJfc2F2ZVJlcG9ydCIsIndlYXRoZXJSZXBvcnQiLCJvblRvZ2dsZUxvYWRpbmciXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxZQUFBLENBQXdEQyxNQUFBLFdBRXhEUCxPQUFBQyxlQUFBYixFQUFBLGNBQWlEbUIsT0FBQSxLQVFqRHJCLEVBQUFzQixFQUFBLFNBQUFELEVBQUFFLEdBRUEsR0FEQSxFQUFBQSxJQUFBRixFQUFBckIsRUFBQXFCLElBQ0EsRUFBQUUsRUFBQSxPQUFBRixFQUNBLEtBQUFFLEdBQUEsaUJBQUFGLFFBQUFHLFdBQUEsT0FBQUgsRUFDQSxJQUFBSSxFQUFBWCxP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QUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsSUFDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JHLEVBQUFELFFBQWlCRixFQUFRLGlDQ3hJekIsSUFBQW9DLEVBQWFwQyxFQUFRLEdBQ3JCd0YsRUFBVXhGLEVBQVEsSUFDbEJzVyxFQUFrQnRXLEVBQVEsR0FDMUJ5QyxFQUFjekMsRUFBUSxHQUN0QnVDLEVBQWV2QyxFQUFRLElBQ3ZCNFQsRUFBVzVULEVBQVEsSUFBUzRILElBQzVCbWtFLEVBQWEvckUsRUFBUSxHQUNyQjBiLEVBQWExYixFQUFRLElBQ3JCa2EsRUFBcUJsYSxFQUFRLElBQzdCMEUsRUFBVTFFLEVBQVEsSUFDbEJtSyxFQUFVbkssRUFBUSxHQUNsQndvQixFQUFheG9CLEVBQVEsSUFDckJnc0UsRUFBZ0Joc0UsRUFBUSxJQUN4QmlzRSxFQUFlanNFLEVBQVEsS0FDdkIyYixFQUFjM2IsRUFBUSxJQUN0QjhFLEVBQWU5RSxFQUFRLEdBQ3ZCc0UsRUFBZXRFLEVBQVEsR0FDdkJ5SCxFQUFnQnpILEVBQVEsSUFDeEJnRixFQUFrQmhGLEVBQVEsSUFDMUJpSCxFQUFpQmpILEVBQVEsSUFDekJrc0UsRUFBY2xzRSxFQUFRLElBQ3RCbXNFLEVBQWNuc0UsRUFBUSxJQUN0QjhLLEVBQVk5SyxFQUFRLElBQ3BCNkssRUFBVTdLLEVBQVEsR0FDbEI0VSxFQUFZNVUsRUFBUSxJQUNwQjBILEVBQUFvRCxFQUFBNUYsRUFDQUQsRUFBQTRGLEVBQUEzRixFQUNBK0UsRUFBQWtpRSxFQUFBam5FLEVBQ0F1akIsRUFBQXJtQixFQUFBakIsT0FDQWlyRSxFQUFBaHFFLEVBQUFzaUIsS0FDQTJuRCxFQUFBRCxLQUFBem5ELFVBRUEybkQsRUFBQW5pRSxFQUFBLFdBQ0FvaUUsRUFBQXBpRSxFQUFBLGVBQ0FtZixFQUFBLEdBQWUzUyxxQkFDZjYxRCxFQUFBOXdELEVBQUEsbUJBQ0Erd0QsRUFBQS93RCxFQUFBLFdBQ0FneEQsRUFBQWh4RCxFQUFBLGNBQ0F6RixFQUFBblYsT0FBQSxVQUNBaXJCLEVBQUEsbUJBQUF0RCxFQUNBa2tELEVBQUF2cUUsRUFBQXVxRSxRQUVBNzVELEdBQUE2NUQsTUFBQSxZQUFBQSxFQUFBLFVBQUFDLFVBR0FDLEVBQUF2MkQsR0FBQXkxRCxFQUFBLFdBQ0EsT0FFRyxHQUZIRyxFQUFBam5FLEVBQUEsR0FBc0IsS0FDdEJoRSxJQUFBLFdBQXNCLE9BQUFnRSxFQUFBa0IsS0FBQSxLQUF1QjlFLE1BQUEsSUFBV2dFLE1BQ3JEQSxJQUNGLFNBQUFkLEVBQUE1QyxFQUFBcVYsR0FDRCxJQUFBODFELEVBQUFwbEUsRUFBQXVPLEVBQUF0VSxHQUNBbXJFLFVBQUE3MkQsRUFBQXRVLEdBQ0FzRCxFQUFBVixFQUFBNUMsRUFBQXFWLEdBQ0E4MUQsR0FBQXZvRSxJQUFBMFIsR0FBQWhSLEVBQUFnUixFQUFBdFUsRUFBQW1yRSxJQUNDN25FLEVBRUQ4bkUsRUFBQSxTQUFBdG1FLEdBQ0EsSUFBQXVtRSxFQUFBUCxFQUFBaG1FLEdBQUF5bEUsRUFBQXpqRCxFQUFBLFdBRUEsT0FEQXVrRCxFQUFBOXVELEdBQUF6WCxFQUNBdW1FLEdBR0FDLEVBQUFsaEQsR0FBQSxpQkFBQXRELEVBQUExWixTQUFBLFNBQUF4SyxHQUNBLHVCQUFBQSxHQUNDLFNBQUFBLEdBQ0QsT0FBQUEsYUFBQWtrQixHQUdBN0ssRUFBQSxTQUFBclosRUFBQTVDLEVBQUFxVixHQUtBLE9BSkF6UyxJQUFBMFIsR0FBQTJILEVBQUE4dUQsRUFBQS9xRSxFQUFBcVYsR0FDQWxTLEVBQUFQLEdBQ0E1QyxFQUFBcUQsRUFBQXJELEdBQUEsR0FDQW1ELEVBQUFrUyxHQUNBeFIsRUFBQWluRSxFQUFBOXFFLElBQ0FxVixFQUFBaFcsWUFJQXdFLEVBQUFqQixFQUFBK25FLElBQUEvbkUsRUFBQStuRSxHQUFBM3FFLEtBQUE0QyxFQUFBK25FLEdBQUEzcUUsSUFBQSxHQUNBcVYsRUFBQWsxRCxFQUFBbDFELEVBQUEsQ0FBc0JoVyxXQUFBaUcsRUFBQSxVQUp0QnpCLEVBQUFqQixFQUFBK25FLElBQUFybkUsRUFBQVYsRUFBQStuRSxFQUFBcmxFLEVBQUEsT0FDQTFDLEVBQUErbkUsR0FBQTNxRSxJQUFBLEdBSUtrckUsRUFBQXRvRSxFQUFBNUMsRUFBQXFWLElBQ0YvUixFQUFBVixFQUFBNUMsRUFBQXFWLElBRUhrMkQsRUFBQSxTQUFBM29FLEVBQUFqQixHQUNBd0IsRUFBQVAsR0FLQSxJQUpBLElBR0E1QyxFQUhBdUssRUFBQSsvRCxFQUFBM29FLEVBQUFtRSxFQUFBbkUsSUFDQWxELEVBQUEsRUFDQUMsRUFBQTZMLEVBQUFsRixPQUVBM0csRUFBQUQsR0FBQXdkLEVBQUFyWixFQUFBNUMsRUFBQXVLLEVBQUE5TCxLQUFBa0QsRUFBQTNCLElBQ0EsT0FBQTRDLEdBS0E0b0UsRUFBQSxTQUFBeHJFLEdBQ0EsSUFBQXlyRSxFQUFBOWpELEVBQUEvb0IsS0FBQTRGLEtBQUF4RSxFQUFBcUQsRUFBQXJELEdBQUEsSUFDQSxRQUFBd0UsT0FBQThQLEdBQUF6USxFQUFBaW5FLEVBQUE5cUUsS0FBQTZELEVBQUFrbkUsRUFBQS9xRSxRQUNBeXJFLElBQUE1bkUsRUFBQVcsS0FBQXhFLEtBQUE2RCxFQUFBaW5FLEVBQUE5cUUsSUFBQTZELEVBQUFXLEtBQUFtbUUsSUFBQW5tRSxLQUFBbW1FLEdBQUEzcUUsS0FBQXlyRSxJQUVBQyxFQUFBLFNBQUE5b0UsRUFBQTVDLEdBR0EsR0FGQTRDLEVBQUFrRCxFQUFBbEQsR0FDQTVDLEVBQUFxRCxFQUFBckQsR0FBQSxHQUNBNEMsSUFBQTBSLElBQUF6USxFQUFBaW5FLEVBQUE5cUUsSUFBQTZELEVBQUFrbkUsRUFBQS9xRSxHQUFBLENBQ0EsSUFBQXFWLEVBQUF0UCxFQUFBbkQsRUFBQTVDLEdBRUEsT0FEQXFWLElBQUF4UixFQUFBaW5FLEVBQUE5cUUsSUFBQTZELEVBQUFqQixFQUFBK25FLElBQUEvbkUsRUFBQStuRSxHQUFBM3FFLEtBQUFxVixFQUFBaFcsWUFBQSxHQUNBZ1csSUFFQXMyRCxFQUFBLFNBQUEvb0UsR0FLQSxJQUpBLElBR0E1QyxFQUhBK21CLEVBQUF6ZSxFQUFBeEMsRUFBQWxELElBQ0F1RSxFQUFBLEdBQ0ExSSxFQUFBLEVBRUFzb0IsRUFBQTFoQixPQUFBNUcsR0FDQW9GLEVBQUFpbkUsRUFBQTlxRSxFQUFBK21CLEVBQUF0b0IsT0FBQXVCLEdBQUEycUUsR0FBQTNxRSxHQUFBaVMsR0FBQTlLLEVBQUFDLEtBQUFwSCxHQUNHLE9BQUFtSCxHQUVIeWtFLEVBQUEsU0FBQWhwRSxHQU1BLElBTEEsSUFJQTVDLEVBSkE2ckUsRUFBQWpwRSxJQUFBMFIsRUFDQXlTLEVBQUF6ZSxFQUFBdWpFLEVBQUFkLEVBQUFqbEUsRUFBQWxELElBQ0F1RSxFQUFBLEdBQ0ExSSxFQUFBLEVBRUFzb0IsRUFBQTFoQixPQUFBNUcsSUFDQW9GLEVBQUFpbkUsRUFBQTlxRSxFQUFBK21CLEVBQUF0b0IsT0FBQW90RSxJQUFBaG9FLEVBQUF5USxFQUFBdFUsSUFBQW1ILEVBQUFDLEtBQUEwakUsRUFBQTlxRSxJQUNHLE9BQUFtSCxHQUlIaWpCLElBWUF4cEIsR0FYQWttQixFQUFBLFdBQ0EsR0FBQXRpQixnQkFBQXNpQixFQUFBLE1BQUFqa0IsVUFBQSxnQ0FDQSxJQUFBaUMsRUFBQS9CLEVBQUF5RSxVQUFBbkMsT0FBQSxFQUFBbUMsVUFBQSxRQUFBeEYsR0FDQXdOLEVBQUEsU0FBQTlQLEdBQ0E4RSxPQUFBOFAsR0FBQTlFLEVBQUE1USxLQUFBbXNFLEVBQUFyckUsR0FDQW1FLEVBQUFXLEtBQUFtbUUsSUFBQTltRSxFQUFBVyxLQUFBbW1FLEdBQUE3bEUsS0FBQU4sS0FBQW1tRSxHQUFBN2xFLElBQUEsR0FDQW9tRSxFQUFBMW1FLEtBQUFNLEVBQUFRLEVBQUEsRUFBQTVGLEtBR0EsT0FEQWlWLEdBQUF4RCxHQUFBKzVELEVBQUE1MkQsRUFBQXhQLEVBQUEsQ0FBZ0VtTCxjQUFBLEVBQUEzRCxJQUFBa0QsSUFDaEU0N0QsRUFBQXRtRSxLQUVBLGdDQUNBLE9BQUFOLEtBQUErWCxLQUdBcFQsRUFBQTVGLEVBQUFtb0UsRUFDQXhpRSxFQUFBM0YsRUFBQTBZLEVBQ0U1ZCxFQUFRLElBQWdCa0YsRUFBQWluRSxFQUFBam5FLEVBQUFvb0UsRUFDeEJ0dEUsRUFBUSxJQUFla0YsRUFBQWlvRSxFQUN2Qm50RSxFQUFRLElBQWdCa0YsRUFBQXFvRSxFQUUxQmozRCxJQUFzQnRXLEVBQVEsS0FDOUJ1QyxFQUFBMFQsRUFBQSx1QkFBQWszRCxHQUFBLEdBR0Eza0QsRUFBQXRqQixFQUFBLFNBQUF2RSxHQUNBLE9BQUFvc0UsRUFBQTVpRSxFQUFBeEosTUFJQThCLElBQUFTLEVBQUFULEVBQUFxQixFQUFBckIsRUFBQU8sR0FBQStvQixFQUFBLENBQTBENXFCLE9BQUFzbkIsSUFFMUQsUUFBQWdsRCxFQUFBLGlIQUdBN25FLE1BQUEsS0FBQW1kLEdBQUEsRUFBb0IwcUQsRUFBQXptRSxPQUFBK2IsSUFBdUI1WSxFQUFBc2pFLEVBQUExcUQsT0FFM0MsUUFBQTJxRCxHQUFBOTRELEVBQUF6SyxFQUFBMUYsT0FBQTJrQixHQUFBLEVBQW9Ec2tELEdBQUExbUUsT0FBQW9pQixJQUE2QjRpRCxFQUFBMEIsR0FBQXRrRCxPQUVqRjNtQixJQUFBVyxFQUFBWCxFQUFBTyxHQUFBK29CLEVBQUEsVUFFQWswQyxJQUFBLFNBQUF0K0QsR0FDQSxPQUFBNkQsRUFBQWduRSxFQUFBN3FFLEdBQUEsSUFDQTZxRSxFQUFBN3FFLEdBQ0E2cUUsRUFBQTdxRSxHQUFBOG1CLEVBQUE5bUIsSUFHQWdzRSxPQUFBLFNBQUFYLEdBQ0EsSUFBQUMsRUFBQUQsR0FBQSxNQUFBeG9FLFVBQUF3b0UsRUFBQSxxQkFDQSxRQUFBcnJFLEtBQUE2cUUsRUFBQSxHQUFBQSxFQUFBN3FFLEtBQUFxckUsRUFBQSxPQUFBcnJFLEdBRUFpc0UsVUFBQSxXQUEwQjk2RCxHQUFBLEdBQzFCKzZELFVBQUEsV0FBMEIvNkQsR0FBQSxLQUcxQnJRLElBQUFXLEVBQUFYLEVBQUFPLEdBQUErb0IsRUFBQSxVQUVBcnFCLE9BL0ZBLFNBQUE2QyxFQUFBakIsR0FDQSxZQUFBSyxJQUFBTCxFQUFBNG9FLEVBQUEzbkUsR0FBQTJvRSxFQUFBaEIsRUFBQTNuRSxHQUFBakIsSUFnR0F2QyxlQUFBNmMsRUFFQWdMLGlCQUFBc2tELEVBRUF2bEUseUJBQUEwbEUsRUFFQXIzRCxvQkFBQXMzRCxFQUVBaDJELHNCQUFBaTJELElBSUFuQixHQUFBM3BFLElBQUFXLEVBQUFYLEVBQUFPLElBQUErb0IsR0FBQWdnRCxFQUFBLFdBQ0EsSUFBQTNvRSxFQUFBcWxCLElBSUEsZ0JBQUE0akQsRUFBQSxDQUFBanBFLEtBQTJELE1BQTNEaXBFLEVBQUEsQ0FBb0RobkUsRUFBQWpDLEtBQWUsTUFBQWlwRSxFQUFBdnJFLE9BQUFzQyxPQUNsRSxRQUNEdWhCLFVBQUEsU0FBQXBnQixHQUlBLElBSEEsSUFFQXVwRSxFQUFBQyxFQUZBN3RELEVBQUEsQ0FBQTNiLEdBQ0FuRSxFQUFBLEVBRUErSSxVQUFBbkMsT0FBQTVHLEdBQUE4ZixFQUFBblgsS0FBQUksVUFBQS9JLE1BRUEsR0FEQTJ0RSxFQUFBRCxFQUFBNXRELEVBQUEsSUFDQTViLEVBQUF3cEUsU0FBQW5xRSxJQUFBWSxLQUFBMG9FLEVBQUExb0UsR0FNQSxPQUxBb1gsRUFBQW15RCxPQUFBLFNBQUFuc0UsRUFBQU4sR0FFQSxHQURBLG1CQUFBMHNFLElBQUExc0UsRUFBQTBzRSxFQUFBeHRFLEtBQUE0RixLQUFBeEUsRUFBQU4sS0FDQTRyRSxFQUFBNXJFLEdBQUEsT0FBQUEsSUFFQTZlLEVBQUEsR0FBQTR0RCxFQUNBekIsRUFBQW5qRSxNQUFBa2pFLEVBQUFsc0QsTUFLQXVJLEVBQUEsVUFBQThqRCxJQUFvQ3ZzRSxFQUFRLEdBQVJBLENBQWlCeW9CLEVBQUEsVUFBQThqRCxFQUFBOWpELEVBQUEsVUFBQTlVLFNBRXJEdUcsRUFBQXVPLEVBQUEsVUFFQXZPLEVBQUFqVyxLQUFBLFdBRUFpVyxFQUFBOVgsRUFBQXNpQixLQUFBLDRCQ3pPQXZrQixFQUFBRCxRQUFpQkYsRUFBUSxHQUFSQSxDQUFtQiw0QkFBQTRELFNBQUF3RiwyQkNDcEMsSUFBQXVmLEVBQWMzb0IsRUFBUSxJQUN0QitvQixFQUFXL29CLEVBQVEsSUFDbkJ3SCxFQUFVeEgsRUFBUSxJQUNsQkcsRUFBQUQsUUFBQSxTQUFBcUUsR0FDQSxJQUFBdUUsRUFBQTZmLEVBQUFwa0IsR0FDQThrQixFQUFBTixFQUFBN2pCLEVBQ0EsR0FBQW1rQixFQUtBLElBSkEsSUFHQTFuQixFQUhBcXNFLEVBQUEza0QsRUFBQTlrQixHQUNBK2tCLEVBQUE5aEIsRUFBQXRDLEVBQ0E5RSxFQUFBLEVBRUE0dEUsRUFBQWhuRSxPQUFBNUcsR0FBQWtwQixFQUFBL29CLEtBQUFnRSxFQUFBNUMsRUFBQXFzRSxFQUFBNXRFLE9BQUEwSSxFQUFBQyxLQUFBcEgsR0FDRyxPQUFBbUgsb0JDYkgsSUFBQXJHLEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQVcsRUFBQSxVQUE4QjFCLE9BQVMxQixFQUFRLHVCQ0YvQyxJQUFBeUMsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBWCxFQUFBTyxHQUFpQ2hELEVBQVEsR0FBZ0IsVUFBY2UsZUFBaUJmLEVBQVEsR0FBY2tGLHFCQ0Y5RyxJQUFBekMsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBWCxFQUFBTyxHQUFpQ2hELEVBQVEsR0FBZ0IsVUFBYzRvQixpQkFBbUI1b0IsRUFBUSx1QkNEbEcsSUFBQXlILEVBQWdCekgsRUFBUSxJQUN4QnF0RSxFQUFnQ3J0RSxFQUFRLElBQWdCa0YsRUFFeERsRixFQUFRLEdBQVJBLENBQXVCLHNDQUN2QixnQkFBQXVFLEVBQUE1QyxHQUNBLE9BQUEwckUsRUFBQTVsRSxFQUFBbEQsR0FBQTVDLHVCQ0xBLElBQUFtRyxFQUFlOUgsRUFBUSxJQUN2Qml1RSxFQUFzQmp1RSxFQUFRLElBRTlCQSxFQUFRLEdBQVJBLENBQXVCLDRCQUN2QixnQkFBQXVFLEdBQ0EsT0FBQTBwRSxFQUFBbm1FLEVBQUF2RCx3QkNMQSxJQUFBdUQsRUFBZTlILEVBQVEsSUFDdkI0VSxFQUFZNVUsRUFBUSxJQUVwQkEsRUFBUSxHQUFSQSxDQUF1QixrQkFDdkIsZ0JBQUF1RSxHQUNBLE9BQUFxUSxFQUFBOU0sRUFBQXZELHdCQ0xBdkUsRUFBUSxHQUFSQSxDQUF1QixpQ0FDdkIsT0FBU0EsRUFBUSxJQUFvQmtGLHFCQ0RyQyxJQUFBWixFQUFldEUsRUFBUSxHQUN2Qm9VLEVBQVdwVSxFQUFRLElBQVN3VSxTQUU1QnhVLEVBQVEsR0FBUkEsQ0FBdUIsa0JBQUFrdUUsR0FDdkIsZ0JBQUEzcEUsR0FDQSxPQUFBMnBFLEdBQUE1cEUsRUFBQUMsR0FBQTJwRSxFQUFBOTVELEVBQUE3UCwwQkNMQSxJQUFBRCxFQUFldEUsRUFBUSxHQUN2Qm9VLEVBQVdwVSxFQUFRLElBQVN3VSxTQUU1QnhVLEVBQVEsR0FBUkEsQ0FBdUIsZ0JBQUFtdUUsR0FDdkIsZ0JBQUE1cEUsR0FDQSxPQUFBNHBFLEdBQUE3cEUsRUFBQUMsR0FBQTRwRSxFQUFBLzVELEVBQUE3UCwwQkNMQSxJQUFBRCxFQUFldEUsRUFBUSxHQUN2Qm9VLEVBQVdwVSxFQUFRLElBQVN3VSxTQUU1QnhVLEVBQVEsR0FBUkEsQ0FBdUIsNkJBQUFvdUUsR0FDdkIsZ0JBQUE3cEUsR0FDQSxPQUFBNnBFLEdBQUE5cEUsRUFBQUMsR0FBQTZwRSxFQUFBaDZELEVBQUE3UCwwQkNMQSxJQUFBRCxFQUFldEUsRUFBUSxHQUV2QkEsRUFBUSxHQUFSQSxDQUF1QixvQkFBQXF1RSxHQUN2QixnQkFBQTlwRSxHQUNBLE9BQUFELEVBQUFDLE1BQUE4cEUsS0FBQTlwRSx1QkNKQSxJQUFBRCxFQUFldEUsRUFBUSxHQUV2QkEsRUFBUSxHQUFSQSxDQUF1QixvQkFBQXN1RSxHQUN2QixnQkFBQS9wRSxHQUNBLE9BQUFELEVBQUFDLE1BQUErcEUsS0FBQS9wRSx1QkNKQSxJQUFBRCxFQUFldEUsRUFBUSxHQUV2QkEsRUFBUSxHQUFSQSxDQUF1Qix3QkFBQXV1RSxHQUN2QixnQkFBQWhxRSxHQUNBLFFBQUFELEVBQUFDLE1BQUFncUUsS0FBQWhxRSx3QkNKQSxJQUFBOUIsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBWCxFQUFBTyxFQUFBLFVBQTBDaW1CLE9BQVNqcEIsRUFBUSx1QkNGM0QsSUFBQXlDLEVBQWN6QyxFQUFRLEdBQ3RCeUMsSUFBQVcsRUFBQSxVQUE4Qm9ZLEdBQUt4YixFQUFRLHVCQ0QzQyxJQUFBeUMsRUFBY3pDLEVBQVEsR0FDdEJ5QyxJQUFBVyxFQUFBLFVBQThCMFksZUFBaUI5YixFQUFRLElBQWNpTyxvQ0NBckUsSUFBQW5FLEVBQWM5SixFQUFRLElBQ3RCOEcsRUFBQSxHQUNBQSxFQUFLOUcsRUFBUSxFQUFSQSxDQUFnQixvQkFDckI4RyxFQUFBLGtCQUNFOUcsRUFBUSxHQUFSQSxDQUFxQmMsT0FBQWtCLFVBQUEsc0JBQ3ZCLGlCQUFBOEgsRUFBQTNELE1BQUEsTUFDRyxvQkNQSCxJQUFBMUQsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBYSxFQUFBLFlBQWdDMUIsS0FBTzVCLEVBQVEsdUJDSC9DLElBQUFpRixFQUFTakYsRUFBUSxHQUFja0YsRUFDL0JzcEUsRUFBQTVxRSxTQUFBNUIsVUFDQXlzRSxFQUFBLHdCQUNBLFNBR0FELEdBQWtCeHVFLEVBQVEsSUFBZ0JpRixFQUFBdXBFLEVBSDFDLE9BRzBDLENBQzFDNThELGNBQUEsRUFDQTNRLElBQUEsV0FDQSxJQUNBLFVBQUFrRixNQUFBMlksTUFBQTJ2RCxHQUFBLEdBQ0ssTUFBQXBxRSxHQUNMLDJDQ1hBLElBQUFDLEVBQWV0RSxFQUFRLEdBQ3ZCZ0ssRUFBcUJoSyxFQUFRLElBQzdCMHVFLEVBQW1CMXVFLEVBQVEsRUFBUkEsQ0FBZ0IsZUFDbkMydUUsRUFBQS9xRSxTQUFBNUIsVUFFQTBzRSxLQUFBQyxHQUFzQzN1RSxFQUFRLEdBQWNrRixFQUFBeXBFLEVBQUFELEVBQUEsQ0FBa0NydEUsTUFBQSxTQUFBOEQsR0FDOUYsc0JBQUFnQixPQUFBN0IsRUFBQWEsR0FBQSxTQUNBLElBQUFiLEVBQUE2QixLQUFBbkUsV0FBQSxPQUFBbUQsYUFBQWdCLEtBRUEsS0FBQWhCLEVBQUE2RSxFQUFBN0UsSUFBQSxHQUFBZ0IsS0FBQW5FLFlBQUFtRCxFQUFBLFNBQ0EsNkJDWEEsSUFBQTFDLEVBQWN6QyxFQUFRLEdBQ3RCNnBCLEVBQWdCN3BCLEVBQVEsSUFFeEJ5QyxJQUFBUyxFQUFBVCxFQUFBTyxHQUFBOG1CLFVBQUFELEdBQUEsQ0FBMERDLFNBQUFELHFCQ0gxRCxJQUFBcG5CLEVBQWN6QyxFQUFRLEdBQ3RCbXFCLEVBQWtCbnFCLEVBQVEsS0FFMUJ5QyxJQUFBUyxFQUFBVCxFQUFBTyxHQUFBb25CLFlBQUFELEdBQUEsQ0FBOERDLFdBQUFELGtDQ0Y5RCxJQUFBL25CLEVBQWFwQyxFQUFRLEdBQ3JCd0YsRUFBVXhGLEVBQVEsSUFDbEIwVyxFQUFVMVcsRUFBUSxJQUNsQm1hLEVBQXdCbmEsRUFBUSxJQUNoQ2dGLEVBQWtCaEYsRUFBUSxJQUMxQnFHLEVBQVlyRyxFQUFRLEdBQ3BCaUssRUFBV2pLLEVBQVEsSUFBZ0JrRixFQUNuQ3dDLEVBQVcxSCxFQUFRLElBQWdCa0YsRUFDbkNELEVBQVNqRixFQUFRLEdBQWNrRixFQUMvQjZrQixFQUFZL3BCLEVBQVEsSUFBZ0IrWCxLQUVwQzYyRCxFQUFBeHNFLEVBQUEsT0FDQWlRLEVBQUF1OEQsRUFDQW4vRCxFQUFBbS9ELEVBQUE1c0UsVUFFQTZzRSxFQUxBLFVBS0FuNEQsRUFBcUIxVyxFQUFRLEdBQVJBLENBQTBCeVAsSUFDL0NxL0QsRUFBQSxTQUFBNW9FLE9BQUFsRSxVQUdBNHZCLEVBQUEsU0FBQW05QyxHQUNBLElBQUF4cUUsRUFBQVMsRUFBQStwRSxHQUFBLEdBQ0Esb0JBQUF4cUUsS0FBQXlDLE9BQUEsR0FFQSxJQUNBZ29FLEVBQUE5a0QsRUFBQStrRCxFQURBQyxHQURBM3FFLEVBQUF1cUUsRUFBQXZxRSxFQUFBd1QsT0FBQWdTLEVBQUF4bEIsRUFBQSxJQUNBa1ksV0FBQSxHQUVBLFFBQUF5eUQsR0FBQSxLQUFBQSxHQUVBLFNBREFGLEVBQUF6cUUsRUFBQWtZLFdBQUEsS0FDQSxNQUFBdXlELEVBQUEsT0FBQWh0RCxTQUNLLFFBQUFrdEQsRUFBQSxDQUNMLE9BQUEzcUUsRUFBQWtZLFdBQUEsSUFDQSxnQkFBQXlOLEVBQUEsRUFBb0Mra0QsRUFBQSxHQUFjLE1BQ2xELGlCQUFBL2tELEVBQUEsRUFBcUMra0QsRUFBQSxHQUFjLE1BQ25ELGVBQUExcUUsRUFFQSxRQUFBdytELEVBQUFvTSxFQUFBNXFFLEVBQUE4RSxNQUFBLEdBQUFqSixFQUFBLEVBQUFDLEVBQUE4dUUsRUFBQW5vRSxPQUFvRTVHLEVBQUFDLEVBQU9ELElBSTNFLElBSEEyaUUsRUFBQW9NLEVBQUExeUQsV0FBQXJjLElBR0EsSUFBQTJpRSxFQUFBa00sRUFBQSxPQUFBanRELElBQ08sT0FBQThILFNBQUFxbEQsRUFBQWpsRCxJQUVKLE9BQUEzbEIsR0FHSCxJQUFBcXFFLEVBQUEsVUFBQUEsRUFBQSxRQUFBQSxFQUFBLFNBQ0FBLEVBQUEsU0FBQXZ0RSxHQUNBLElBQUFrRCxFQUFBNEUsVUFBQW5DLE9BQUEsSUFBQTNGLEVBQ0FzSCxFQUFBeEMsS0FDQSxPQUFBd0MsYUFBQWltRSxJQUVBQyxFQUFBeG9FLEVBQUEsV0FBMENvSixFQUFBa0UsUUFBQXBULEtBQUFvSSxLQXhDMUMsVUF3Q3NFK04sRUFBQS9OLElBQ3RFd1IsRUFBQSxJQUFBOUgsRUFBQXVmLEVBQUFydEIsSUFBQW9FLEVBQUFpbUUsR0FBQWg5QyxFQUFBcnRCLElBRUEsUUFNQTVDLEVBTkF1SyxFQUFrQmxNLEVBQVEsR0FBZ0JpSyxFQUFBb0ksR0FBQSw2S0FNMUN6TSxNQUFBLEtBQUFtZCxFQUFBLEVBQTJCN1csRUFBQWxGLE9BQUErYixFQUFpQkEsSUFDNUN2ZCxFQUFBNk0sRUFBQTFRLEVBQUF1SyxFQUFBNlcsTUFBQXZkLEVBQUFvcEUsRUFBQWp0RSxJQUNBc0QsRUFBQTJwRSxFQUFBanRFLEVBQUErRixFQUFBMkssRUFBQTFRLElBR0FpdEUsRUFBQTVzRSxVQUFBeU4sRUFDQUEsRUFBQXNDLFlBQUE2OEQsRUFDRTV1RSxFQUFRLEdBQVJBLENBQXFCb0MsRUF4RHZCLFNBd0R1QndzRSxrQ0NsRXZCLElBQUFuc0UsRUFBY3pDLEVBQVEsR0FDdEI0RSxFQUFnQjVFLEVBQVEsSUFDeEJvdkUsRUFBbUJwdkUsRUFBUSxLQUMzQnN3QixFQUFhdHdCLEVBQVEsSUFDckJxdkUsRUFBQSxHQUFBQyxRQUNBaG9FLEVBQUFyRCxLQUFBcUQsTUFDQXFMLEVBQUEsY0FDQTQ4RCxFQUFBLHdDQUdBQyxFQUFBLFNBQUEzdEUsRUFBQXBCLEdBR0EsSUFGQSxJQUFBTCxHQUFBLEVBQ0FxdkUsRUFBQWh2RSxJQUNBTCxFQUFBLEdBQ0FxdkUsR0FBQTV0RSxFQUFBOFEsRUFBQXZTLEdBQ0F1UyxFQUFBdlMsR0FBQXF2RSxFQUFBLElBQ0FBLEVBQUFub0UsRUFBQW1vRSxFQUFBLE1BR0FDLEVBQUEsU0FBQTd0RSxHQUdBLElBRkEsSUFBQXpCLEVBQUEsRUFDQUssRUFBQSxJQUNBTCxHQUFBLEdBQ0FLLEdBQUFrUyxFQUFBdlMsR0FDQXVTLEVBQUF2UyxHQUFBa0gsRUFBQTdHLEVBQUFvQixHQUNBcEIsSUFBQW9CLEVBQUEsS0FHQTh0RSxFQUFBLFdBR0EsSUFGQSxJQUFBdnZFLEVBQUEsRUFDQStCLEVBQUEsS0FDQS9CLEdBQUEsR0FDQSxRQUFBK0IsR0FBQSxJQUFBL0IsR0FBQSxJQUFBdVMsRUFBQXZTLEdBQUEsQ0FDQSxJQUFBa0IsRUFBQTRFLE9BQUF5TSxFQUFBdlMsSUFDQStCLEVBQUEsS0FBQUEsRUFBQWIsRUFBQWEsRUFBQW11QixFQUFBL3ZCLEtBMUJBLElBMEJBLEVBQUFlLEVBQUEwRixRQUFBMUYsRUFFRyxPQUFBYSxHQUVIOGUsRUFBQSxTQUFBN0UsRUFBQXZhLEVBQUErdEUsR0FDQSxXQUFBL3RFLEVBQUErdEUsRUFBQS90RSxFQUFBLEtBQUFvZixFQUFBN0UsRUFBQXZhLEVBQUEsRUFBQSt0RSxFQUFBeHpELEdBQUE2RSxFQUFBN0UsSUFBQXZhLEVBQUEsRUFBQSt0RSxJQWVBbnRFLElBQUFhLEVBQUFiLEVBQUFPLEtBQUFxc0UsSUFDQSxlQUFBQyxRQUFBLElBQ0EsU0FBQUEsUUFBQSxJQUNBLGVBQUFBLFFBQUEsSUFDQSw0Q0FBQUEsUUFBQSxNQUNNdHZFLEVBQVEsRUFBUkEsQ0FBa0IsV0FFeEJxdkUsRUFBQTl1RSxLQUFBLE9BQ0MsVUFDRCt1RSxRQUFBLFNBQUFPLEdBQ0EsSUFJQXhyRSxFQUFBeXJFLEVBQUEvc0QsRUFBQXFHLEVBSkFoTixFQUFBZ3pELEVBQUFqcEUsS0FBQW9wRSxHQUNBcnFFLEVBQUFOLEVBQUFpckUsR0FDQTF0RSxFQUFBLEdBQ0EzQixFQTNEQSxJQTZEQSxHQUFBMEUsRUFBQSxHQUFBQSxFQUFBLFNBQUE2RixXQUFBd2tFLEdBRUEsR0FBQW56RCxLQUFBLFlBQ0EsR0FBQUEsSUFBQSxNQUFBQSxHQUFBLFlBQUFsVyxPQUFBa1csR0FLQSxHQUpBQSxFQUFBLElBQ0FqYSxFQUFBLElBQ0FpYSxNQUVBQSxFQUFBLE1BS0EsR0FIQTB6RCxHQURBenJFLEVBckNBLFNBQUErWCxHQUdBLElBRkEsSUFBQXZhLEVBQUEsRUFDQWt1RSxFQUFBM3pELEVBQ0EyekQsR0FBQSxNQUNBbHVFLEdBQUEsR0FDQWt1RSxHQUFBLEtBRUEsS0FBQUEsR0FBQSxHQUNBbHVFLEdBQUEsRUFDQWt1RSxHQUFBLEVBQ0csT0FBQWx1RSxFQTJCSHFmLENBQUE5RSxFQUFBNkUsRUFBQSxhQUNBLEVBQUE3RSxFQUFBNkUsRUFBQSxHQUFBNWMsRUFBQSxHQUFBK1gsRUFBQTZFLEVBQUEsRUFBQTVjLEVBQUEsR0FDQXlyRSxHQUFBLGtCQUNBenJFLEVBQUEsR0FBQUEsR0FDQSxHQUdBLElBRkFtckUsRUFBQSxFQUFBTSxHQUNBL3NELEVBQUE3ZCxFQUNBNmQsR0FBQSxHQUNBeXNELEVBQUEsT0FDQXpzRCxHQUFBLEVBSUEsSUFGQXlzRCxFQUFBdnVELEVBQUEsR0FBQThCLEVBQUEsTUFDQUEsRUFBQTFlLEVBQUEsRUFDQTBlLEdBQUEsSUFDQTJzRCxFQUFBLE9BQ0Ezc0QsR0FBQSxHQUVBMnNELEVBQUEsR0FBQTNzRCxHQUNBeXNELEVBQUEsS0FDQUUsRUFBQSxHQUNBbHZFLEVBQUFtdkUsU0FFQUgsRUFBQSxFQUFBTSxHQUNBTixFQUFBLElBQUFuckUsRUFBQSxHQUNBN0QsRUFBQW12RSxJQUFBci9DLEVBQUEvdkIsS0E5RkEsSUE4RkEyRSxHQVFLLE9BSEwxRSxFQUZBMEUsRUFBQSxFQUVBL0MsSUFEQWluQixFQUFBNW9CLEVBQUF3RyxTQUNBOUIsRUFBQSxLQUFBb3JCLEVBQUEvdkIsS0FuR0EsSUFtR0EyRSxFQUFBa2tCLEdBQUE1b0IsSUFBQTZJLE1BQUEsRUFBQStmLEVBQUFsa0IsR0FBQSxJQUFBMUUsRUFBQTZJLE1BQUErZixFQUFBbGtCLElBRUEvQyxFQUFBM0IsbUNDN0dBLElBQUFpQyxFQUFjekMsRUFBUSxHQUN0QityRSxFQUFhL3JFLEVBQVEsR0FDckJvdkUsRUFBbUJwdkUsRUFBUSxLQUMzQmd3RSxFQUFBLEdBQUFDLFlBRUF4dEUsSUFBQWEsRUFBQWIsRUFBQU8sR0FBQStvRSxFQUFBLFdBRUEsWUFBQWlFLEVBQUF6dkUsS0FBQSxPQUFBb0QsT0FDQ29vRSxFQUFBLFdBRURpRSxFQUFBenZFLEtBQUEsT0FDQyxVQUNEMHZFLFlBQUEsU0FBQUMsR0FDQSxJQUFBdm5FLEVBQUF5bUUsRUFBQWpwRSxLQUFBLDZDQUNBLFlBQUF4QyxJQUFBdXNFLEVBQUFGLEVBQUF6dkUsS0FBQW9JLEdBQUFxbkUsRUFBQXp2RSxLQUFBb0ksRUFBQXVuRSx1QkNkQSxJQUFBenRFLEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQVcsRUFBQSxVQUE4QitzRSxRQUFBbHNFLEtBQUFnZCxJQUFBLDBCQ0Y5QixJQUFBeGUsRUFBY3pDLEVBQVEsR0FDdEJvd0UsRUFBZ0Jwd0UsRUFBUSxHQUFXc3FCLFNBRW5DN25CLElBQUFXLEVBQUEsVUFDQWtuQixTQUFBLFNBQUEvbEIsR0FDQSx1QkFBQUEsR0FBQTZyRSxFQUFBN3JFLHVCQ0xBLElBQUE5QixFQUFjekMsRUFBUSxHQUV0QnlDLElBQUFXLEVBQUEsVUFBOEJpdEUsVUFBWXJ3RSxFQUFRLHdCQ0ZsRCxJQUFBeUMsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFVBQ0FtRSxNQUFBLFNBQUE0b0IsR0FFQSxPQUFBQSx5QkNMQSxJQUFBMXRCLEVBQWN6QyxFQUFRLEdBQ3RCcXdFLEVBQWdCcndFLEVBQVEsS0FDeEJnaEIsRUFBQS9jLEtBQUErYyxJQUVBdmUsSUFBQVcsRUFBQSxVQUNBa3RFLGNBQUEsU0FBQW5nRCxHQUNBLE9BQUFrZ0QsRUFBQWxnRCxJQUFBblAsRUFBQW1QLElBQUEscUNDTkEsSUFBQTF0QixFQUFjekMsRUFBUSxHQUV0QnlDLElBQUFXLEVBQUEsVUFBOEJtdEUsaUJBQUEsb0NDRjlCLElBQUE5dEUsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFVBQThCb3RFLGtCQUFBLG9DQ0g5QixJQUFBL3RFLEVBQWN6QyxFQUFRLEdBQ3RCbXFCLEVBQWtCbnFCLEVBQVEsS0FFMUJ5QyxJQUFBVyxFQUFBWCxFQUFBTyxHQUFBNDlCLE9BQUF4VyxZQUFBRCxHQUFBLFVBQStFQyxXQUFBRCxxQkNIL0UsSUFBQTFuQixFQUFjekMsRUFBUSxHQUN0QjZwQixFQUFnQjdwQixFQUFRLElBRXhCeUMsSUFBQVcsRUFBQVgsRUFBQU8sR0FBQTQ5QixPQUFBOVcsVUFBQUQsR0FBQSxVQUEyRUMsU0FBQUQscUJDRjNFLElBQUFwbkIsRUFBY3pDLEVBQVEsR0FDdEJ1cUIsRUFBWXZxQixFQUFRLEtBQ3BCeXdFLEVBQUF4c0UsS0FBQXdzRSxLQUNBQyxFQUFBenNFLEtBQUEwc0UsTUFFQWx1RSxJQUFBVyxFQUFBWCxFQUFBTyxJQUFBMHRFLEdBRUEsS0FBQXpzRSxLQUFBcUQsTUFBQW9wRSxFQUFBOXZDLE9BQUFnd0MsYUFFQUYsRUFBQXgwRCxXQUNBLFFBQ0F5MEQsTUFBQSxTQUFBdjBELEdBQ0EsT0FBQUEsTUFBQSxFQUFBNEYsSUFBQTVGLEVBQUEsa0JBQ0FuWSxLQUFBaWQsSUFBQTlFLEdBQUFuWSxLQUFBa2QsSUFDQW9KLEVBQUFuTyxFQUFBLEVBQUFxMEQsRUFBQXIwRCxFQUFBLEdBQUFxMEQsRUFBQXIwRCxFQUFBLHdCQ2RBLElBQUEzWixFQUFjekMsRUFBUSxHQUN0QjZ3RSxFQUFBNXNFLEtBQUE2c0UsTUFPQXJ1RSxJQUFBVyxFQUFBWCxFQUFBTyxJQUFBNnRFLEdBQUEsRUFBQUEsRUFBQSxjQUF5RUMsTUFMekUsU0FBQUEsRUFBQTEwRCxHQUNBLE9BQUFrTyxTQUFBbE8sT0FBQSxHQUFBQSxJQUFBLEdBQUEwMEQsR0FBQTEwRCxHQUFBblksS0FBQWlkLElBQUE5RSxFQUFBblksS0FBQXdzRSxLQUFBcjBELElBQUEsSUFBQUEsc0JDSkEsSUFBQTNaLEVBQWN6QyxFQUFRLEdBQ3RCK3dFLEVBQUE5c0UsS0FBQStzRSxNQUdBdnVFLElBQUFXLEVBQUFYLEVBQUFPLElBQUErdEUsR0FBQSxFQUFBQSxHQUFBLGNBQ0FDLE1BQUEsU0FBQTUwRCxHQUNBLFdBQUFBLFFBQUFuWSxLQUFBaWQsS0FBQSxFQUFBOUUsSUFBQSxFQUFBQSxJQUFBLHNCQ05BLElBQUEzWixFQUFjekMsRUFBUSxHQUN0Qm1jLEVBQVduYyxFQUFRLElBRW5CeUMsSUFBQVcsRUFBQSxRQUNBNnRFLEtBQUEsU0FBQTcwRCxHQUNBLE9BQUFELEVBQUFDLE1BQUFuWSxLQUFBZ2QsSUFBQWhkLEtBQUErYyxJQUFBNUUsR0FBQSx5QkNMQSxJQUFBM1osRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFFBQ0E4dEUsTUFBQSxTQUFBOTBELEdBQ0EsT0FBQUEsS0FBQSxNQUFBblksS0FBQXFELE1BQUFyRCxLQUFBaWQsSUFBQTlFLEVBQUEsSUFBQW5ZLEtBQUFrdEUsT0FBQSx1QkNKQSxJQUFBMXVFLEVBQWN6QyxFQUFRLEdBQ3RCOEMsRUFBQW1CLEtBQUFuQixJQUVBTCxJQUFBVyxFQUFBLFFBQ0FndUUsS0FBQSxTQUFBaDFELEdBQ0EsT0FBQXRaLEVBQUFzWixNQUFBdFosR0FBQXNaLElBQUEsc0JDTEEsSUFBQTNaLEVBQWN6QyxFQUFRLEdBQ3RCcWMsRUFBYXJjLEVBQVEsSUFFckJ5QyxJQUFBVyxFQUFBWCxFQUFBTyxHQUFBcVosR0FBQXBZLEtBQUFxWSxPQUFBLFFBQWlFQSxNQUFBRCxxQkNIakUsSUFBQTVaLEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQVcsRUFBQSxRQUE0Qml1RSxPQUFTcnhFLEVBQVEsd0JDRjdDLElBQUFtYyxFQUFXbmMsRUFBUSxJQUNuQmloQixFQUFBaGQsS0FBQWdkLElBQ0FrdkQsRUFBQWx2RCxFQUFBLE9BQ0Fxd0QsRUFBQXJ3RCxFQUFBLE9BQ0Fzd0QsRUFBQXR3RCxFQUFBLFVBQUFxd0QsR0FDQUUsRUFBQXZ3RCxFQUFBLFFBTUE5Z0IsRUFBQUQsUUFBQStELEtBQUFvdEUsUUFBQSxTQUFBajFELEdBQ0EsSUFFQS9XLEVBQUF5RCxFQUZBMm9FLEVBQUF4dEUsS0FBQStjLElBQUE1RSxHQUNBczFELEVBQUF2MUQsRUFBQUMsR0FFQSxPQUFBcTFELEVBQUFELEVBQUFFLEdBQUFELEVBQUFELEVBQUFGLEVBUEEsRUFBQW5CLEVBQUEsRUFBQUEsR0FPQXFCLEVBQUFGLEdBRUF4b0UsR0FEQXpELEdBQUEsRUFBQWlzRSxFQUFBbkIsR0FBQXNCLElBQ0Fwc0UsRUFBQW9zRSxJQUVBRixHQUFBem9FLEtBQUE0b0UsR0FBQXgxRCxLQUNBdzFELEVBQUE1b0Usb0JDcEJBLElBQUFyRyxFQUFjekMsRUFBUSxHQUN0QmdoQixFQUFBL2MsS0FBQStjLElBRUF2ZSxJQUFBVyxFQUFBLFFBQ0F1dUUsTUFBQSxTQUFBQyxFQUFBQyxHQU1BLElBTEEsSUFJQXpxRSxFQUFBK2pFLEVBSkEyRyxFQUFBLEVBQ0ExeEUsRUFBQSxFQUNBNE8sRUFBQTdGLFVBQUFuQyxPQUNBK3FFLEVBQUEsRUFFQTN4RSxFQUFBNE8sR0FFQStpRSxHQURBM3FFLEVBQUE0WixFQUFBN1gsVUFBQS9JLFFBR0EweEUsS0FEQTNHLEVBQUE0RyxFQUFBM3FFLEdBQ0ErakUsRUFBQSxFQUNBNEcsRUFBQTNxRSxHQUdBMHFFLEdBRk8xcUUsRUFBQSxHQUNQK2pFLEVBQUEvakUsRUFBQTJxRSxHQUNBNUcsRUFDTy9qRSxFQUVQLE9BQUEycUUsSUFBQTcxRCxRQUFBNjFELEVBQUE5dEUsS0FBQXdzRSxLQUFBcUIsdUJDckJBLElBQUFydkUsRUFBY3pDLEVBQVEsR0FDdEJneUUsRUFBQS90RSxLQUFBZ3VFLEtBR0F4dkUsSUFBQVcsRUFBQVgsRUFBQU8sRUFBZ0NoRCxFQUFRLEVBQVJBLENBQWtCLFdBQ2xELFVBQUFneUUsRUFBQSxrQkFBQUEsRUFBQWhyRSxTQUNDLFFBQ0RpckUsS0FBQSxTQUFBNzFELEVBQUFtTixHQUNBLElBQ0Eyb0QsR0FBQTkxRCxFQUNBKzFELEdBQUE1b0QsRUFDQTZvRCxFQUhBLE1BR0FGLEVBQ0FHLEVBSkEsTUFJQUYsRUFDQSxTQUFBQyxFQUFBQyxJQUxBLE1BS0FILElBQUEsSUFBQUcsRUFBQUQsR0FMQSxNQUtBRCxJQUFBLGlDQ2JBLElBQUExdkUsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFFBQ0FrdkUsTUFBQSxTQUFBbDJELEdBQ0EsT0FBQW5ZLEtBQUFpZCxJQUFBOUUsR0FBQW5ZLEtBQUFzdUUsMkJDSkEsSUFBQTl2RSxFQUFjekMsRUFBUSxHQUV0QnlDLElBQUFXLEVBQUEsUUFBNEJtbkIsTUFBUXZxQixFQUFRLHdCQ0Y1QyxJQUFBeUMsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFFBQ0FvdkUsS0FBQSxTQUFBcDJELEdBQ0EsT0FBQW5ZLEtBQUFpZCxJQUFBOUUsR0FBQW5ZLEtBQUFrZCx3QkNKQSxJQUFBMWUsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFFBQTRCK1ksS0FBT25jLEVBQVEsdUJDRjNDLElBQUF5QyxFQUFjekMsRUFBUSxHQUN0QnNjLEVBQVl0YyxFQUFRLElBQ3BCOEMsRUFBQW1CLEtBQUFuQixJQUdBTCxJQUFBVyxFQUFBWCxFQUFBTyxFQUFnQ2hELEVBQVEsRUFBUkEsQ0FBa0IsV0FDbEQsZUFBQWlFLEtBQUF3dUUsTUFBQSxTQUNDLFFBQ0RBLEtBQUEsU0FBQXIyRCxHQUNBLE9BQUFuWSxLQUFBK2MsSUFBQTVFLE1BQUEsR0FDQUUsRUFBQUYsR0FBQUUsR0FBQUYsSUFBQSxHQUNBdFosRUFBQXNaLEVBQUEsR0FBQXRaLEdBQUFzWixFQUFBLEtBQUFuWSxLQUFBbXBFLEVBQUEsdUJDWEEsSUFBQTNxRSxFQUFjekMsRUFBUSxHQUN0QnNjLEVBQVl0YyxFQUFRLElBQ3BCOEMsRUFBQW1CLEtBQUFuQixJQUVBTCxJQUFBVyxFQUFBLFFBQ0FzdkUsS0FBQSxTQUFBdDJELEdBQ0EsSUFBQS9XLEVBQUFpWCxFQUFBRixNQUNBblQsRUFBQXFULEdBQUFGLEdBQ0EsT0FBQS9XLEdBQUE2VyxJQUFBLEVBQUFqVCxHQUFBaVQsS0FBQSxHQUFBN1csRUFBQTRELElBQUFuRyxFQUFBc1osR0FBQXRaLEdBQUFzWix3QkNSQSxJQUFBM1osRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBVyxFQUFBLFFBQ0F1dkUsTUFBQSxTQUFBcHVFLEdBQ0EsT0FBQUEsRUFBQSxFQUFBTixLQUFBcUQsTUFBQXJELEtBQUFvRCxNQUFBOUMsdUJDTEEsSUFBQTlCLEVBQWN6QyxFQUFRLEdBQ3RCNkosRUFBc0I3SixFQUFRLElBQzlCNHlFLEVBQUExc0UsT0FBQTBzRSxhQUNBQyxFQUFBM3NFLE9BQUE0c0UsY0FHQXJ3RSxJQUFBVyxFQUFBWCxFQUFBTyxLQUFBNnZFLEdBQUEsR0FBQUEsRUFBQTdyRSxRQUFBLFVBRUE4ckUsY0FBQSxTQUFBMTJELEdBS0EsSUFKQSxJQUdBMm1ELEVBSEFuNkQsRUFBQSxHQUNBb0csRUFBQTdGLFVBQUFuQyxPQUNBNUcsRUFBQSxFQUVBNE8sRUFBQTVPLEdBQUEsQ0FFQSxHQURBMmlFLEdBQUE1NUQsVUFBQS9JLEtBQ0F5SixFQUFBazVELEVBQUEsV0FBQUEsRUFBQSxNQUFBaDRELFdBQUFnNEQsRUFBQSw4QkFDQW42RCxFQUFBRyxLQUFBZzZELEVBQUEsTUFDQTZQLEVBQUE3UCxHQUNBNlAsRUFBQSxRQUFBN1AsR0FBQSxZQUFBQSxFQUFBLGFBRUssT0FBQW42RCxFQUFBM0MsS0FBQSx3QkNwQkwsSUFBQXhELEVBQWN6QyxFQUFRLEdBQ3RCeUgsRUFBZ0J6SCxFQUFRLElBQ3hCK0gsRUFBZS9ILEVBQVEsR0FFdkJ5QyxJQUFBVyxFQUFBLFVBRUF1MkIsSUFBQSxTQUFBbzVDLEdBTUEsSUFMQSxJQUFBQyxFQUFBdnJFLEVBQUFzckUsRUFBQXA1QyxLQUNBcm9CLEVBQUF2SixFQUFBaXJFLEVBQUFoc0UsUUFDQWdJLEVBQUE3RixVQUFBbkMsT0FDQTRCLEVBQUEsR0FDQXhJLEVBQUEsRUFDQWtSLEVBQUFsUixHQUNBd0ksRUFBQUcsS0FBQTdDLE9BQUE4c0UsRUFBQTV5RSxPQUNBQSxFQUFBNE8sR0FBQXBHLEVBQUFHLEtBQUE3QyxPQUFBaUQsVUFBQS9JLEtBQ0ssT0FBQXdJLEVBQUEzQyxLQUFBLHFDQ2JMakcsRUFBUSxHQUFSQSxDQUF3QixnQkFBQStwQixHQUN4QixrQkFDQSxPQUFBQSxFQUFBNWpCLEtBQUEsb0NDSEEsSUFBQThzRSxFQUFVanpFLEVBQVEsR0FBUkEsRUFBc0IsR0FHaENBLEVBQVEsR0FBUkEsQ0FBd0JrRyxPQUFBLGtCQUFBOFgsR0FDeEI3WCxLQUFBK1AsR0FBQWhRLE9BQUE4WCxHQUNBN1gsS0FBQThYLEdBQUEsR0FFQyxXQUNELElBRUFpMUQsRUFGQS90RSxFQUFBZ0IsS0FBQStQLEdBQ0FyTixFQUFBMUMsS0FBQThYLEdBRUEsT0FBQXBWLEdBQUExRCxFQUFBNkIsT0FBQSxDQUFpQzNGLFdBQUFzQyxFQUFBMEwsTUFBQSxJQUNqQzZqRSxFQUFBRCxFQUFBOXRFLEVBQUEwRCxHQUNBMUMsS0FBQThYLElBQUFpMUQsRUFBQWxzRSxPQUNBLENBQVUzRixNQUFBNnhFLEVBQUE3akUsTUFBQSxvQ0NkVixJQUFBNU0sRUFBY3pDLEVBQVEsR0FDdEJpekUsRUFBVWp6RSxFQUFRLEdBQVJBLEVBQXNCLEdBQ2hDeUMsSUFBQWEsRUFBQSxVQUVBNnZFLFlBQUEsU0FBQTMyRCxHQUNBLE9BQUF5MkQsRUFBQTlzRSxLQUFBcVcsb0NDSkEsSUFBQS9aLEVBQWN6QyxFQUFRLEdBQ3RCK0gsRUFBZS9ILEVBQVEsR0FDdkJtNUIsRUFBY241QixFQUFRLElBRXRCb3pFLEVBQUEsWUFFQTN3RSxJQUFBYSxFQUFBYixFQUFBTyxFQUFnQ2hELEVBQVEsR0FBUkEsQ0FIaEMsWUFHNEQsVUFDNURxekUsU0FBQSxTQUFBMzFELEdBQ0EsSUFBQS9VLEVBQUF3d0IsRUFBQWh6QixLQUFBdVgsRUFMQSxZQU1BNDFELEVBQUFucUUsVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLEVBQ0EyTixFQUFBdkosRUFBQVksRUFBQTNCLFFBQ0E4SixPQUFBbk4sSUFBQTJ2RSxFQUFBaGlFLEVBQUFyTixLQUFBWSxJQUFBa0QsRUFBQXVyRSxHQUFBaGlFLEdBQ0FpaUUsRUFBQXJ0RSxPQUFBd1gsR0FDQSxPQUFBMDFELEVBQ0FBLEVBQUE3eUUsS0FBQW9JLEVBQUE0cUUsRUFBQXppRSxHQUNBbkksRUFBQVUsTUFBQXlILEVBQUF5aUUsRUFBQXZzRSxPQUFBOEosS0FBQXlpRSxtQ0NmQSxJQUFBOXdFLEVBQWN6QyxFQUFRLEdBQ3RCbTVCLEVBQWNuNUIsRUFBUSxJQUd0QnlDLElBQUFhLEVBQUFiLEVBQUFPLEVBQWdDaEQsRUFBUSxHQUFSQSxDQUZoQyxZQUU0RCxVQUM1RHFRLFNBQUEsU0FBQXFOLEdBQ0EsU0FBQXliLEVBQUFoekIsS0FBQXVYLEVBSkEsWUFLQXZOLFFBQUF1TixFQUFBdlUsVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLHVCQ1RBLElBQUFsQixFQUFjekMsRUFBUSxHQUV0QnlDLElBQUFhLEVBQUEsVUFFQWd0QixPQUFVdHdCLEVBQVEsb0NDRmxCLElBQUF5QyxFQUFjekMsRUFBUSxHQUN0QitILEVBQWUvSCxFQUFRLEdBQ3ZCbTVCLEVBQWNuNUIsRUFBUSxJQUV0Qnd6RSxFQUFBLGNBRUEvd0UsSUFBQWEsRUFBQWIsRUFBQU8sRUFBZ0NoRCxFQUFRLEdBQVJBLENBSGhDLGNBRzRELFVBQzVEeXpFLFdBQUEsU0FBQS8xRCxHQUNBLElBQUEvVSxFQUFBd3dCLEVBQUFoekIsS0FBQXVYLEVBTEEsY0FNQTdVLEVBQUFkLEVBQUE5RCxLQUFBWSxJQUFBc0UsVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLEVBQUFnRixFQUFBM0IsU0FDQXVzRSxFQUFBcnRFLE9BQUF3WCxHQUNBLE9BQUE4MUQsRUFDQUEsRUFBQWp6RSxLQUFBb0ksRUFBQTRxRSxFQUFBMXFFLEdBQ0FGLEVBQUFVLE1BQUFSLElBQUEwcUUsRUFBQXZzRSxVQUFBdXNFLG1DQ2JBdnpFLEVBQVEsR0FBUkEsQ0FBd0Isa0JBQUF1RyxHQUN4QixnQkFBQTVGLEdBQ0EsT0FBQTRGLEVBQUFKLEtBQUEsV0FBQXhGLG9DQ0ZBWCxFQUFRLEdBQVJBLENBQXdCLGVBQUF1RyxHQUN4QixrQkFDQSxPQUFBQSxFQUFBSixLQUFBLDhDQ0ZBbkcsRUFBUSxHQUFSQSxDQUF3QixpQkFBQXVHLEdBQ3hCLGtCQUNBLE9BQUFBLEVBQUFKLEtBQUEsZ0RDRkFuRyxFQUFRLEdBQVJBLENBQXdCLGdCQUFBdUcsR0FDeEIsa0JBQ0EsT0FBQUEsRUFBQUosS0FBQSw0Q0NGQW5HLEVBQVEsR0FBUkEsQ0FBd0IsaUJBQUF1RyxHQUN4QixrQkFDQSxPQUFBQSxFQUFBSixLQUFBLDZDQ0ZBbkcsRUFBUSxHQUFSQSxDQUF3QixxQkFBQXVHLEdBQ3hCLGdCQUFBbXRFLEdBQ0EsT0FBQW50RSxFQUFBSixLQUFBLGVBQUF1dEUsb0NDRkExekUsRUFBUSxHQUFSQSxDQUF3QixvQkFBQXVHLEdBQ3hCLGdCQUFBb3RFLEdBQ0EsT0FBQXB0RSxFQUFBSixLQUFBLGNBQUF3dEUsb0NDRkEzekUsRUFBUSxHQUFSQSxDQUF3QixtQkFBQXVHLEdBQ3hCLGtCQUNBLE9BQUFBLEVBQUFKLEtBQUEsNENDRkFuRyxFQUFRLEdBQVJBLENBQXdCLGdCQUFBdUcsR0FDeEIsZ0JBQUFxdEUsR0FDQSxPQUFBcnRFLEVBQUFKLEtBQUEsV0FBQXl0RSxvQ0NGQTV6RSxFQUFRLEdBQVJBLENBQXdCLGlCQUFBdUcsR0FDeEIsa0JBQ0EsT0FBQUEsRUFBQUosS0FBQSxnRENGQW5HLEVBQVEsR0FBUkEsQ0FBd0Isa0JBQUF1RyxHQUN4QixrQkFDQSxPQUFBQSxFQUFBSixLQUFBLGlEQ0ZBbkcsRUFBUSxHQUFSQSxDQUF3QixlQUFBdUcsR0FDeEIsa0JBQ0EsT0FBQUEsRUFBQUosS0FBQSw4Q0NGQW5HLEVBQVEsR0FBUkEsQ0FBd0IsZUFBQXVHLEdBQ3hCLGtCQUNBLE9BQUFBLEVBQUFKLEtBQUEsaUNDSEEsSUFBQTFELEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQVcsRUFBQSxRQUE0QmdkLElBQUEsV0FBbUIsV0FBQW1ULE1BQUFDLDJDQ0YvQyxJQUFBL3dCLEVBQWN6QyxFQUFRLEdBQ3RCOEgsRUFBZTlILEVBQVEsSUFDdkJnRixFQUFrQmhGLEVBQVEsSUFFMUJ5QyxJQUFBYSxFQUFBYixFQUFBTyxFQUFnQ2hELEVBQVEsRUFBUkEsQ0FBa0IsV0FDbEQsa0JBQUF1ekIsS0FBQXZSLEtBQUE2eEQsVUFDNEUsSUFBNUV0Z0QsS0FBQXZ4QixVQUFBNnhFLE9BQUF0ekUsS0FBQSxDQUFtQ3V6RSxZQUFBLFdBQTJCLGNBQzdELFFBRURELE9BQUEsU0FBQWx5RSxHQUNBLElBQUF3RCxFQUFBMkMsRUFBQTNCLE1BQ0E0dEUsRUFBQS91RSxFQUFBRyxHQUNBLHVCQUFBNHVFLEdBQUF6cEQsU0FBQXlwRCxHQUFBNXVFLEVBQUEydUUsY0FBQSx5QkNaQSxJQUFBcnhFLEVBQWN6QyxFQUFRLEdBQ3RCOHpFLEVBQWtCOXpFLEVBQVEsS0FHMUJ5QyxJQUFBYSxFQUFBYixFQUFBTyxHQUFBdXdCLEtBQUF2eEIsVUFBQTh4RSxpQkFBQSxRQUNBQSw4Q0NKQSxJQUFBenRFLEVBQVlyRyxFQUFRLEdBQ3BCd3pCLEVBQUFELEtBQUF2eEIsVUFBQXd4QixRQUNBd2dELEVBQUF6Z0QsS0FBQXZ4QixVQUFBOHhFLFlBRUFHLEVBQUEsU0FBQUMsR0FDQSxPQUFBQSxFQUFBLEVBQUFBLEVBQUEsSUFBQUEsR0FJQS96RSxFQUFBRCxRQUFBbUcsRUFBQSxXQUNBLGtDQUFBMnRFLEVBQUF6ekUsS0FBQSxJQUFBZ3pCLE1BQUEsYUFDQ2x0QixFQUFBLFdBQ0QydEUsRUFBQXp6RSxLQUFBLElBQUFnekIsS0FBQXZSLFFBQ0MsV0FDRCxJQUFBc0ksU0FBQWtKLEVBQUFqekIsS0FBQTRGLE9BQUEsTUFBQTRFLFdBQUEsc0JBQ0EsSUFBQXJLLEVBQUF5RixLQUNBb2pCLEVBQUE3b0IsRUFBQXl6RSxpQkFDQTN6RSxFQUFBRSxFQUFBMHpFLHFCQUNBanlFLEVBQUFvbkIsRUFBQSxNQUFBQSxFQUFBLFlBQ0EsT0FBQXBuQixHQUFBLFFBQUE4QixLQUFBK2MsSUFBQXVJLElBQUFsZ0IsTUFBQWxILEdBQUEsTUFDQSxJQUFBOHhFLEVBQUF2ekUsRUFBQTJ6RSxjQUFBLE9BQUFKLEVBQUF2ekUsRUFBQTR6RSxjQUNBLElBQUFMLEVBQUF2ekUsRUFBQTZ6RSxlQUFBLElBQUFOLEVBQUF2ekUsRUFBQTh6RSxpQkFDQSxJQUFBUCxFQUFBdnpFLEVBQUErekUsaUJBQUEsS0FBQWowRSxFQUFBLEdBQUFBLEVBQUEsSUFBQXl6RSxFQUFBenpFLElBQUEsS0FDQ3d6RSxtQkN6QkQsSUFBQVUsRUFBQW5oRCxLQUFBdnhCLFVBR0EwRCxFQUFBZ3ZFLEVBQUEsU0FDQWxoRCxFQUFBa2hELEVBQUFsaEQsUUFDQSxJQUFBRCxLQUFBdlIsS0FBQSxJQUpBLGdCQUtFaGlCLEVBQVEsR0FBUkEsQ0FBcUIwMEUsRUFKdkIsV0FJdUIsV0FDdkIsSUFBQXJ6RSxFQUFBbXlCLEVBQUFqekIsS0FBQTRGLE1BRUEsT0FBQTlFLEtBQUFxRSxFQUFBbkYsS0FBQTRGLE1BUkEsa0NDREEsSUFBQW9tRSxFQUFtQnZzRSxFQUFRLEVBQVJBLENBQWdCLGVBQ25DeVAsRUFBQThqQixLQUFBdnhCLFVBRUF1cUUsS0FBQTk4RCxHQUE4QnpQLEVBQVEsR0FBUkEsQ0FBaUJ5UCxFQUFBODhELEVBQXVCdnNFLEVBQVEsb0NDRjlFLElBQUE4RSxFQUFlOUUsRUFBUSxHQUN2QmdGLEVBQWtCaEYsRUFBUSxJQUcxQkcsRUFBQUQsUUFBQSxTQUFBeTBFLEdBQ0EsY0FBQUEsR0FIQSxXQUdBQSxHQUFBLFlBQUFBLEVBQUEsTUFBQW53RSxVQUFBLGtCQUNBLE9BQUFRLEVBQUFGLEVBQUFxQixNQUpBLFVBSUF3dUUscUJDTkEsSUFBQWx5RSxFQUFjekMsRUFBUSxHQUV0QnlDLElBQUFXLEVBQUEsU0FBNkJ1WSxRQUFVM2IsRUFBUSxvQ0NGL0MsSUFBQXdDLEVBQVV4QyxFQUFRLElBQ2xCeUMsRUFBY3pDLEVBQVEsR0FDdEI4SCxFQUFlOUgsRUFBUSxJQUN2Qk8sRUFBV1AsRUFBUSxLQUNuQitKLEVBQWtCL0osRUFBUSxJQUMxQitILEVBQWUvSCxFQUFRLEdBQ3ZCNDBFLEVBQXFCNTBFLEVBQVEsSUFDN0JrSyxFQUFnQmxLLEVBQVEsSUFFeEJ5QyxJQUFBVyxFQUFBWCxFQUFBTyxHQUFpQ2hELEVBQVEsR0FBUkEsQ0FBd0IsU0FBQW9ULEdBQW1CbEksTUFBQXdJLEtBQUFOLEtBQW9CLFNBRWhHTSxLQUFBLFNBQUF0QyxHQUNBLElBT0FwSyxFQUFBOEIsRUFBQWdHLEVBQUFDLEVBUEE1SixFQUFBMkMsRUFBQXNKLEdBQ0E5QyxFQUFBLG1CQUFBbkksVUFBQStFLE1BQ0E4RCxFQUFBN0YsVUFBQW5DLE9BQ0FpSSxFQUFBRCxFQUFBLEVBQUE3RixVQUFBLFFBQUF4RixFQUNBdUwsT0FBQXZMLElBQUFzTCxFQUNBcEcsRUFBQSxFQUNBc0csRUFBQWpGLEVBQUEvRSxHQUlBLEdBRkErSixJQUFBRCxFQUFBek0sRUFBQXlNLEVBQUFELEVBQUEsRUFBQTdGLFVBQUEsUUFBQXhGLEVBQUEsSUFFQUEsTUFBQXdMLEdBQUFiLEdBQUFwRCxPQUFBbkIsRUFBQW9GLEdBTUEsSUFBQXJHLEVBQUEsSUFBQXdGLEVBREF0SCxFQUFBZSxFQUFBNUMsRUFBQTZCLFNBQ2tDQSxFQUFBNkIsRUFBZ0JBLElBQ2xEK3JFLEVBQUE5ckUsRUFBQUQsRUFBQXFHLEVBQUFELEVBQUE5SixFQUFBMEQsTUFBQTFELEVBQUEwRCxTQU5BLElBQUFrRyxFQUFBSSxFQUFBNU8sS0FBQTRFLEdBQUEyRCxFQUFBLElBQUF3RixJQUF1RFEsRUFBQUMsRUFBQUssUUFBQUMsS0FBZ0N4RyxJQUN2RityRSxFQUFBOXJFLEVBQUFELEVBQUFxRyxFQUFBM08sRUFBQXdPLEVBQUFFLEVBQUEsQ0FBQUgsRUFBQXpOLE1BQUF3SCxJQUFBLEdBQUFpRyxFQUFBek4sT0FTQSxPQURBeUgsRUFBQTlCLE9BQUE2QixFQUNBQyxtQ0NqQ0EsSUFBQXJHLEVBQWN6QyxFQUFRLEdBQ3RCNDBFLEVBQXFCNTBFLEVBQVEsSUFHN0J5QyxJQUFBVyxFQUFBWCxFQUFBTyxFQUFnQ2hELEVBQVEsRUFBUkEsQ0FBa0IsV0FDbEQsU0FBQWdELEtBQ0EsUUFBQWtJLE1BQUF1SSxHQUFBbFQsS0FBQXlDLGtCQUNDLFNBRUR5USxHQUFBLFdBSUEsSUFIQSxJQUFBNUssRUFBQSxFQUNBbUcsRUFBQTdGLFVBQUFuQyxPQUNBOEIsRUFBQSx1QkFBQTNDLFVBQUErRSxPQUFBOEQsR0FDQUEsRUFBQW5HLEdBQUErckUsRUFBQTlyRSxFQUFBRCxFQUFBTSxVQUFBTixNQUVBLE9BREFDLEVBQUE5QixPQUFBZ0ksRUFDQWxHLG1DQ2RBLElBQUFyRyxFQUFjekMsRUFBUSxHQUN0QnlILEVBQWdCekgsRUFBUSxJQUN4QjJNLEVBQUEsR0FBQTFHLEtBR0F4RCxJQUFBYSxFQUFBYixFQUFBTyxHQUFpQ2hELEVBQVEsS0FBWWMsU0FBZ0JkLEVBQVEsR0FBUkEsQ0FBMEIyTSxJQUFBLFNBQy9GMUcsS0FBQSxTQUFBcUssR0FDQSxPQUFBM0QsRUFBQXBNLEtBQUFrSCxFQUFBdEIsV0FBQXhDLElBQUEyTSxFQUFBLElBQUFBLG9DQ1JBLElBQUE3TixFQUFjekMsRUFBUSxHQUN0Qm9mLEVBQVdwZixFQUFRLElBQ25CMFcsRUFBVTFXLEVBQVEsSUFDbEI2SixFQUFzQjdKLEVBQVEsSUFDOUIrSCxFQUFlL0gsRUFBUSxHQUN2QjhNLEVBQUEsR0FBQXpELE1BR0E1RyxJQUFBYSxFQUFBYixFQUFBTyxFQUFnQ2hELEVBQVEsRUFBUkEsQ0FBa0IsV0FDbERvZixHQUFBdFMsRUFBQXZNLEtBQUE2ZSxLQUNDLFNBQ0QvVixNQUFBLFNBQUF3SCxFQUFBQyxHQUNBLElBQUFRLEVBQUF2SixFQUFBNUIsS0FBQWEsUUFDQWtNLEVBQUF3RCxFQUFBdlEsTUFFQSxHQURBMkssT0FBQW5OLElBQUFtTixFQUFBUSxFQUFBUixFQUNBLFNBQUFvQyxFQUFBLE9BQUFwRyxFQUFBdk0sS0FBQTRGLEtBQUEwSyxFQUFBQyxHQU1BLElBTEEsSUFBQW5CLEVBQUE5RixFQUFBZ0gsRUFBQVMsR0FDQXVqRSxFQUFBaHJFLEVBQUFpSCxFQUFBUSxHQUNBcWlFLEVBQUE1ckUsRUFBQThzRSxFQUFBbGxFLEdBQ0ErcUIsRUFBQSxJQUFBeHZCLE1BQUF5b0UsR0FDQXZ6RSxFQUFBLEVBQ1VBLEVBQUF1ekUsRUFBVXZ6RSxJQUFBczZCLEVBQUF0NkIsR0FBQSxVQUFBOFMsRUFDcEIvTSxLQUFBdVcsT0FBQS9NLEVBQUF2UCxHQUNBK0YsS0FBQXdKLEVBQUF2UCxHQUNBLE9BQUFzNkIsbUNDeEJBLElBQUFqNEIsRUFBY3pDLEVBQVEsR0FDdEJnSixFQUFnQmhKLEVBQVEsSUFDeEI4SCxFQUFlOUgsRUFBUSxJQUN2QnFHLEVBQVlyRyxFQUFRLEdBQ3BCODBFLEVBQUEsR0FBQWpvRSxLQUNBL0YsRUFBQSxRQUVBckUsSUFBQWEsRUFBQWIsRUFBQU8sR0FBQXFELEVBQUEsV0FFQVMsRUFBQStGLFVBQUFsSixPQUNDMEMsRUFBQSxXQUVEUyxFQUFBK0YsS0FBQSxVQUVPN00sRUFBUSxHQUFSQSxDQUEwQjgwRSxJQUFBLFNBRWpDam9FLEtBQUEsU0FBQThELEdBQ0EsWUFBQWhOLElBQUFnTixFQUNBbWtFLEVBQUF2MEUsS0FBQXVILEVBQUEzQixPQUNBMnVFLEVBQUF2MEUsS0FBQXVILEVBQUEzQixNQUFBNkMsRUFBQTJILHFDQ25CQSxJQUFBbE8sRUFBY3pDLEVBQVEsR0FDdEIrMEUsRUFBZS8wRSxFQUFRLEdBQVJBLENBQTBCLEdBQ3pDZzFFLEVBQWFoMUUsRUFBUSxHQUFSQSxDQUEwQixHQUFBa1EsU0FBQSxHQUV2Q3pOLElBQUFhLEVBQUFiLEVBQUFPLEdBQUFneUUsRUFBQSxTQUVBOWtFLFFBQUEsU0FBQXhILEdBQ0EsT0FBQXFzRSxFQUFBNXVFLEtBQUF1QyxFQUFBUyxVQUFBLHdCQ1BBLElBQUFtQixFQUF5QnRLLEVBQVEsS0FFakNHLEVBQUFELFFBQUEsU0FBQTI2QixFQUFBN3pCLEdBQ0EsV0FBQXNELEVBQUF1d0IsR0FBQSxDQUFBN3pCLHFCQ0pBLElBQUExQyxFQUFldEUsRUFBUSxHQUN2QjJiLEVBQWMzYixFQUFRLElBQ3RCdVcsRUFBY3ZXLEVBQVEsRUFBUkEsQ0FBZ0IsV0FFOUJHLEVBQUFELFFBQUEsU0FBQTI2QixHQUNBLElBQUF2c0IsRUFTRyxPQVJIcU4sRUFBQWtmLEtBR0EsbUJBRkF2c0IsRUFBQXVzQixFQUFBOW9CLGNBRUF6RCxJQUFBcEQsUUFBQXlRLEVBQUFyTixFQUFBdE0sYUFBQXNNLE9BQUEzSyxHQUNBVyxFQUFBZ0ssSUFFQSxRQURBQSxJQUFBaUksTUFDQWpJLE9BQUEzSyxTQUVHQSxJQUFBMkssRUFBQXBELE1BQUFvRCxpQ0NiSCxJQUFBN0wsRUFBY3pDLEVBQVEsR0FDdEIyTixFQUFXM04sRUFBUSxHQUFSQSxDQUEwQixHQUVyQ3lDLElBQUFhLEVBQUFiLEVBQUFPLEdBQWlDaEQsRUFBUSxHQUFSQSxDQUEwQixHQUFBdVEsS0FBQSxZQUUzREEsSUFBQSxTQUFBN0gsR0FDQSxPQUFBaUYsRUFBQXhILEtBQUF1QyxFQUFBUyxVQUFBLHFDQ05BLElBQUExRyxFQUFjekMsRUFBUSxHQUN0QmkxRSxFQUFjajFFLEVBQVEsR0FBUkEsQ0FBMEIsR0FFeEN5QyxJQUFBYSxFQUFBYixFQUFBTyxHQUFpQ2hELEVBQVEsR0FBUkEsQ0FBMEIsR0FBQThQLFFBQUEsWUFFM0RBLE9BQUEsU0FBQXBILEdBQ0EsT0FBQXVzRSxFQUFBOXVFLEtBQUF1QyxFQUFBUyxVQUFBLHFDQ05BLElBQUExRyxFQUFjekMsRUFBUSxHQUN0QmsxRSxFQUFZbDFFLEVBQVEsR0FBUkEsQ0FBMEIsR0FFdEN5QyxJQUFBYSxFQUFBYixFQUFBTyxHQUFpQ2hELEVBQVEsR0FBUkEsQ0FBMEIsR0FBQTBRLE1BQUEsWUFFM0RBLEtBQUEsU0FBQWhJLEdBQ0EsT0FBQXdzRSxFQUFBL3VFLEtBQUF1QyxFQUFBUyxVQUFBLHFDQ05BLElBQUExRyxFQUFjekMsRUFBUSxHQUN0Qm0xRSxFQUFhbjFFLEVBQVEsR0FBUkEsQ0FBMEIsR0FFdkN5QyxJQUFBYSxFQUFBYixFQUFBTyxHQUFpQ2hELEVBQVEsR0FBUkEsQ0FBMEIsR0FBQTRQLE9BQUEsWUFFM0RBLE1BQUEsU0FBQWxILEdBQ0EsT0FBQXlzRSxFQUFBaHZFLEtBQUF1QyxFQUFBUyxVQUFBLHFDQ05BLElBQUExRyxFQUFjekMsRUFBUSxHQUN0Qm8xRSxFQUFjcDFFLEVBQVEsS0FFdEJ5QyxJQUFBYSxFQUFBYixFQUFBTyxHQUFpQ2hELEVBQVEsR0FBUkEsQ0FBMEIsR0FBQXdNLFFBQUEsWUFFM0RBLE9BQUEsU0FBQTlELEdBQ0EsT0FBQTBzRSxFQUFBanZFLEtBQUF1QyxFQUFBUyxVQUFBbkMsT0FBQW1DLFVBQUEsd0NDTkEsSUFBQTFHLEVBQWN6QyxFQUFRLEdBQ3RCbzFFLEVBQWNwMUUsRUFBUSxLQUV0QnlDLElBQUFhLEVBQUFiLEVBQUFPLEdBQWlDaEQsRUFBUSxHQUFSQSxDQUEwQixHQUFBME0sYUFBQSxZQUUzREEsWUFBQSxTQUFBaEUsR0FDQSxPQUFBMHNFLEVBQUFqdkUsS0FBQXVDLEVBQUFTLFVBQUFuQyxPQUFBbUMsVUFBQSx3Q0NOQSxJQUFBMUcsRUFBY3pDLEVBQVEsR0FDdEJxMUUsRUFBZXIxRSxFQUFRLEdBQVJBLEVBQTJCLEdBQzFDcWQsRUFBQSxHQUFBbE4sUUFDQW1sRSxJQUFBajRELEdBQUEsTUFBQWxOLFFBQUEsUUFFQTFOLElBQUFhLEVBQUFiLEVBQUFPLEdBQUFzeUUsSUFBbUR0MUUsRUFBUSxHQUFSQSxDQUEwQnFkLElBQUEsU0FFN0VsTixRQUFBLFNBQUFDLEdBQ0EsT0FBQWtsRSxFQUVBajRELEVBQUFuVSxNQUFBL0MsS0FBQWdELFlBQUEsRUFDQWtzRSxFQUFBbHZFLEtBQUFpSyxFQUFBakgsVUFBQSxxQ0NYQSxJQUFBMUcsRUFBY3pDLEVBQVEsR0FDdEJ5SCxFQUFnQnpILEVBQVEsSUFDeEI0RSxFQUFnQjVFLEVBQVEsSUFDeEIrSCxFQUFlL0gsRUFBUSxHQUN2QnFkLEVBQUEsR0FBQS9RLFlBQ0FncEUsSUFBQWo0RCxHQUFBLE1BQUEvUSxZQUFBLFFBRUE3SixJQUFBYSxFQUFBYixFQUFBTyxHQUFBc3lFLElBQW1EdDFFLEVBQVEsR0FBUkEsQ0FBMEJxZCxJQUFBLFNBRTdFL1EsWUFBQSxTQUFBOEQsR0FFQSxHQUFBa2xFLEVBQUEsT0FBQWo0RCxFQUFBblUsTUFBQS9DLEtBQUFnRCxZQUFBLEVBQ0EsSUFBQWhFLEVBQUFzQyxFQUFBdEIsTUFDQWEsRUFBQWUsRUFBQTVDLEVBQUE2QixRQUNBNkIsRUFBQTdCLEVBQUEsRUFHQSxJQUZBbUMsVUFBQW5DLE9BQUEsSUFBQTZCLEVBQUE1RSxLQUFBWSxJQUFBZ0UsRUFBQWpFLEVBQUF1RSxVQUFBLE1BQ0FOLEVBQUEsSUFBQUEsRUFBQTdCLEVBQUE2QixHQUNVQSxHQUFBLEVBQVdBLElBQUEsR0FBQUEsS0FBQTFELEtBQUEwRCxLQUFBdUgsRUFBQSxPQUFBdkgsR0FBQSxFQUNyQiw2QkNsQkEsSUFBQXBHLEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQWEsRUFBQSxTQUE2Qm9NLFdBQWExUCxFQUFRLE9BRWxEQSxFQUFRLEdBQVJBLENBQStCLCtCQ0ovQixJQUFBeUMsRUFBY3pDLEVBQVEsR0FFdEJ5QyxJQUFBYSxFQUFBLFNBQTZCdU0sS0FBTzdQLEVBQVEsTUFFNUNBLEVBQVEsR0FBUkEsQ0FBK0Isc0NDSC9CLElBQUF5QyxFQUFjekMsRUFBUSxHQUN0QnUxRSxFQUFZdjFFLEVBQVEsR0FBUkEsQ0FBMEIsR0FFdEM4cUIsR0FBQSxFQURBLFFBR0EsSUFBQTVmLE1BQUEsbUJBQTBDNGYsR0FBQSxJQUMxQ3JvQixJQUFBYSxFQUFBYixFQUFBTyxFQUFBOG5CLEVBQUEsU0FDQS9hLEtBQUEsU0FBQXJILEdBQ0EsT0FBQTZzRSxFQUFBcHZFLEtBQUF1QyxFQUFBUyxVQUFBbkMsT0FBQSxFQUFBbUMsVUFBQSxRQUFBeEYsTUFHQTNELEVBQVEsR0FBUkEsQ0FUQSxzQ0NGQSxJQUFBeUMsRUFBY3pDLEVBQVEsR0FDdEJ1MUUsRUFBWXYxRSxFQUFRLEdBQVJBLENBQTBCLEdBQ3RDNEgsRUFBQSxZQUNBa2pCLEdBQUEsRUFFQWxqQixJQUFBLElBQUFzRCxNQUFBLEdBQUF0RCxHQUFBLFdBQTBDa2pCLEdBQUEsSUFDMUNyb0IsSUFBQWEsRUFBQWIsRUFBQU8sRUFBQThuQixFQUFBLFNBQ0E3YSxVQUFBLFNBQUF2SCxHQUNBLE9BQUE2c0UsRUFBQXB2RSxLQUFBdUMsRUFBQVMsVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLE1BR0EzRCxFQUFRLEdBQVJBLENBQStCNEgsb0JDYi9CNUgsRUFBUSxHQUFSQSxDQUF3QiwwQkNBeEIsSUFBQW9DLEVBQWFwQyxFQUFRLEdBQ3JCbWEsRUFBd0JuYSxFQUFRLElBQ2hDaUYsRUFBU2pGLEVBQVEsR0FBY2tGLEVBQy9CK0UsRUFBV2pLLEVBQVEsSUFBZ0JrRixFQUNuQ3VZLEVBQWV6ZCxFQUFRLElBQ3ZCdzFFLEVBQWF4MUUsRUFBUSxJQUNyQnkxRSxFQUFBcnpFLEVBQUFzVixPQUNBckYsRUFBQW9qRSxFQUNBaG1FLEVBQUFnbUUsRUFBQXp6RSxVQUNBb2MsRUFBQSxLQUNBQyxFQUFBLEtBRUFxM0QsRUFBQSxJQUFBRCxFQUFBcjNELE9BRUEsR0FBSXBlLEVBQVEsTUFBZ0IwMUUsR0FBc0IxMUUsRUFBUSxFQUFSQSxDQUFrQixXQUdwRSxPQUZBcWUsRUFBTXJlLEVBQVEsRUFBUkEsQ0FBZ0IsYUFFdEJ5MUUsRUFBQXIzRCxPQUFBcTNELEVBQUFwM0QsT0FBQSxRQUFBbzNELEVBQUFyM0QsRUFBQSxRQUNDLENBQ0RxM0QsRUFBQSxTQUFBdnpFLEVBQUFnRCxHQUNBLElBQUF5d0UsRUFBQXh2RSxnQkFBQXN2RSxFQUNBRyxFQUFBbjRELEVBQUF2YixHQUNBMnpFLE9BQUFseUUsSUFBQXVCLEVBQ0EsT0FBQXl3RSxHQUFBQyxHQUFBMXpFLEVBQUE2UCxjQUFBMGpFLEdBQUFJLEVBQUEzekUsRUFDQWlZLEVBQUF1N0QsRUFDQSxJQUFBcmpFLEVBQUF1akUsSUFBQUMsRUFBQTN6RSxFQUFBUyxPQUFBVCxFQUFBZ0QsR0FDQW1OLEdBQUF1akUsRUFBQTF6RSxhQUFBdXpFLEdBQUF2ekUsRUFBQVMsT0FBQVQsRUFBQTB6RSxHQUFBQyxFQUFBTCxFQUFBajFFLEtBQUEyQixHQUFBZ0QsR0FDQXl3RSxFQUFBeHZFLEtBQUFzSixFQUFBZ21FLElBU0EsSUFQQSxJQUFBM3VDLEVBQUEsU0FBQW5sQyxHQUNBQSxLQUFBOHpFLEdBQUF4d0UsRUFBQXd3RSxFQUFBOXpFLEVBQUEsQ0FDQWlRLGNBQUEsRUFDQTNRLElBQUEsV0FBd0IsT0FBQW9SLEVBQUExUSxJQUN4QnNNLElBQUEsU0FBQTFKLEdBQTBCOE4sRUFBQTFRLEdBQUE0QyxNQUcxQjJILEVBQUFqQyxFQUFBb0ksR0FBQWpTLEVBQUEsRUFBb0M4TCxFQUFBbEYsT0FBQTVHLEdBQWlCMG1DLEVBQUE1NkIsRUFBQTlMLE1BQ3JEcVAsRUFBQXNDLFlBQUEwakUsRUFDQUEsRUFBQXp6RSxVQUFBeU4sRUFDRXpQLEVBQVEsR0FBUkEsQ0FBcUJvQyxFQUFBLFNBQUFxekUsR0FHdkJ6MUUsRUFBUSxHQUFSQSxDQUF3Qix3Q0N6Q3hCQSxFQUFRLEtBQ1IsSUFBQThFLEVBQWU5RSxFQUFRLEdBQ3ZCdzFFLEVBQWF4MUUsRUFBUSxJQUNyQnNXLEVBQWtCdFcsRUFBUSxHQUUxQjBGLEVBQUEsYUFFQW93RSxFQUFBLFNBQUFqdUUsR0FDRTdILEVBQVEsR0FBUkEsQ0FBcUIwWCxPQUFBMVYsVUFKdkIsV0FJdUI2RixHQUFBLElBSW5CN0gsRUFBUSxFQUFSQSxDQUFrQixXQUFlLE1BQWtELFFBQWxEMEYsRUFBQW5GLEtBQUEsQ0FBd0JvQyxPQUFBLElBQUFvb0IsTUFBQSxRQUM3RCtxRCxFQUFBLFdBQ0EsSUFBQS94RSxFQUFBZSxFQUFBcUIsTUFDQSxVQUFBa04sT0FBQXRQLEVBQUFwQixPQUFBLElBQ0EsVUFBQW9CLElBQUFnbkIsT0FBQXpVLEdBQUF2UyxhQUFBMlQsT0FBQTg5RCxFQUFBajFFLEtBQUF3RCxRQUFBSixLQVpBLFlBZUMrQixFQUFBL0UsTUFDRG0xRSxFQUFBLFdBQ0EsT0FBQXB3RSxFQUFBbkYsS0FBQTRGLHNDQ3BCQSxJQUFBckIsRUFBZTlFLEVBQVEsR0FDdkIrSCxFQUFlL0gsRUFBUSxHQUN2QisxRSxFQUF5Qi8xRSxFQUFRLElBQ2pDZzJFLEVBQWlCaDJFLEVBQVEsSUFHekJBLEVBQVEsR0FBUkEsQ0FBdUIsbUJBQUFvRyxFQUFBdVgsRUFBQXM0RCxFQUFBQyxHQUN2QixPQUdBLFNBQUE1OEQsR0FDQSxJQUFBblUsRUFBQWlCLEVBQUFELE1BQ0EwQixFQUFBbEUsTUFBQTJWLE9BQUEzVixFQUFBMlYsRUFBQXFFLEdBQ0EsWUFBQWhhLElBQUFrRSxJQUFBdEgsS0FBQStZLEVBQUFuVSxHQUFBLElBQUF1UyxPQUFBNEIsR0FBQXFFLEdBQUF6WCxPQUFBZixLQUlBLFNBQUFtVSxHQUNBLElBQUExUSxFQUFBc3RFLEVBQUFELEVBQUEzOEQsRUFBQW5ULE1BQ0EsR0FBQXlDLEVBQUF5RyxLQUFBLE9BQUF6RyxFQUFBdkgsTUFDQSxJQUFBODBFLEVBQUFyeEUsRUFBQXdVLEdBQ0FsVyxFQUFBOEMsT0FBQUMsTUFDQSxJQUFBZ3dFLEVBQUEvekUsT0FBQSxPQUFBNHpFLEVBQUFHLEVBQUEveUUsR0FDQSxJQUFBZ3pFLEVBQUFELEVBQUE3OUQsUUFDQTY5RCxFQUFBdjNELFVBQUEsRUFJQSxJQUhBLElBRUE5VixFQUZBb2dCLEVBQUEsR0FDQXJuQixFQUFBLEVBRUEsUUFBQWlILEVBQUFrdEUsRUFBQUcsRUFBQS95RSxLQUFBLENBQ0EsSUFBQWl6RSxFQUFBbndFLE9BQUE0QyxFQUFBLElBQ0FvZ0IsRUFBQXJuQixHQUFBdzBFLEVBQ0EsS0FBQUEsSUFBQUYsRUFBQXYzRCxVQUFBbTNELEVBQUEzeUUsRUFBQTJFLEVBQUFvdUUsRUFBQXYzRCxXQUFBdzNELElBQ0F2MEUsSUFFQSxXQUFBQSxFQUFBLEtBQUFxbkIsb0NDbENBLElBQUFwa0IsRUFBZTlFLEVBQVEsR0FDdkI4SCxFQUFlOUgsRUFBUSxJQUN2QitILEVBQWUvSCxFQUFRLEdBQ3ZCNEUsRUFBZ0I1RSxFQUFRLElBQ3hCKzFFLEVBQXlCLzFFLEVBQVEsSUFDakNnMkUsRUFBaUJoMkUsRUFBUSxJQUN6QjhVLEVBQUE3USxLQUFBNlEsSUFDQWpRLEVBQUFaLEtBQUFZLElBQ0F5QyxFQUFBckQsS0FBQXFELE1BQ0FndkUsRUFBQSw0QkFDQUMsRUFBQSxvQkFPQXYyRSxFQUFRLEdBQVJBLENBQXVCLHFCQUFBb0csRUFBQW93RSxFQUFBQyxFQUFBUCxHQUN2QixPQUdBLFNBQUFRLEVBQUFDLEdBQ0EsSUFBQXh4RSxFQUFBaUIsRUFBQUQsTUFDQTBCLEVBQUFsRSxNQUFBK3lFLE9BQUEveUUsRUFBQSt5RSxFQUFBRixHQUNBLFlBQUE3eUUsSUFBQWtFLEVBQ0FBLEVBQUF0SCxLQUFBbTJFLEVBQUF2eEUsRUFBQXd4RSxHQUNBRixFQUFBbDJFLEtBQUEyRixPQUFBZixHQUFBdXhFLEVBQUFDLElBSUEsU0FBQXI5RCxFQUFBcTlELEdBQ0EsSUFBQS90RSxFQUFBc3RFLEVBQUFPLEVBQUFuOUQsRUFBQW5ULEtBQUF3d0UsR0FDQSxHQUFBL3RFLEVBQUF5RyxLQUFBLE9BQUF6RyxFQUFBdkgsTUFFQSxJQUFBODBFLEVBQUFyeEUsRUFBQXdVLEdBQ0FsVyxFQUFBOEMsT0FBQUMsTUFDQXl3RSxFQUFBLG1CQUFBRCxFQUNBQyxJQUFBRCxFQUFBendFLE9BQUF5d0UsSUFDQSxJQUFBdjBFLEVBQUErekUsRUFBQS96RSxPQUNBLEdBQUFBLEVBQUEsQ0FDQSxJQUFBZzBFLEVBQUFELEVBQUE3OUQsUUFDQTY5RCxFQUFBdjNELFVBQUEsRUFHQSxJQURBLElBQUFpNEQsRUFBQSxLQUNBLENBQ0EsSUFBQS90RSxFQUFBa3RFLEVBQUFHLEVBQUEveUUsR0FDQSxVQUFBMEYsRUFBQSxNQUVBLEdBREErdEUsRUFBQTl0RSxLQUFBRCxJQUNBMUcsRUFBQSxNQUVBLEtBREE4RCxPQUFBNEMsRUFBQSxNQUNBcXRFLEVBQUF2M0QsVUFBQW0zRCxFQUFBM3lFLEVBQUEyRSxFQUFBb3VFLEVBQUF2M0QsV0FBQXczRCxJQUlBLElBRkEsSUF4Q0E3eEUsRUF3Q0F1eUUsRUFBQSxHQUNBQyxFQUFBLEVBQ0EzMkUsRUFBQSxFQUFxQkEsRUFBQXkyRSxFQUFBN3ZFLE9BQW9CNUcsSUFBQSxDQUN6QzBJLEVBQUErdEUsRUFBQXoyRSxHQVNBLElBUkEsSUFBQTQyRSxFQUFBOXdFLE9BQUE0QyxFQUFBLElBQ0FtdUUsRUFBQW5pRSxFQUFBalEsRUFBQUQsRUFBQWtFLEVBQUFELE9BQUF6RixFQUFBNEQsUUFBQSxHQUNBa3dFLEVBQUEsR0FNQW4wRCxFQUFBLEVBQXVCQSxFQUFBamEsRUFBQTlCLE9BQW1CK2IsSUFBQW0wRCxFQUFBbnVFLFVBbkQxQ3BGLEtBREFZLEVBb0QwQ3VFLEVBQUFpYSxJQW5EMUN4ZSxFQUFBMkIsT0FBQTNCLElBb0RBLElBQUE0eUUsRUFBQXJ1RSxFQUFBOFAsT0FDQSxHQUFBZytELEVBQUEsQ0FDQSxJQUFBUSxFQUFBLENBQUFKLEdBQUEzakUsT0FBQTZqRSxFQUFBRCxFQUFBN3pFLFFBQ0FPLElBQUF3ekUsR0FBQUMsRUFBQXJ1RSxLQUFBb3VFLEdBQ0EsSUFBQWh2RCxFQUFBamlCLE9BQUF5d0UsRUFBQXp0RSxXQUFBdkYsRUFBQXl6RSxTQUVBanZELEVBQUFrdkQsRUFBQUwsRUFBQTV6RSxFQUFBNnpFLEVBQUFDLEVBQUFDLEVBQUFSLEdBRUFNLEdBQUFGLElBQ0FELEdBQUExekUsRUFBQWlHLE1BQUEwdEUsRUFBQUUsR0FBQTl1RCxFQUNBNHVELEVBQUFFLEVBQUFELEVBQUFod0UsUUFHQSxPQUFBOHZFLEVBQUExekUsRUFBQWlHLE1BQUEwdEUsS0FLQSxTQUFBTSxFQUFBTCxFQUFBejlELEVBQUEwOUQsRUFBQUMsRUFBQUMsRUFBQWh2RCxHQUNBLElBQUFtdkQsRUFBQUwsRUFBQUQsRUFBQWh3RSxPQUNBeEcsRUFBQTAyRSxFQUFBbHdFLE9BQ0FnbkUsRUFBQXVJLEVBS0EsWUFKQTV5RSxJQUFBd3pFLElBQ0FBLEVBQUFydkUsRUFBQXF2RSxHQUNBbkosRUFBQXNJLEdBRUFHLEVBQUFsMkUsS0FBQTRuQixFQUFBNmxELEVBQUEsU0FBQWx2RCxFQUFBa3hDLEdBQ0EsSUFBQWhzQixFQUNBLE9BQUFnc0IsRUFBQXR6QyxPQUFBLElBQ0Esa0JBQ0EsZUFBQXM2RCxFQUNBLGVBQUF6OUQsRUFBQWxRLE1BQUEsRUFBQTR0RSxHQUNBLGVBQUExOUQsRUFBQWxRLE1BQUFpdUUsR0FDQSxRQUNBdHpDLEVBQUFtekMsRUFBQW5uQixFQUFBM21ELE1BQUEsT0FDQSxNQUNBLFFBQ0EsSUFBQXhILEdBQUFtdUQsRUFDQSxPQUFBbnVELEVBQUEsT0FBQWlkLEVBQ0EsR0FBQWpkLEVBQUFyQixFQUFBLENBQ0EsSUFBQTBFLEVBQUFvQyxFQUFBekYsRUFBQSxJQUNBLFdBQUFxRCxFQUFBNFosRUFDQTVaLEdBQUExRSxPQUFBbUQsSUFBQXV6RSxFQUFBaHlFLEVBQUEsR0FBQThxRCxFQUFBdHpDLE9BQUEsR0FBQXc2RCxFQUFBaHlFLEVBQUEsR0FBQThxRCxFQUFBdHpDLE9BQUEsR0FDQW9DLEVBRUFrbEIsRUFBQWt6QyxFQUFBcjFFLEVBQUEsR0FFQSxZQUFBOEIsSUFBQXFnQyxFQUFBLEdBQUFBLHFDQ2hIQSxJQUFBbC9CLEVBQWU5RSxFQUFRLEdBQ3ZCdTNFLEVBQWdCdjNFLEVBQVEsSUFDeEJnMkUsRUFBaUJoMkUsRUFBUSxJQUd6QkEsRUFBUSxHQUFSQSxDQUF1QixvQkFBQW9HLEVBQUFveEUsRUFBQUMsRUFBQXZCLEdBQ3ZCLE9BR0EsU0FBQTU4RCxHQUNBLElBQUFuVSxFQUFBaUIsRUFBQUQsTUFDQTBCLEVBQUFsRSxNQUFBMlYsT0FBQTNWLEVBQUEyVixFQUFBaytELEdBQ0EsWUFBQTd6RSxJQUFBa0UsSUFBQXRILEtBQUErWSxFQUFBblUsR0FBQSxJQUFBdVMsT0FBQTRCLEdBQUFrK0QsR0FBQXR4RSxPQUFBZixLQUlBLFNBQUFtVSxHQUNBLElBQUExUSxFQUFBc3RFLEVBQUF1QixFQUFBbitELEVBQUFuVCxNQUNBLEdBQUF5QyxFQUFBeUcsS0FBQSxPQUFBekcsRUFBQXZILE1BQ0EsSUFBQTgwRSxFQUFBcnhFLEVBQUF3VSxHQUNBbFcsRUFBQThDLE9BQUFDLE1BQ0F1eEUsRUFBQXZCLEVBQUF2M0QsVUFDQTI0RCxFQUFBRyxFQUFBLEtBQUF2QixFQUFBdjNELFVBQUEsR0FDQSxJQUFBOVYsRUFBQWt0RSxFQUFBRyxFQUFBL3lFLEdBRUEsT0FEQW0wRSxFQUFBcEIsRUFBQXYzRCxVQUFBODRELEtBQUF2QixFQUFBdjNELFVBQUE4NEQsR0FDQSxPQUFBNXVFLEdBQUEsRUFBQUEsRUFBQUQsd0NDekJBLElBQUE0VSxFQUFlemQsRUFBUSxJQUN2QjhFLEVBQWU5RSxFQUFRLEdBQ3ZCc0ssRUFBeUJ0SyxFQUFRLElBQ2pDKzFFLEVBQXlCLzFFLEVBQVEsSUFDakMrSCxFQUFlL0gsRUFBUSxHQUN2QjIzRSxFQUFxQjMzRSxFQUFRLElBQzdCeVksRUFBaUJ6WSxFQUFRLElBQ3pCcUcsRUFBWXJHLEVBQVEsR0FDcEI0M0UsRUFBQTN6RSxLQUFBWSxJQUNBZ3pFLEVBQUEsR0FBQTl1RSxLQU9BK3VFLEdBQUF6eEUsRUFBQSxXQUFxQ3FSLE9BSHJDLFdBR3FDLE9BR3JDMVgsRUFBUSxHQUFSQSxDQUF1QixtQkFBQW9HLEVBQUEyeEUsRUFBQUMsRUFBQTlCLEdBQ3ZCLElBQUErQixFQWtEQSxPQXhDQUEsRUFSQSw4QkFDQSxtQ0FDQSxpQ0FDQSxpQ0FDQSw0QkFDQSxzQkFHQSxTQUFBM25FLEVBQUE0bkUsR0FDQSxJQUFBMXhFLEVBQUFOLE9BQUFDLE1BQ0EsUUFBQXhDLElBQUEyTSxHQUFBLElBQUE0bkUsRUFBQSxTQUVBLElBQUF6NkQsRUFBQW5OLEdBQUEsT0FBQTBuRSxFQUFBejNFLEtBQUFpRyxFQUFBOEosRUFBQTRuRSxHQVdBLElBVkEsSUFTQXA1RCxFQUFBRixFQUFBdTVELEVBVEFDLEVBQUEsR0FDQXJ0RCxHQUFBemEsRUFBQThILFdBQUEsU0FDQTlILEVBQUErSCxVQUFBLFNBQ0EvSCxFQUFBZ0ksUUFBQSxTQUNBaEksRUFBQWlJLE9BQUEsUUFDQTgvRCxFQUFBLEVBQ0FDLE9BQUEzMEUsSUFBQXUwRSxFQTVCQSxXQTRCQUEsSUFBQSxFQUVBSyxFQUFBLElBQUE3Z0UsT0FBQXBILEVBQUEzTixPQUFBb29CLEVBQUEsTUFFQWpNLEVBQUFyRyxFQUFBbFksS0FBQWc0RSxFQUFBL3hFLFFBQ0FvWSxFQUFBMjVELEVBQUEsV0FDQUYsSUFDQUQsRUFBQXJ2RSxLQUFBdkMsRUFBQTZDLE1BQUFndkUsRUFBQXY1RCxFQUFBalcsUUFDQWlXLEVBQUEsVUFBQUEsRUFBQWpXLE1BQUFyQyxFQUFBLFFBQUFxeEUsRUFBQTN1RSxNQUFBa3ZFLEVBQUF0NUQsRUFBQXpWLE1BQUEsSUFDQTh1RSxFQUFBcjVELEVBQUEsVUFDQXU1RCxFQUFBejVELEVBQ0F3NUQsRUFBQSxRQUFBRSxLQUVBQyxFQUFBLFlBQUF6NUQsRUFBQWpXLE9BQUEwdkUsRUFBQSxZQUtBLE9BSEFGLElBQUE3eEUsRUFBQSxRQUNBMnhFLEdBQUFJLEVBQUF6eEUsS0FBQSxLQUFBc3hFLEVBQUFydkUsS0FBQSxJQUNPcXZFLEVBQUFydkUsS0FBQXZDLEVBQUE2QyxNQUFBZ3ZFLElBQ1BELEVBQUEsT0FBQUUsRUFBQUYsRUFBQS91RSxNQUFBLEVBQUFpdkUsR0FBQUYsR0FHRyxlQUFBejBFLEVBQUEsVUFDSCxTQUFBMk0sRUFBQTRuRSxHQUNBLFlBQUF2MEUsSUFBQTJNLEdBQUEsSUFBQTRuRSxFQUFBLEdBQUFGLEVBQUF6M0UsS0FBQTRGLEtBQUFtSyxFQUFBNG5FLElBR0FGLEVBR0EsQ0FHQSxTQUFBMW5FLEVBQUE0bkUsR0FDQSxJQUFBL3lFLEVBQUFpQixFQUFBRCxNQUNBcXlFLEVBQUE3MEUsTUFBQTJNLE9BQUEzTSxFQUFBMk0sRUFBQXluRSxHQUNBLFlBQUFwMEUsSUFBQTYwRSxFQUNBQSxFQUFBajRFLEtBQUErUCxFQUFBbkwsRUFBQSt5RSxHQUNBRCxFQUFBMTNFLEtBQUEyRixPQUFBZixHQUFBbUwsRUFBQTRuRSxJQU9BLFNBQUE1K0QsRUFBQTQrRCxHQUNBLElBQUF0dkUsRUFBQXN0RSxFQUFBK0IsRUFBQTMrRCxFQUFBblQsS0FBQSt4RSxFQUFBRCxJQUFBRCxHQUNBLEdBQUFwdkUsRUFBQXlHLEtBQUEsT0FBQXpHLEVBQUF2SCxNQUVBLElBQUE4MEUsRUFBQXJ4RSxFQUFBd1UsR0FDQWxXLEVBQUE4QyxPQUFBQyxNQUNBbUksRUFBQWhFLEVBQUE2ckUsRUFBQXorRCxRQUVBK2dFLEVBQUF0QyxFQUFBNzlELFFBQ0F5UyxHQUFBb3JELEVBQUEvOUQsV0FBQSxTQUNBKzlELEVBQUE5OUQsVUFBQSxTQUNBODlELEVBQUE3OUQsUUFBQSxTQUNBdy9ELEVBQUEsU0FJQVUsRUFBQSxJQUFBbHFFLEVBQUF3cEUsRUFBQTNCLEVBQUEsT0FBQUEsRUFBQXh6RSxPQUFBLElBQUFvb0IsR0FDQTJ0RCxPQUFBLzBFLElBQUF1MEUsRUF6RkEsV0F5RkFBLElBQUEsRUFDQSxPQUFBUSxFQUFBLFNBQ0EsT0FBQXQxRSxFQUFBNEQsT0FBQSxjQUFBMndFLEVBQUFhLEVBQUFwMUUsR0FBQSxDQUFBQSxHQUFBLEdBSUEsSUFIQSxJQUFBbEIsRUFBQSxFQUNBeTJFLEVBQUEsRUFDQXp2RCxFQUFBLEdBQ0F5dkQsRUFBQXYxRSxFQUFBNEQsUUFBQSxDQUNBd3hFLEVBQUE1NUQsVUFBQWs1RCxFQUFBYSxFQUFBLEVBQ0EsSUFDQXQwRSxFQURBeXJFLEVBQUE2SCxFQUFBYSxFQUFBVixFQUFBMTBFLElBQUFpRyxNQUFBc3ZFLElBRUEsR0FDQSxPQUFBN0ksSUFDQXpyRSxFQUFBdXpFLEVBQUE3dkUsRUFBQXl3RSxFQUFBNTVELFdBQUFrNUQsRUFBQSxFQUFBYSxJQUFBdjFFLEVBQUE0RCxXQUFBOUUsRUFFQXkyRSxFQUFBNUMsRUFBQTN5RSxFQUFBdTFFLEVBQUFGLE9BQ1MsQ0FFVCxHQURBdnZELEVBQUFuZ0IsS0FBQTNGLEVBQUFpRyxNQUFBbkgsRUFBQXkyRSxJQUNBenZELEVBQUFsaUIsU0FBQTB4RSxFQUFBLE9BQUF4dkQsRUFDQSxRQUFBOW9CLEVBQUEsRUFBeUJBLEdBQUEwdkUsRUFBQTlvRSxPQUFBLEVBQW1CNUcsSUFFNUMsR0FEQThvQixFQUFBbmdCLEtBQUErbUUsRUFBQTF2RSxJQUNBOG9CLEVBQUFsaUIsU0FBQTB4RSxFQUFBLE9BQUF4dkQsRUFFQXl2RCxFQUFBejJFLEVBQUFtQyxHQUlBLE9BREE2a0IsRUFBQW5nQixLQUFBM0YsRUFBQWlHLE1BQUFuSCxJQUNBZ25CLHVCQ2xJQSxJQUFBOW1CLEVBQWFwQyxFQUFRLEdBQ3JCNDRFLEVBQWdCNTRFLEVBQVEsSUFBU2lPLElBQ2pDb3RCLEVBQUFqNUIsRUFBQXcvQixrQkFBQXgvQixFQUFBeTJFLHVCQUNBdjVELEVBQUFsZCxFQUFBa2QsUUFDQW9QLEVBQUF0c0IsRUFBQXNzQixRQUNBOUMsRUFBNkIsV0FBaEI1ckIsRUFBUSxHQUFSQSxDQUFnQnNmLEdBRTdCbmYsRUFBQUQsUUFBQSxXQUNBLElBQUE4bEIsRUFBQW1TLEVBQUE3TCxFQUVBd3NELEVBQUEsV0FDQSxJQUFBcC9DLEVBQUE3eEIsRUFFQSxJQURBK2pCLElBQUE4TixFQUFBcGEsRUFBQTZOLFNBQUF1TSxFQUFBbk0sT0FDQXZILEdBQUEsQ0FDQW5lLEVBQUFtZSxFQUFBbmUsR0FDQW1lLElBQUE1VyxLQUNBLElBQ0F2SCxJQUNPLE1BQUF4RCxHQUdQLE1BRkEyaEIsRUFBQXNHLElBQ0E2TCxPQUFBeDBCLEVBQ0FVLEdBRUs4ekIsT0FBQXgwQixFQUNMKzFCLEtBQUFwTSxTQUlBLEdBQUExQixFQUNBVSxFQUFBLFdBQ0FoTixFQUFBYSxTQUFBMjRELFNBR0csSUFBQXo5QyxHQUFBajVCLEVBQUEyWCxXQUFBM1gsRUFBQTJYLFVBQUFnL0QsV0FRQSxHQUFBcnFELEtBQUF6QyxRQUFBLENBRUgsSUFBQUQsRUFBQTBDLEVBQUF6QyxhQUFBdG9CLEdBQ0Eyb0IsRUFBQSxXQUNBTixFQUFBSSxLQUFBMHNELFNBU0F4c0QsRUFBQSxXQUVBc3NELEVBQUFyNEUsS0FBQTZCLEVBQUEwMkUsUUF2QkcsQ0FDSCxJQUFBRSxHQUFBLEVBQ0ExK0MsRUFBQTdrQixTQUFBc1MsZUFBQSxJQUNBLElBQUFzVCxFQUFBeTlDLEdBQUFyOUMsUUFBQW5CLEVBQUEsQ0FBdUN5SCxlQUFBLElBQ3ZDelYsRUFBQSxXQUNBZ08sRUFBQTNuQixLQUFBcW1FLE1Bc0JBLGdCQUFBbnhFLEdBQ0EsSUFBQXVqQixFQUFBLENBQWdCdmpCLEtBQUF1SCxVQUFBekwsR0FDaEJ3MEIsTUFBQS9vQixLQUFBZ2MsR0FDQXBGLElBQ0FBLEVBQUFvRixFQUNBa0IsS0FDSzZMLEVBQUEvTSxtQkNsRUxqckIsRUFBQUQsUUFBQSxTQUFBa0UsR0FDQSxJQUNBLE9BQVlDLEdBQUEsRUFBQXVPLEVBQUF4TyxLQUNULE1BQUFDLEdBQ0gsT0FBWUEsR0FBQSxFQUFBdU8sRUFBQXZPLG1DQ0haLElBQUE0MEUsRUFBYWo1RSxFQUFRLEtBQ3JCcU8sRUFBZXJPLEVBQVEsSUFJdkJHLEVBQUFELFFBQWlCRixFQUFRLEdBQVJBLENBSGpCLE1BR3dDLFNBQUFpQixHQUN4QyxrQkFBeUIsT0FBQUEsRUFBQWtGLEtBQUFnRCxVQUFBbkMsT0FBQSxFQUFBbUMsVUFBQSxRQUFBeEYsS0FDeEIsQ0FFRDFDLElBQUEsU0FBQVUsR0FDQSxJQUFBNnRCLEVBQUF5cEQsRUFBQTFwRCxTQUFBbGhCLEVBQUFsSSxLQVJBLE9BUUF4RSxHQUNBLE9BQUE2dEIsS0FBQTVjLEdBR0EzRSxJQUFBLFNBQUF0TSxFQUFBTixHQUNBLE9BQUE0M0UsRUFBQTlpRSxJQUFBOUgsRUFBQWxJLEtBYkEsT0FhQSxJQUFBeEUsRUFBQSxFQUFBQSxFQUFBTixLQUVDNDNFLEdBQUEsaUNDakJELElBQUFBLEVBQWFqNUUsRUFBUSxLQUNyQnFPLEVBQWVyTyxFQUFRLElBSXZCRyxFQUFBRCxRQUFpQkYsRUFBUSxHQUFSQSxDQUhqQixNQUd3QyxTQUFBaUIsR0FDeEMsa0JBQXlCLE9BQUFBLEVBQUFrRixLQUFBZ0QsVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLEtBQ3hCLENBRUQyWCxJQUFBLFNBQUFqYSxHQUNBLE9BQUE0M0UsRUFBQTlpRSxJQUFBOUgsRUFBQWxJLEtBUkEsT0FRQTlFLEVBQUEsSUFBQUEsRUFBQSxFQUFBQSxPQUVDNDNFLGlDQ1pELElBY0FDLEVBZEE5MkUsRUFBYXBDLEVBQVEsR0FDckJtNUUsRUFBV241RSxFQUFRLEdBQVJBLENBQTBCLEdBQ3JDdUMsRUFBZXZDLEVBQVEsSUFDdkJvVSxFQUFXcFUsRUFBUSxJQUNuQmlwQixFQUFhanBCLEVBQVEsSUFDckJvNUUsRUFBV3A1RSxFQUFRLEtBQ25Cc0UsRUFBZXRFLEVBQVEsR0FDdkJxTyxFQUFlck8sRUFBUSxJQUN2QnE1RSxFQUFzQnI1RSxFQUFRLElBQzlCczVFLEdBQUFsM0UsRUFBQW0zRSxlQUFBLGtCQUFBbjNFLEVBRUFtUyxFQUFBSCxFQUFBRyxRQUNBUixFQUFBalQsT0FBQWlULGFBQ0ErYixFQUFBc3BELEVBQUFscEQsUUFHQWxlLEVBQUEsU0FBQS9RLEdBQ0Esa0JBQ0EsT0FBQUEsRUFBQWtGLEtBQUFnRCxVQUFBbkMsT0FBQSxFQUFBbUMsVUFBQSxRQUFBeEYsS0FJQXlXLEVBQUEsQ0FFQW5aLElBQUEsU0FBQVUsR0FDQSxHQUFBMkMsRUFBQTNDLEdBQUEsQ0FDQSxJQUFBZ1IsRUFBQTRCLEVBQUE1UyxHQUNBLFdBQUFnUixFQUFBbWQsRUFBQXpoQixFQUFBbEksS0FqQkEsWUFpQkFsRixJQUFBVSxHQUNBZ1IsSUFBQXhNLEtBQUE4WCxTQUFBdGEsSUFJQXNLLElBQUEsU0FBQXRNLEVBQUFOLEdBQ0EsT0FBQSszRSxFQUFBampFLElBQUE5SCxFQUFBbEksS0F2QkEsV0F1QkF4RSxFQUFBTixLQUtBbTRFLEVBQUFyNUUsRUFBQUQsUUFBZ0NGLEVBQVEsR0FBUkEsQ0E1QmhDLFVBNEJ1RGdTLEVBQUFvSSxFQUFBZy9ELEdBQUEsTUFHdkRDLEdBQUFDLElBRUFyd0QsR0FEQWl3RCxFQUFBRSxFQUFBcCtELGVBQUFoSixFQWhDQSxZQWlDQWhRLFVBQUFvWSxHQUNBaEcsRUFBQUMsTUFBQSxFQUNBOGtFLEVBQUEsc0NBQUF4M0UsR0FDQSxJQUFBOE4sRUFBQStwRSxFQUFBeDNFLFVBQ0FtRixFQUFBc0ksRUFBQTlOLEdBQ0FZLEVBQUFrTixFQUFBOU4sRUFBQSxTQUFBMEQsRUFBQTRELEdBRUEsR0FBQTNFLEVBQUFlLEtBQUEwTyxFQUFBMU8sR0FBQSxDQUNBYyxLQUFBc3BCLEtBQUF0cEIsS0FBQXNwQixHQUFBLElBQUF5cEQsR0FDQSxJQUFBcHdFLEVBQUEzQyxLQUFBc3BCLEdBQUE5dEIsR0FBQTBELEVBQUE0RCxHQUNBLGFBQUF0SCxFQUFBd0UsS0FBQTJDLEVBRU8sT0FBQTNCLEVBQUE1RyxLQUFBNEYsS0FBQWQsRUFBQTRELHNDQ3ZEUCxJQUFBbXdFLEVBQVdwNUUsRUFBUSxLQUNuQnFPLEVBQWVyTyxFQUFRLElBSXZCQSxFQUFRLEdBQVJBLENBSEEsVUFHdUIsU0FBQWlCLEdBQ3ZCLGtCQUE2QixPQUFBQSxFQUFBa0YsS0FBQWdELFVBQUFuQyxPQUFBLEVBQUFtQyxVQUFBLFFBQUF4RixLQUM1QixDQUVEMlgsSUFBQSxTQUFBamEsR0FDQSxPQUFBKzNFLEVBQUFqakUsSUFBQTlILEVBQUFsSSxLQVJBLFdBUUE5RSxHQUFBLEtBRUMrM0UsR0FBQSxvQ0NaRCxJQUFBMzJFLEVBQWN6QyxFQUFRLEdBQ3RCdUosRUFBYXZKLEVBQVEsSUFDckIrTixFQUFhL04sRUFBUSxJQUNyQjhFLEVBQWU5RSxFQUFRLEdBQ3ZCNkosRUFBc0I3SixFQUFRLElBQzlCK0gsRUFBZS9ILEVBQVEsR0FDdkJzRSxFQUFldEUsRUFBUSxHQUN2Qm9MLEVBQWtCcEwsRUFBUSxHQUFXb0wsWUFDckNkLEVBQXlCdEssRUFBUSxJQUNqQ21MLEVBQUE0QyxFQUFBM0MsWUFDQUMsRUFBQTBDLEVBQUF6QyxTQUNBbXVFLEVBQUFsd0UsRUFBQWlKLEtBQUFwSCxFQUFBc3VFLE9BQ0F4b0UsRUFBQS9GLEVBQUFuSixVQUFBcUgsTUFDQXFFLEVBQUFuRSxFQUFBbUUsS0FHQWpMLElBQUFTLEVBQUFULEVBQUFxQixFQUFBckIsRUFBQU8sR0FBQW9JLElBQUFELEdBQUEsQ0FBNkVDLFlBQUFELElBRTdFMUksSUFBQVcsRUFBQVgsRUFBQU8sR0FBQXVHLEVBQUFnRSxPQUpBLGNBSUEsQ0FFQW1zRSxPQUFBLFNBQUFuMUUsR0FDQSxPQUFBazFFLEtBQUFsMUUsSUFBQUQsRUFBQUMsSUFBQW1KLEtBQUFuSixLQUlBOUIsSUFBQWEsRUFBQWIsRUFBQW9CLEVBQUFwQixFQUFBTyxFQUE0Q2hELEVBQVEsRUFBUkEsQ0FBa0IsV0FDOUQsV0FBQW1MLEVBQUEsR0FBQTlCLE1BQUEsT0FBQTFGLEdBQUFzUCxhQVpBLGNBYUMsQ0FFRDVKLE1BQUEsU0FBQXNHLEVBQUFtQixHQUNBLFFBQUFuTixJQUFBdU4sUUFBQXZOLElBQUFtTixFQUFBLE9BQUFJLEVBQUEzUSxLQUFBdUUsRUFBQXFCLE1BQUF3SixHQVFBLElBUEEsSUFBQTJCLEVBQUF4TSxFQUFBcUIsTUFBQThNLFdBQ0FpOEQsRUFBQXJsRSxFQUFBOEYsRUFBQTJCLEdBQ0Fxb0UsRUFBQTl2RSxPQUFBbEcsSUFBQW1OLEVBQUFRLEVBQUFSLEVBQUFRLEdBQ0F4SSxFQUFBLElBQUF3QixFQUFBbkUsS0FBQWdGLEdBQUEsQ0FBQXBELEVBQUE0eEUsRUFBQXpLLElBQ0EwSyxFQUFBLElBQUF2dUUsRUFBQWxGLE1BQ0EwekUsRUFBQSxJQUFBeHVFLEVBQUF2QyxHQUNBRCxFQUFBLEVBQ0FxbUUsRUFBQXlLLEdBQ0FFLEVBQUExMkQsU0FBQXRhLElBQUErd0UsRUFBQXYyRCxTQUFBNnJELE1BQ0ssT0FBQXBtRSxLQUlMOUksRUFBUSxHQUFSQSxDQTlCQSxnQ0NmQSxJQUFBeUMsRUFBY3pDLEVBQVEsR0FDdEJ5QyxJQUFBUyxFQUFBVCxFQUFBcUIsRUFBQXJCLEVBQUFPLEdBQTZDaEQsRUFBUSxJQUFVd1MsSUFBQSxDQUMvRGxILFNBQVl0TCxFQUFRLElBQWlCc0wsNEJDRnJDdEwsRUFBUSxHQUFSQSxDQUF3QixrQkFBQW1yQyxHQUN4QixnQkFBQXg0QixFQUFBM0IsRUFBQWhLLEdBQ0EsT0FBQW1rQyxFQUFBaGxDLEtBQUF3TSxFQUFBM0IsRUFBQWhLLHVCQ0ZBaEgsRUFBUSxHQUFSQSxDQUF3QixtQkFBQW1yQyxHQUN4QixnQkFBQXg0QixFQUFBM0IsRUFBQWhLLEdBQ0EsT0FBQW1rQyxFQUFBaGxDLEtBQUF3TSxFQUFBM0IsRUFBQWhLLHVCQ0ZBaEgsRUFBUSxHQUFSQSxDQUF3QixtQkFBQW1yQyxHQUN4QixnQkFBQXg0QixFQUFBM0IsRUFBQWhLLEdBQ0EsT0FBQW1rQyxFQUFBaGxDLEtBQUF3TSxFQUFBM0IsRUFBQWhLLE1BRUMsb0JDSkRoSCxFQUFRLEdBQVJBLENBQXdCLG1CQUFBbXJDLEdBQ3hCLGdCQUFBeDRCLEVBQUEzQixFQUFBaEssR0FDQSxPQUFBbWtDLEVBQUFobEMsS0FBQXdNLEVBQUEzQixFQUFBaEssdUJDRkFoSCxFQUFRLEdBQVJBLENBQXdCLG9CQUFBbXJDLEdBQ3hCLGdCQUFBeDRCLEVBQUEzQixFQUFBaEssR0FDQSxPQUFBbWtDLEVBQUFobEMsS0FBQXdNLEVBQUEzQixFQUFBaEssdUJDRkFoSCxFQUFRLEdBQVJBLENBQXdCLG1CQUFBbXJDLEdBQ3hCLGdCQUFBeDRCLEVBQUEzQixFQUFBaEssR0FDQSxPQUFBbWtDLEVBQUFobEMsS0FBQXdNLEVBQUEzQixFQUFBaEssdUJDRkFoSCxFQUFRLEdBQVJBLENBQXdCLG9CQUFBbXJDLEdBQ3hCLGdCQUFBeDRCLEVBQUEzQixFQUFBaEssR0FDQSxPQUFBbWtDLEVBQUFobEMsS0FBQXdNLEVBQUEzQixFQUFBaEssdUJDRkFoSCxFQUFRLEdBQVJBLENBQXdCLHFCQUFBbXJDLEdBQ3hCLGdCQUFBeDRCLEVBQUEzQixFQUFBaEssR0FDQSxPQUFBbWtDLEVBQUFobEMsS0FBQXdNLEVBQUEzQixFQUFBaEssdUJDRkFoSCxFQUFRLEdBQVJBLENBQXdCLHFCQUFBbXJDLEdBQ3hCLGdCQUFBeDRCLEVBQUEzQixFQUFBaEssR0FDQSxPQUFBbWtDLEVBQUFobEMsS0FBQXdNLEVBQUEzQixFQUFBaEssdUJDREEsSUFBQXZFLEVBQWN6QyxFQUFRLEdBQ3RCZ0osRUFBZ0JoSixFQUFRLElBQ3hCOEUsRUFBZTlFLEVBQVEsR0FDdkI4NUUsR0FBYzk1RSxFQUFRLEdBQVdvd0IsU0FBQSxJQUFlbG5CLE1BQ2hENndFLEVBQUFuMkUsU0FBQXNGLE1BRUF6RyxJQUFBVyxFQUFBWCxFQUFBTyxHQUFpQ2hELEVBQVEsRUFBUkEsQ0FBa0IsV0FDbkQ4NUUsRUFBQSxnQkFDQyxXQUNENXdFLE1BQUEsU0FBQXpGLEVBQUF1MkUsRUFBQUMsR0FDQSxJQUFBcGpFLEVBQUE3TixFQUFBdkYsR0FDQXkyRSxFQUFBcDFFLEVBQUFtMUUsR0FDQSxPQUFBSCxJQUFBampFLEVBQUFtakUsRUFBQUUsR0FBQUgsRUFBQXg1RSxLQUFBc1csRUFBQW1qRSxFQUFBRSx1QkNaQSxJQUFBejNFLEVBQWN6QyxFQUFRLEdBQ3RCMEIsRUFBYTFCLEVBQVEsSUFDckJnSixFQUFnQmhKLEVBQVEsSUFDeEI4RSxFQUFlOUUsRUFBUSxHQUN2QnNFLEVBQWV0RSxFQUFRLEdBQ3ZCcUcsRUFBWXJHLEVBQVEsR0FDcEI0QixFQUFXNUIsRUFBUSxJQUNuQm02RSxHQUFrQm42RSxFQUFRLEdBQVdvd0IsU0FBQSxJQUFlekcsVUFJcER5d0QsRUFBQS96RSxFQUFBLFdBQ0EsU0FBQXJELEtBQ0EsUUFBQW0zRSxFQUFBLGFBQWlELEdBQUFuM0Usa0JBRWpEcTNFLEdBQUFoMEUsRUFBQSxXQUNBOHpFLEVBQUEsZ0JBR0ExM0UsSUFBQVcsRUFBQVgsRUFBQU8sR0FBQW8zRSxHQUFBQyxHQUFBLFdBQ0Exd0QsVUFBQSxTQUFBMndELEVBQUFwNkQsR0FDQWxYLEVBQUFzeEUsR0FDQXgxRSxFQUFBb2IsR0FDQSxJQUFBcTZELEVBQUFweEUsVUFBQW5DLE9BQUEsRUFBQXN6RSxFQUFBdHhFLEVBQUFHLFVBQUEsSUFDQSxHQUFBa3hFLElBQUFELEVBQUEsT0FBQUQsRUFBQUcsRUFBQXA2RCxFQUFBcTZELEdBQ0EsR0FBQUQsR0FBQUMsRUFBQSxDQUVBLE9BQUFyNkQsRUFBQWxaLFFBQ0Esa0JBQUFzekUsRUFDQSxrQkFBQUEsRUFBQXA2RCxFQUFBLElBQ0Esa0JBQUFvNkQsRUFBQXA2RCxFQUFBLEdBQUFBLEVBQUEsSUFDQSxrQkFBQW82RCxFQUFBcDZELEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0Esa0JBQUFvNkQsRUFBQXA2RCxFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBR0EsSUFBQXM2RCxFQUFBLE9BRUEsT0FEQUEsRUFBQXp4RSxLQUFBRyxNQUFBc3hFLEVBQUF0NkQsR0FDQSxJQUFBdGUsRUFBQXNILE1BQUFveEUsRUFBQUUsSUFHQSxJQUFBL3FFLEVBQUE4cUUsRUFBQXY0RSxVQUNBeVksRUFBQS9ZLEVBQUE0QyxFQUFBbUwsS0FBQTNPLE9BQUFrQixXQUNBOEcsRUFBQWxGLFNBQUFzRixNQUFBM0ksS0FBQSs1RSxFQUFBNy9ELEVBQUF5RixHQUNBLE9BQUE1YixFQUFBd0UsS0FBQTJSLHNCQzNDQSxJQUFBeFYsRUFBU2pGLEVBQVEsR0FDakJ5QyxFQUFjekMsRUFBUSxHQUN0QjhFLEVBQWU5RSxFQUFRLEdBQ3ZCZ0YsRUFBa0JoRixFQUFRLElBRzFCeUMsSUFBQVcsRUFBQVgsRUFBQU8sRUFBZ0NoRCxFQUFRLEVBQVJBLENBQWtCLFdBRWxEb3dCLFFBQUFydkIsZUFBQWtFLEVBQUFDLEVBQUEsR0FBZ0MsR0FBTTdELE1BQUEsSUFBVyxHQUFPQSxNQUFBLE1BQ3ZELFdBQ0ROLGVBQUEsU0FBQTBDLEVBQUFnM0UsRUFBQUMsR0FDQTUxRSxFQUFBckIsR0FDQWczRSxFQUFBejFFLEVBQUF5MUUsR0FBQSxHQUNBMzFFLEVBQUE0MUUsR0FDQSxJQUVBLE9BREF6MUUsRUFBQUMsRUFBQXpCLEVBQUFnM0UsRUFBQUMsSUFDQSxFQUNLLE1BQUFyMkUsR0FDTCw4QkNsQkEsSUFBQTVCLEVBQWN6QyxFQUFRLEdBQ3RCMEgsRUFBVzFILEVBQVEsSUFBZ0JrRixFQUNuQ0osRUFBZTlFLEVBQVEsR0FFdkJ5QyxJQUFBVyxFQUFBLFdBQ0F1M0UsZUFBQSxTQUFBbDNFLEVBQUFnM0UsR0FDQSxJQUFBOW9FLEVBQUFqSyxFQUFBNUMsRUFBQXJCLEdBQUFnM0UsR0FDQSxRQUFBOW9FLE1BQUFDLHNCQUFBbk8sRUFBQWczRSxvQ0NOQSxJQUFBaDRFLEVBQWN6QyxFQUFRLEdBQ3RCOEUsRUFBZTlFLEVBQVEsR0FDdkI0NkUsRUFBQSxTQUFBNThELEdBQ0E3WCxLQUFBK1AsR0FBQXBSLEVBQUFrWixHQUNBN1gsS0FBQThYLEdBQUEsRUFDQSxJQUNBdGMsRUFEQXVLLEVBQUEvRixLQUFBK1gsR0FBQSxHQUVBLElBQUF2YyxLQUFBcWMsRUFBQTlSLEVBQUFuRCxLQUFBcEgsSUFFQTNCLEVBQVEsSUFBUkEsQ0FBd0I0NkUsRUFBQSxvQkFDeEIsSUFFQWo1RSxFQURBdUssRUFEQS9GLEtBQ0ErWCxHQUVBLEdBQ0EsR0FKQS9YLEtBSUE4WCxJQUFBL1IsRUFBQWxGLE9BQUEsT0FBd0MzRixXQUFBc0MsRUFBQTBMLE1BQUEsWUFDckMxTixFQUFBdUssRUFMSC9GLEtBS0c4WCxTQUxIOVgsS0FLRytQLEtBQ0gsT0FBVTdVLE1BQUFNLEVBQUEwTixNQUFBLEtBR1Y1TSxJQUFBVyxFQUFBLFdBQ0F5M0UsVUFBQSxTQUFBcDNFLEdBQ0EsV0FBQW0zRSxFQUFBbjNFLHVCQ3RCQSxJQUFBaUUsRUFBVzFILEVBQVEsSUFDbkJnSyxFQUFxQmhLLEVBQVEsSUFDN0J3RixFQUFVeEYsRUFBUSxJQUNsQnlDLEVBQWN6QyxFQUFRLEdBQ3RCc0UsRUFBZXRFLEVBQVEsR0FDdkI4RSxFQUFlOUUsRUFBUSxHQWN2QnlDLElBQUFXLEVBQUEsV0FBK0JuQyxJQVovQixTQUFBQSxFQUFBd0MsRUFBQWczRSxHQUNBLElBQ0E5b0UsRUFBQWxDLEVBREFxckUsRUFBQTN4RSxVQUFBbkMsT0FBQSxFQUFBdkQsRUFBQTBGLFVBQUEsR0FFQSxPQUFBckUsRUFBQXJCLEtBQUFxM0UsRUFBQXIzRSxFQUFBZzNFLElBQ0E5b0UsRUFBQWpLLEVBQUF4QyxFQUFBekIsRUFBQWczRSxJQUFBajFFLEVBQUFtTSxFQUFBLFNBQ0FBLEVBQUF0USxXQUNBc0MsSUFBQWdPLEVBQUExUSxJQUNBMFEsRUFBQTFRLElBQUFWLEtBQUF1NkUsUUFDQW4zRSxFQUNBVyxFQUFBbUwsRUFBQXpGLEVBQUF2RyxJQUFBeEMsRUFBQXdPLEVBQUFnckUsRUFBQUssUUFBQSxzQkNoQkEsSUFBQXB6RSxFQUFXMUgsRUFBUSxJQUNuQnlDLEVBQWN6QyxFQUFRLEdBQ3RCOEUsRUFBZTlFLEVBQVEsR0FFdkJ5QyxJQUFBVyxFQUFBLFdBQ0F1RSx5QkFBQSxTQUFBbEUsRUFBQWczRSxHQUNBLE9BQUEveUUsRUFBQXhDLEVBQUFKLEVBQUFyQixHQUFBZzNFLHVCQ05BLElBQUFoNEUsRUFBY3pDLEVBQVEsR0FDdEIrNkUsRUFBZS82RSxFQUFRLElBQ3ZCOEUsRUFBZTlFLEVBQVEsR0FFdkJ5QyxJQUFBVyxFQUFBLFdBQ0E0RyxlQUFBLFNBQUF2RyxHQUNBLE9BQUFzM0UsRUFBQWoyRSxFQUFBckIsd0JDTkEsSUFBQWhCLEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQVcsRUFBQSxXQUNBb0MsSUFBQSxTQUFBL0IsRUFBQWczRSxHQUNBLE9BQUFBLEtBQUFoM0Usc0JDSkEsSUFBQWhCLEVBQWN6QyxFQUFRLEdBQ3RCOEUsRUFBZTlFLEVBQVEsR0FDdkJ1dUUsRUFBQXp0RSxPQUFBaVQsYUFFQXRSLElBQUFXLEVBQUEsV0FDQTJRLGFBQUEsU0FBQXRRLEdBRUEsT0FEQXFCLEVBQUFyQixJQUNBOHFFLEtBQUE5cUUsdUJDUEEsSUFBQWhCLEVBQWN6QyxFQUFRLEdBRXRCeUMsSUFBQVcsRUFBQSxXQUErQml0QixRQUFVcndCLEVBQVEsd0JDRmpELElBQUF5QyxFQUFjekMsRUFBUSxHQUN0QjhFLEVBQWU5RSxFQUFRLEdBQ3ZCb3VFLEVBQUF0dEUsT0FBQW1ULGtCQUVBeFIsSUFBQVcsRUFBQSxXQUNBNlEsa0JBQUEsU0FBQXhRLEdBQ0FxQixFQUFBckIsR0FDQSxJQUVBLE9BREEycUUsS0FBQTNxRSxJQUNBLEVBQ0ssTUFBQVksR0FDTCw4QkNYQSxJQUFBWSxFQUFTakYsRUFBUSxHQUNqQjBILEVBQVcxSCxFQUFRLElBQ25CZ0ssRUFBcUJoSyxFQUFRLElBQzdCd0YsRUFBVXhGLEVBQVEsSUFDbEJ5QyxFQUFjekMsRUFBUSxHQUN0QmlILEVBQWlCakgsRUFBUSxJQUN6QjhFLEVBQWU5RSxFQUFRLEdBQ3ZCc0UsRUFBZXRFLEVBQVEsR0F3QnZCeUMsSUFBQVcsRUFBQSxXQUErQjZLLElBdEIvQixTQUFBQSxFQUFBeEssRUFBQWczRSxFQUFBTyxHQUNBLElBRUFDLEVBQUF4ckUsRUFGQXFyRSxFQUFBM3hFLFVBQUFuQyxPQUFBLEVBQUF2RCxFQUFBMEYsVUFBQSxHQUNBK3hFLEVBQUF4ekUsRUFBQXhDLEVBQUFKLEVBQUFyQixHQUFBZzNFLEdBRUEsSUFBQVMsRUFBQSxDQUNBLEdBQUE1MkUsRUFBQW1MLEVBQUF6RixFQUFBdkcsSUFDQSxPQUFBd0ssRUFBQXdCLEVBQUFnckUsRUFBQU8sRUFBQUYsR0FFQUksRUFBQWowRSxFQUFBLEdBRUEsR0FBQXpCLEVBQUEwMUUsRUFBQSxVQUNBLFFBQUFBLEVBQUFycEUsV0FBQXZOLEVBQUF3MkUsR0FBQSxTQUNBLEdBQUFHLEVBQUF2ekUsRUFBQXhDLEVBQUE0MUUsRUFBQUwsR0FBQSxDQUNBLEdBQUFRLEVBQUFoNkUsS0FBQWc2RSxFQUFBaHRFLE1BQUEsSUFBQWd0RSxFQUFBcHBFLFNBQUEsU0FDQW9wRSxFQUFBNTVFLE1BQUEyNUUsRUFDQS8xRSxFQUFBQyxFQUFBNDFFLEVBQUFMLEVBQUFRLFFBQ0toMkUsRUFBQUMsRUFBQTQxRSxFQUFBTCxFQUFBeHpFLEVBQUEsRUFBQSt6RSxJQUNMLFNBRUEsWUFBQXIzRSxJQUFBdTNFLEVBQUFqdEUsTUFBQWl0RSxFQUFBanRFLElBQUExTixLQUFBdTZFLEVBQUFFLElBQUEsdUJDNUJBLElBQUF2NEUsRUFBY3pDLEVBQVEsR0FDdEJtN0UsRUFBZW43RSxFQUFRLElBRXZCbTdFLEdBQUExNEUsSUFBQVcsRUFBQSxXQUNBMFksZUFBQSxTQUFBclksRUFBQWdNLEdBQ0EwckUsRUFBQXQvRCxNQUFBcFksRUFBQWdNLEdBQ0EsSUFFQSxPQURBMHJFLEVBQUFsdEUsSUFBQXhLLEVBQUFnTSxJQUNBLEVBQ0ssTUFBQXBMLEdBQ0wsOEJDWEFyRSxFQUFRLEtBQ1JHLEVBQUFELFFBQWlCRixFQUFRLEdBQXFCa0wsTUFBQW1GLHVDQ0M5QyxJQUFBNU4sRUFBY3pDLEVBQVEsR0FDdEJvN0UsRUFBZ0JwN0UsRUFBUSxHQUFSQSxFQUEyQixHQUUzQ3lDLElBQUFhLEVBQUEsU0FDQStNLFNBQUEsU0FBQStHLEdBQ0EsT0FBQWdrRSxFQUFBajFFLEtBQUFpUixFQUFBak8sVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLE1BSUEzRCxFQUFRLEdBQVJBLENBQStCLDZCQ1gvQkEsRUFBUSxLQUNSRyxFQUFBRCxRQUFpQkYsRUFBUSxHQUFxQmtHLE9BQUFtMUUsdUNDQzlDLElBQUE1NEUsRUFBY3pDLEVBQVEsR0FDdEJzN0UsRUFBV3Q3RSxFQUFRLEtBQ25CZ2EsRUFBZ0JoYSxFQUFRLElBR3hCdTdFLEVBQUEsbURBQUF6MEUsS0FBQWtULEdBRUF2WCxJQUFBYSxFQUFBYixFQUFBTyxFQUFBdTRFLEVBQUEsVUFDQUYsU0FBQSxTQUFBOXFELEdBQ0EsT0FBQStxRCxFQUFBbjFFLEtBQUFvcUIsRUFBQXBuQixVQUFBbkMsT0FBQSxFQUFBbUMsVUFBQSxRQUFBeEYsR0FBQSx1QkNYQTNELEVBQVEsS0FDUkcsRUFBQUQsUUFBaUJGLEVBQVEsR0FBcUJrRyxPQUFBczFFLHFDQ0M5QyxJQUFBLzRFLEVBQWN6QyxFQUFRLEdBQ3RCczdFLEVBQVd0N0UsRUFBUSxLQUNuQmdhLEVBQWdCaGEsRUFBUSxJQUd4QnU3RSxFQUFBLG1EQUFBejBFLEtBQUFrVCxHQUVBdlgsSUFBQWEsRUFBQWIsRUFBQU8sRUFBQXU0RSxFQUFBLFVBQ0FDLE9BQUEsU0FBQWpyRCxHQUNBLE9BQUErcUQsRUFBQW4xRSxLQUFBb3FCLEVBQUFwbkIsVUFBQW5DLE9BQUEsRUFBQW1DLFVBQUEsUUFBQXhGLEdBQUEsdUJDWEEzRCxFQUFRLEtBQ1JHLEVBQUFELFFBQWlCRixFQUFRLElBQXdCa0YsRUFBQSxrQ0NEakRsRixFQUFRLEdBQVJBLENBQXVCLGtDQ0F2QkEsRUFBUSxLQUNSRyxFQUFBRCxRQUFpQkYsRUFBUSxHQUFxQmMsT0FBQTI2RSwyQ0NBOUMsSUFBQWg1RSxFQUFjekMsRUFBUSxHQUN0QnF3QixFQUFjcndCLEVBQVEsS0FDdEJ5SCxFQUFnQnpILEVBQVEsSUFDeEIwSCxFQUFXMUgsRUFBUSxJQUNuQjQwRSxFQUFxQjUwRSxFQUFRLElBRTdCeUMsSUFBQVcsRUFBQSxVQUNBcTRFLDBCQUFBLFNBQUEzNUUsR0FPQSxJQU5BLElBS0FILEVBQUFnUSxFQUxBeE0sRUFBQXNDLEVBQUEzRixHQUNBNDVFLEVBQUFoMEUsRUFBQXhDLEVBQ0FnSCxFQUFBbWtCLEVBQUFsckIsR0FDQTJELEVBQUEsR0FDQTFJLEVBQUEsRUFFQThMLEVBQUFsRixPQUFBNUcsUUFFQXVELEtBREFnTyxFQUFBK3BFLEVBQUF2MkUsRUFBQXhELEVBQUF1SyxFQUFBOUwsUUFDQXcwRSxFQUFBOXJFLEVBQUFuSCxFQUFBZ1EsR0FFQSxPQUFBN0ksc0JDbkJBOUksRUFBUSxLQUNSRyxFQUFBRCxRQUFpQkYsRUFBUSxHQUFxQmMsT0FBQWtMLHdCQ0E5QyxJQUFBdkosRUFBY3pDLEVBQVEsR0FDdEIyN0UsRUFBYzM3RSxFQUFRLElBQVJBLEVBQTRCLEdBRTFDeUMsSUFBQVcsRUFBQSxVQUNBNEksT0FBQSxTQUFBekgsR0FDQSxPQUFBbzNFLEVBQUFwM0UsdUJDTkF2RSxFQUFRLEtBQ1JHLEVBQUFELFFBQWlCRixFQUFRLEdBQXFCYyxPQUFBc0wseUJDQTlDLElBQUEzSixFQUFjekMsRUFBUSxHQUN0QnVkLEVBQWV2ZCxFQUFRLElBQVJBLEVBQTRCLEdBRTNDeUMsSUFBQVcsRUFBQSxVQUNBZ0osUUFBQSxTQUFBN0gsR0FDQSxPQUFBZ1osRUFBQWhaLG9DQ0xBdkUsRUFBUSxLQUNSQSxFQUFRLEtBQ1JHLEVBQUFELFFBQWlCRixFQUFRLEdBQXFCMHVCLFFBQUEsc0NDRDlDLElBQUFqc0IsRUFBY3pDLEVBQVEsR0FDdEJxQyxFQUFXckMsRUFBUSxHQUNuQm9DLEVBQWFwQyxFQUFRLEdBQ3JCc0ssRUFBeUJ0SyxFQUFRLElBQ2pDd3JCLEVBQXFCeHJCLEVBQVEsS0FFN0J5QyxJQUFBYSxFQUFBYixFQUFBc0IsRUFBQSxXQUEyQzYzRSxRQUFBLFNBQUFDLEdBQzNDLElBQUF2dEUsRUFBQWhFLEVBQUFuRSxLQUFBOUQsRUFBQXFzQixTQUFBdHNCLEVBQUFzc0IsU0FDQTFvQixFQUFBLG1CQUFBNjFFLEVBQ0EsT0FBQTExRSxLQUFBaW1CLEtBQ0FwbUIsRUFBQSxTQUFBb1csR0FDQSxPQUFBb1AsRUFBQWxkLEVBQUF1dEUsS0FBQXp2RCxLQUFBLFdBQThELE9BQUFoUSxLQUN6RHkvRCxFQUNMNzFFLEVBQUEsU0FBQTNCLEdBQ0EsT0FBQW1uQixFQUFBbGQsRUFBQXV0RSxLQUFBenZELEtBQUEsV0FBOEQsTUFBQS9uQixLQUN6RHczRSx1QkNqQkw3N0UsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkcsRUFBQUQsUUFBaUJGLEVBQVEsb0JDRnpCLElBQUFvQyxFQUFhcEMsRUFBUSxHQUNyQnlDLEVBQWN6QyxFQUFRLEdBQ3RCZ2EsRUFBZ0JoYSxFQUFRLElBQ3hCcUosRUFBQSxHQUFBQSxNQUNBeXlFLEVBQUEsV0FBQWgxRSxLQUFBa1QsR0FDQSt5RCxFQUFBLFNBQUE5K0QsR0FDQSxnQkFBQXBHLEVBQUFrMEUsR0FDQSxJQUFBQyxFQUFBN3lFLFVBQUFuQyxPQUFBLEVBQ0FrWixJQUFBODdELEdBQUEzeUUsRUFBQTlJLEtBQUE0SSxVQUFBLEdBQ0EsT0FBQThFLEVBQUErdEUsRUFBQSxZQUVBLG1CQUFBbjBFLElBQUFqRSxTQUFBaUUsSUFBQXFCLE1BQUEvQyxLQUFBK1osSUFDS3JZLEVBQUFrMEUsS0FHTHQ1RSxJQUFBUyxFQUFBVCxFQUFBZSxFQUFBZixFQUFBTyxFQUFBODRFLEVBQUEsQ0FDQWw3RCxXQUFBbXNELEVBQUEzcUUsRUFBQXdlLFlBQ0FxN0QsWUFBQWxQLEVBQUEzcUUsRUFBQTY1RSxnQ0NsQkEsSUFBQXg1RSxFQUFjekMsRUFBUSxHQUN0Qms4RSxFQUFZbDhFLEVBQVEsSUFDcEJ5QyxJQUFBUyxFQUFBVCxFQUFBZSxFQUFBLENBQ0FnYyxhQUFBMDhELEVBQUFqdUUsSUFDQXlSLGVBQUF3OEQsRUFBQW5oRSx5QkN5Q0EsSUE3Q0EsSUFBQXhKLEVBQWlCdlIsRUFBUSxJQUN6QjJvQixFQUFjM29CLEVBQVEsSUFDdEJ1QyxFQUFldkMsRUFBUSxJQUN2Qm9DLEVBQWFwQyxFQUFRLEdBQ3JCc0MsRUFBV3RDLEVBQVEsSUFDbkJ3SyxFQUFnQnhLLEVBQVEsSUFDeEJtSyxFQUFVbkssRUFBUSxHQUNsQmtOLEVBQUEvQyxFQUFBLFlBQ0FneUUsRUFBQWh5RSxFQUFBLGVBQ0FpeUUsRUFBQTV4RSxFQUFBVSxNQUVBbXhFLEVBQUEsQ0FDQUMsYUFBQSxFQUNBQyxxQkFBQSxFQUNBQyxjQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGFBQUEsRUFDQUMsZUFBQSxFQUNBQyxjQUFBLEVBQ0FDLHNCQUFBLEVBQ0FDLFVBQUEsRUFDQUMsbUJBQUEsRUFDQUMsZ0JBQUEsRUFDQUMsaUJBQUEsRUFDQUMsbUJBQUEsRUFDQUMsV0FBQSxFQUNBQyxlQUFBLEVBQ0FDLGNBQUEsRUFDQUMsVUFBQSxFQUNBQyxrQkFBQSxFQUNBQyxRQUFBLEVBQ0FDLGFBQUEsRUFDQUMsZUFBQSxFQUNBQyxlQUFBLEVBQ0FDLGdCQUFBLEVBQ0FDLGNBQUEsRUFDQUMsZUFBQSxFQUNBQyxrQkFBQSxFQUNBQyxrQkFBQSxFQUNBQyxnQkFBQSxFQUNBQyxrQkFBQSxFQUNBQyxlQUFBLEVBQ0FDLFdBQUEsR0FHQUMsRUFBQTExRCxFQUFBMHpELEdBQUFqOEUsRUFBQSxFQUFvREEsRUFBQWkrRSxFQUFBcjNFLE9BQXdCNUcsSUFBQSxDQUM1RSxJQUlBdUIsRUFKQWtGLEVBQUF3M0UsRUFBQWorRSxHQUNBaytFLEVBQUFqQyxFQUFBeDFFLEdBQ0EwM0UsRUFBQW44RSxFQUFBeUUsR0FDQTRJLEVBQUE4dUUsS0FBQXY4RSxVQUVBLEdBQUF5TixJQUNBQSxFQUFBdkMsSUFBQTVLLEVBQUFtTixFQUFBdkMsRUFBQWt2RSxHQUNBM3NFLEVBQUEwc0UsSUFBQTc1RSxFQUFBbU4sRUFBQTBzRSxFQUFBdDFFLEdBQ0EyRCxFQUFBM0QsR0FBQXUxRSxFQUNBa0MsR0FBQSxJQUFBMzhFLEtBQUE0UCxFQUFBOUIsRUFBQTlOLElBQUFZLEVBQUFrTixFQUFBOU4sRUFBQTRQLEVBQUE1UCxJQUFBLG9CQ2hEQSxTQUFBUyxHQUNBLGFBRUEsSUFFQXVCLEVBRkE2NkUsRUFBQTE5RSxPQUFBa0IsVUFDQWl3QixFQUFBdXNELEVBQUF2OEUsZUFFQXdtQixFQUFBLG1CQUFBdG5CLGNBQUEsR0FDQXM5RSxFQUFBaDJELEVBQUExWixVQUFBLGFBQ0EydkUsRUFBQWoyRCxFQUFBazJELGVBQUEsa0JBQ0FDLEVBQUFuMkQsRUFBQXJuQixhQUFBLGdCQUVBeTlFLEVBQUEsaUJBQUExK0UsRUFDQTIrRSxFQUFBMThFLEVBQUEyOEUsbUJBQ0EsR0FBQUQsRUFDQUQsSUFHQTErRSxFQUFBRCxRQUFBNCtFLE9BSkEsRUFhQUEsRUFBQTE4RSxFQUFBMjhFLG1CQUFBRixFQUFBMStFLEVBQUFELFFBQUEsSUFjQTZzRSxPQW9CQSxJQUFBaVMsRUFBQSxpQkFDQUMsRUFBQSxpQkFDQUMsRUFBQSxZQUNBQyxFQUFBLFlBSUFDLEVBQUEsR0FZQXBpRSxFQUFBLEdBQ0FBLEVBQUF5aEUsR0FBQSxXQUNBLE9BQUF0NEUsTUFHQSxJQUFBNDBFLEVBQUFqNkUsT0FBQWtKLGVBQ0FxMUUsRUFBQXRFLE9BQUEvdUUsRUFBQSxNQUNBcXpFLEdBQ0FBLElBQUFiLEdBQ0F2c0QsRUFBQTF4QixLQUFBOCtFLEVBQUFaLEtBR0F6aEUsRUFBQXFpRSxHQUdBLElBQUFDLEVBQUFDLEVBQUF2OUUsVUFDQXc5RSxFQUFBeDlFLFVBQUFsQixPQUFBWSxPQUFBc2IsR0FDQXlpRSxFQUFBejlFLFVBQUFzOUUsRUFBQXZ0RSxZQUFBd3RFLEVBQ0FBLEVBQUF4dEUsWUFBQTB0RSxFQUNBRixFQUFBWCxHQUNBYSxFQUFBQyxZQUFBLG9CQVlBWixFQUFBYSxvQkFBQSxTQUFBQyxHQUNBLElBQUFDLEVBQUEsbUJBQUFELEtBQUE3dEUsWUFDQSxRQUFBOHRFLElBQ0FBLElBQUFKLEdBR0EsdUJBQUFJLEVBQUFILGFBQUFHLEVBQUFsL0UsUUFJQW0rRSxFQUFBejlDLEtBQUEsU0FBQXUrQyxHQVVBLE9BVEE5K0UsT0FBQWdiLGVBQ0FoYixPQUFBZ2IsZUFBQThqRSxFQUFBTCxJQUVBSyxFQUFBNWpFLFVBQUF1akUsRUFDQVgsS0FBQWdCLElBQ0FBLEVBQUFoQixHQUFBLHNCQUdBZ0IsRUFBQTU5RSxVQUFBbEIsT0FBQVksT0FBQTQ5RSxHQUNBTSxHQU9BZCxFQUFBZ0IsTUFBQSxTQUFBMTRFLEdBQ0EsT0FBWTI0RSxRQUFBMzRFLElBc0VaNDRFLEVBQUFDLEVBQUFqK0UsV0FDQWkrRSxFQUFBaitFLFVBQUEwOEUsR0FBQSxXQUNBLE9BQUF2NEUsTUFFQTI0RSxFQUFBbUIsZ0JBS0FuQixFQUFBN3BELE1BQUEsU0FBQWlyRCxFQUFBQyxFQUFBajhFLEVBQUFrOEUsR0FDQSxJQUFBaHRFLEVBQUEsSUFBQTZzRSxFQUNBbFQsRUFBQW1ULEVBQUFDLEVBQUFqOEUsRUFBQWs4RSxJQUdBLE9BQUF0QixFQUFBYSxvQkFBQVEsR0FDQS9zRSxFQUNBQSxFQUFBaEUsT0FBQWdkLEtBQUEsU0FBQXRqQixHQUNBLE9BQUFBLEVBQUF1RyxLQUFBdkcsRUFBQXpILE1BQUErUixFQUFBaEUsVUFzS0E0d0UsRUFBQVYsR0FFQUEsRUFBQVYsR0FBQSxZQU9BVSxFQUFBYixHQUFBLFdBQ0EsT0FBQXQ0RSxNQUdBbTVFLEVBQUFsMkUsU0FBQSxXQUNBLDRCQWtDQTAxRSxFQUFBNXlFLEtBQUEsU0FBQXBLLEdBQ0EsSUFBQW9LLEVBQUEsR0FDQSxRQUFBdkssS0FBQUcsRUFDQW9LLEVBQUFuRCxLQUFBcEgsR0FNQSxPQUpBdUssRUFBQXNFLFVBSUEsU0FBQXBCLElBQ0EsS0FBQWxELEVBQUFsRixRQUFBLENBQ0EsSUFBQXJGLEVBQUF1SyxFQUFBNHNCLE1BQ0EsR0FBQW4zQixLQUFBRyxFQUdBLE9BRkFzTixFQUFBL04sTUFBQU0sRUFDQXlOLEVBQUFDLE1BQUEsRUFDQUQsRUFRQSxPQURBQSxFQUFBQyxNQUFBLEVBQ0FELElBc0NBMHZFLEVBQUE5eUUsU0FNQXEwRSxFQUFBcitFLFVBQUEsQ0FDQStQLFlBQUFzdUUsRUFFQUMsTUFBQSxTQUFBQyxHQWNBLEdBYkFwNkUsS0FBQXlwQixLQUFBLEVBQ0F6cEIsS0FBQWlKLEtBQUEsRUFHQWpKLEtBQUFxNkUsS0FBQXI2RSxLQUFBczZFLE1BQUE5OEUsRUFDQXdDLEtBQUFrSixNQUFBLEVBQ0FsSixLQUFBdTZFLFNBQUEsS0FFQXY2RSxLQUFBZ0IsT0FBQSxPQUNBaEIsS0FBQWlCLElBQUF6RCxFQUVBd0MsS0FBQXc2RSxXQUFBendFLFFBQUEwd0UsSUFFQUwsRUFDQSxRQUFBNS9FLEtBQUF3RixLQUVBLE1BQUF4RixFQUFBK2IsT0FBQSxJQUNBdVYsRUFBQTF4QixLQUFBNEYsS0FBQXhGLEtBQ0E0RyxPQUFBNUcsRUFBQTBJLE1BQUEsTUFDQWxELEtBQUF4RixHQUFBZ0QsSUFNQWtoRSxLQUFBLFdBQ0ExK0QsS0FBQWtKLE1BQUEsRUFFQSxJQUNBd3hFLEVBREExNkUsS0FBQXc2RSxXQUFBLEdBQ0FHLFdBQ0EsYUFBQUQsRUFBQW4rRSxLQUNBLE1BQUFtK0UsRUFBQXo1RSxJQUdBLE9BQUFqQixLQUFBNDZFLE1BR0FDLGtCQUFBLFNBQUFDLEdBQ0EsR0FBQTk2RSxLQUFBa0osS0FDQSxNQUFBNHhFLEVBR0EsSUFBQTluRCxFQUFBaHpCLEtBQ0EsU0FBQSs2RSxFQUFBQyxFQUFBQyxHQVlBLE9BWEFDLEVBQUEzK0UsS0FBQSxRQUNBMitFLEVBQUFqNkUsSUFBQTY1RSxFQUNBOW5ELEVBQUEvcEIsS0FBQSt4RSxFQUVBQyxJQUdBam9ELEVBQUFoeUIsT0FBQSxPQUNBZ3lCLEVBQUEveEIsSUFBQXpELEtBR0F5OUUsRUFHQSxRQUFBaGhGLEVBQUErRixLQUFBdzZFLFdBQUEzNUUsT0FBQSxFQUE4QzVHLEdBQUEsSUFBUUEsRUFBQSxDQUN0RCxJQUFBb3ZCLEVBQUFycEIsS0FBQXc2RSxXQUFBdmdGLEdBQ0FpaEYsRUFBQTd4RCxFQUFBc3hELFdBRUEsWUFBQXR4RCxFQUFBOHhELE9BSUEsT0FBQUosRUFBQSxPQUdBLEdBQUExeEQsRUFBQTh4RCxRQUFBbjdFLEtBQUF5cEIsS0FBQSxDQUNBLElBQUEyeEQsRUFBQXR2RCxFQUFBMXhCLEtBQUFpdkIsRUFBQSxZQUNBZ3lELEVBQUF2dkQsRUFBQTF4QixLQUFBaXZCLEVBQUEsY0FFQSxHQUFBK3hELEdBQUFDLEVBQUEsQ0FDQSxHQUFBcjdFLEtBQUF5cEIsS0FBQUosRUFBQWl5RCxTQUNBLE9BQUFQLEVBQUExeEQsRUFBQWl5RCxVQUFBLEdBQ2EsR0FBQXQ3RSxLQUFBeXBCLEtBQUFKLEVBQUFreUQsV0FDYixPQUFBUixFQUFBMXhELEVBQUFreUQsaUJBR1csR0FBQUgsR0FDWCxHQUFBcDdFLEtBQUF5cEIsS0FBQUosRUFBQWl5RCxTQUNBLE9BQUFQLEVBQUExeEQsRUFBQWl5RCxVQUFBLE9BR1csS0FBQUQsRUFNWCxVQUFBMTdELE1BQUEsMENBTEEsR0FBQTNmLEtBQUF5cEIsS0FBQUosRUFBQWt5RCxXQUNBLE9BQUFSLEVBQUExeEQsRUFBQWt5RCxnQkFVQUMsT0FBQSxTQUFBai9FLEVBQUEwRSxHQUNBLFFBQUFoSCxFQUFBK0YsS0FBQXc2RSxXQUFBMzVFLE9BQUEsRUFBOEM1RyxHQUFBLElBQVFBLEVBQUEsQ0FDdEQsSUFBQW92QixFQUFBcnBCLEtBQUF3NkUsV0FBQXZnRixHQUNBLEdBQUFvdkIsRUFBQTh4RCxRQUFBbjdFLEtBQUF5cEIsTUFDQXFDLEVBQUExeEIsS0FBQWl2QixFQUFBLGVBQ0FycEIsS0FBQXlwQixLQUFBSixFQUFBa3lELFdBQUEsQ0FDQSxJQUFBRSxFQUFBcHlELEVBQ0EsT0FJQW95RCxJQUNBLFVBQUFsL0UsR0FDQSxhQUFBQSxJQUNBay9FLEVBQUFOLFFBQUFsNkUsR0FDQUEsR0FBQXc2RSxFQUFBRixhQUdBRSxFQUFBLE1BR0EsSUFBQVAsRUFBQU8sSUFBQWQsV0FBQSxHQUlBLE9BSEFPLEVBQUEzK0UsT0FDQTIrRSxFQUFBajZFLE1BRUF3NkUsR0FDQXo3RSxLQUFBZ0IsT0FBQSxPQUNBaEIsS0FBQWlKLEtBQUF3eUUsRUFBQUYsV0FDQXRDLEdBR0FqNUUsS0FBQTA3RSxTQUFBUixJQUdBUSxTQUFBLFNBQUFSLEVBQUFTLEdBQ0EsYUFBQVQsRUFBQTMrRSxLQUNBLE1BQUEyK0UsRUFBQWo2RSxJQWNBLE1BWEEsVUFBQWk2RSxFQUFBMytFLE1BQ0EsYUFBQTIrRSxFQUFBMytFLEtBQ0F5RCxLQUFBaUosS0FBQWl5RSxFQUFBajZFLElBQ08sV0FBQWk2RSxFQUFBMytFLE1BQ1B5RCxLQUFBNDZFLEtBQUE1NkUsS0FBQWlCLElBQUFpNkUsRUFBQWo2RSxJQUNBakIsS0FBQWdCLE9BQUEsU0FDQWhCLEtBQUFpSixLQUFBLE9BQ08sV0FBQWl5RSxFQUFBMytFLE1BQUFvL0UsSUFDUDM3RSxLQUFBaUosS0FBQTB5RSxHQUdBMUMsR0FHQTJDLE9BQUEsU0FBQUwsR0FDQSxRQUFBdGhGLEVBQUErRixLQUFBdzZFLFdBQUEzNUUsT0FBQSxFQUE4QzVHLEdBQUEsSUFBUUEsRUFBQSxDQUN0RCxJQUFBb3ZCLEVBQUFycEIsS0FBQXc2RSxXQUFBdmdGLEdBQ0EsR0FBQW92QixFQUFBa3lELGVBR0EsT0FGQXY3RSxLQUFBMDdFLFNBQUFyeUQsRUFBQXN4RCxXQUFBdHhELEVBQUFzeUQsVUFDQWxCLEVBQUFweEQsR0FDQTR2RCxJQUtBM3dELE1BQUEsU0FBQTZ5RCxHQUNBLFFBQUFsaEYsRUFBQStGLEtBQUF3NkUsV0FBQTM1RSxPQUFBLEVBQThDNUcsR0FBQSxJQUFRQSxFQUFBLENBQ3RELElBQUFvdkIsRUFBQXJwQixLQUFBdzZFLFdBQUF2Z0YsR0FDQSxHQUFBb3ZCLEVBQUE4eEQsV0FBQSxDQUNBLElBQUFELEVBQUE3eEQsRUFBQXN4RCxXQUNBLGFBQUFPLEVBQUEzK0UsS0FBQSxDQUNBLElBQUFzL0UsRUFBQVgsRUFBQWo2RSxJQUNBdzVFLEVBQUFweEQsR0FFQSxPQUFBd3lELEdBTUEsVUFBQWw4RCxNQUFBLDBCQUdBbThELGNBQUEsU0FBQW5vRSxFQUFBb29FLEVBQUFDLEdBYUEsT0FaQWg4RSxLQUFBdTZFLFNBQUEsQ0FDQTN4RSxTQUFBL0MsRUFBQThOLEdBQ0Fvb0UsYUFDQUMsV0FHQSxTQUFBaDhFLEtBQUFnQixTQUdBaEIsS0FBQWlCLElBQUF6RCxHQUdBeTdFLElBbnFCQSxTQUFBclMsRUFBQW1ULEVBQUFDLEVBQUFqOEUsRUFBQWs4RSxHQUVBLElBQUFnQyxFQUFBakMsS0FBQW4rRSxxQkFBQXc5RSxFQUFBVyxFQUFBWCxFQUNBNkMsRUFBQXZoRixPQUFBWSxPQUFBMGdGLEVBQUFwZ0YsV0FDQW0zQixFQUFBLElBQUFrbkQsRUFBQUQsR0FBQSxJQU1BLE9BRkFpQyxFQUFBQyxRQWtNQSxTQUFBcEMsRUFBQWg4RSxFQUFBaTFCLEdBQ0EsSUFBQXN0QyxFQUFBdVksRUFFQSxnQkFBQTczRSxFQUFBQyxHQUNBLEdBQUFxL0QsSUFBQXlZLEVBQ0EsVUFBQXA1RCxNQUFBLGdDQUdBLEdBQUEyZ0QsSUFBQTBZLEVBQUEsQ0FDQSxhQUFBaDRFLEVBQ0EsTUFBQUMsRUFLQSxPQUFBbTdFLElBTUEsSUFIQXBwRCxFQUFBaHlCLFNBQ0FneUIsRUFBQS94QixRQUVBLENBQ0EsSUFBQXM1RSxFQUFBdm5ELEVBQUF1bkQsU0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQThCLEVBQUFDLEVBQUEvQixFQUFBdm5ELEdBQ0EsR0FBQXFwRCxFQUFBLENBQ0EsR0FBQUEsSUFBQXBELEVBQUEsU0FDQSxPQUFBb0QsR0FJQSxZQUFBcnBELEVBQUFoeUIsT0FHQWd5QixFQUFBcW5ELEtBQUFybkQsRUFBQXNuRCxNQUFBdG5ELEVBQUEveEIsU0FFUyxhQUFBK3hCLEVBQUFoeUIsT0FBQSxDQUNULEdBQUFzL0QsSUFBQXVZLEVBRUEsTUFEQXZZLEVBQUEwWSxFQUNBaG1ELEVBQUEveEIsSUFHQSt4QixFQUFBNm5ELGtCQUFBN25ELEVBQUEveEIsU0FFUyxXQUFBK3hCLEVBQUFoeUIsUUFDVGd5QixFQUFBd29ELE9BQUEsU0FBQXhvRCxFQUFBL3hCLEtBR0FxL0QsRUFBQXlZLEVBRUEsSUFBQW1DLEVBQUFxQixFQUFBeEMsRUFBQWg4RSxFQUFBaTFCLEdBQ0EsY0FBQWtvRCxFQUFBMytFLEtBQUEsQ0FPQSxHQUpBK2pFLEVBQUF0dEMsRUFBQTlwQixLQUNBOHZFLEVBQ0FGLEVBRUFvQyxFQUFBajZFLE1BQUFnNEUsRUFDQSxTQUdBLE9BQ0EvOUUsTUFBQWdnRixFQUFBajZFLElBQ0FpSSxLQUFBOHBCLEVBQUE5cEIsTUFHUyxVQUFBZ3lFLEVBQUEzK0UsT0FDVCtqRSxFQUFBMFksRUFHQWhtRCxFQUFBaHlCLE9BQUEsUUFDQWd5QixFQUFBL3hCLElBQUFpNkUsRUFBQWo2RSxPQTFRQXU3RSxDQUFBekMsRUFBQWg4RSxFQUFBaTFCLEdBRUFrcEQsRUFjQSxTQUFBSyxFQUFBNzZFLEVBQUFzZixFQUFBL2YsR0FDQSxJQUNBLE9BQWMxRSxLQUFBLFNBQUEwRSxJQUFBUyxFQUFBdEgsS0FBQTRtQixFQUFBL2YsSUFDVCxNQUFBa25CLEdBQ0wsT0FBYzVyQixLQUFBLFFBQUEwRSxJQUFBa25CLElBaUJkLFNBQUFreEQsS0FDQSxTQUFBQyxLQUNBLFNBQUFGLEtBNEJBLFNBQUFTLEVBQUFoK0UsR0FDQSwwQkFBQWtPLFFBQUEsU0FBQS9JLEdBQ0FuRixFQUFBbUYsR0FBQSxTQUFBQyxHQUNBLE9BQUFqQixLQUFBbThFLFFBQUFuN0UsRUFBQUMsTUFvQ0EsU0FBQTY0RSxFQUFBb0MsR0FnQ0EsSUFBQU8sRUFnQ0F6OEUsS0FBQW04RSxRQTlCQSxTQUFBbjdFLEVBQUFDLEdBQ0EsU0FBQXk3RSxJQUNBLFdBQUFuMEQsUUFBQSxTQUFBekMsRUFBQWlCLElBbkNBLFNBQUEvTixFQUFBaFksRUFBQUMsRUFBQTZrQixFQUFBaUIsR0FDQSxJQUFBbTBELEVBQUFxQixFQUFBTCxFQUFBbDdFLEdBQUFrN0UsRUFBQWo3RSxHQUNBLGFBQUFpNkUsRUFBQTMrRSxLQUVPLENBQ1AsSUFBQW9HLEVBQUF1NEUsRUFBQWo2RSxJQUNBL0YsRUFBQXlILEVBQUF6SCxNQUNBLE9BQUFBLEdBQ0EsaUJBQUFBLEdBQ0E0d0IsRUFBQTF4QixLQUFBYyxFQUFBLFdBQ0FxdEIsUUFBQXpDLFFBQUE1cUIsRUFBQTArRSxTQUFBM3pELEtBQUEsU0FBQS9xQixHQUNBOGQsRUFBQSxPQUFBOWQsRUFBQTRxQixFQUFBaUIsSUFDVyxTQUFBb0IsR0FDWG5QLEVBQUEsUUFBQW1QLEVBQUFyQyxFQUFBaUIsS0FJQXdCLFFBQUF6QyxRQUFBNXFCLEdBQUErcUIsS0FBQSxTQUFBMDJELEdBSUFoNkUsRUFBQXpILE1BQUF5aEYsRUFDQTcyRCxFQUFBbmpCLElBQ1MsU0FBQWlsQixHQUdULE9BQUE1TyxFQUFBLFFBQUE0TyxFQUFBOUIsRUFBQWlCLEtBdkJBQSxFQUFBbTBELEVBQUFqNkUsS0FpQ0ErWCxDQUFBaFksRUFBQUMsRUFBQTZrQixFQUFBaUIsS0FJQSxPQUFBMDFELEVBYUFBLElBQUF4MkQsS0FDQXkyRCxFQUdBQSxHQUNBQSxLQStHQSxTQUFBSixFQUFBL0IsRUFBQXZuRCxHQUNBLElBQUFoeUIsRUFBQXU1RSxFQUFBM3hFLFNBQUFvcUIsRUFBQWh5QixRQUNBLEdBQUFBLElBQUF4RCxFQUFBLENBS0EsR0FGQXcxQixFQUFBdW5ELFNBQUEsS0FFQSxVQUFBdm5ELEVBQUFoeUIsT0FBQSxDQUNBLEdBQUF1NUUsRUFBQTN4RSxTQUFBZzBFLFNBR0E1cEQsRUFBQWh5QixPQUFBLFNBQ0FneUIsRUFBQS94QixJQUFBekQsRUFDQTgrRSxFQUFBL0IsRUFBQXZuRCxHQUVBLFVBQUFBLEVBQUFoeUIsUUFHQSxPQUFBaTRFLEVBSUFqbUQsRUFBQWh5QixPQUFBLFFBQ0FneUIsRUFBQS94QixJQUFBLElBQUE1QyxVQUNBLGtEQUdBLE9BQUE0NkUsRUFHQSxJQUFBaUMsRUFBQXFCLEVBQUF2N0UsRUFBQXU1RSxFQUFBM3hFLFNBQUFvcUIsRUFBQS94QixLQUVBLGFBQUFpNkUsRUFBQTMrRSxLQUlBLE9BSEF5MkIsRUFBQWh5QixPQUFBLFFBQ0FneUIsRUFBQS94QixJQUFBaTZFLEVBQUFqNkUsSUFDQSt4QixFQUFBdW5ELFNBQUEsS0FDQXRCLEVBR0EsSUFBQXQrQyxFQUFBdWdELEVBQUFqNkUsSUFFQSxPQUFBMDVCLEVBT0FBLEVBQUF6eEIsTUFHQThwQixFQUFBdW5ELEVBQUF3QixZQUFBcGhELEVBQUF6L0IsTUFHQTgzQixFQUFBL3BCLEtBQUFzeEUsRUFBQXlCLFFBUUEsV0FBQWhwRCxFQUFBaHlCLFNBQ0FneUIsRUFBQWh5QixPQUFBLE9BQ0FneUIsRUFBQS94QixJQUFBekQsR0FVQXcxQixFQUFBdW5ELFNBQUEsS0FDQXRCLEdBTkF0K0MsR0EzQkEzSCxFQUFBaHlCLE9BQUEsUUFDQWd5QixFQUFBL3hCLElBQUEsSUFBQTVDLFVBQUEsb0NBQ0EyMEIsRUFBQXVuRCxTQUFBLEtBQ0F0QixHQW9EQSxTQUFBNEQsRUFBQUMsR0FDQSxJQUFBenpELEVBQUEsQ0FBaUI4eEQsT0FBQTJCLEVBQUEsSUFFakIsS0FBQUEsSUFDQXp6RCxFQUFBaXlELFNBQUF3QixFQUFBLElBR0EsS0FBQUEsSUFDQXp6RCxFQUFBa3lELFdBQUF1QixFQUFBLEdBQ0F6ekQsRUFBQXN5RCxTQUFBbUIsRUFBQSxJQUdBOThFLEtBQUF3NkUsV0FBQTUzRSxLQUFBeW1CLEdBR0EsU0FBQW94RCxFQUFBcHhELEdBQ0EsSUFBQTZ4RCxFQUFBN3hELEVBQUFzeEQsWUFBQSxHQUNBTyxFQUFBMytFLEtBQUEsZ0JBQ0EyK0UsRUFBQWo2RSxJQUNBb29CLEVBQUFzeEQsV0FBQU8sRUFHQSxTQUFBaEIsRUFBQUQsR0FJQWo2RSxLQUFBdzZFLFdBQUEsRUFBd0JXLE9BQUEsU0FDeEJsQixFQUFBbHdFLFFBQUE4eUUsRUFBQTc4RSxNQUNBQSxLQUFBbTZFLE9BQUEsR0E4QkEsU0FBQXQwRSxFQUFBOE4sR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQW9wRSxFQUFBcHBFLEVBQUEya0UsR0FDQSxHQUFBeUUsRUFDQSxPQUFBQSxFQUFBM2lGLEtBQUF1WixHQUdBLHNCQUFBQSxFQUFBMUssS0FDQSxPQUFBMEssRUFHQSxJQUFBdlMsTUFBQXVTLEVBQUE5UyxRQUFBLENBQ0EsSUFBQTVHLEdBQUEsRUFBQWdQLEVBQUEsU0FBQUEsSUFDQSxPQUFBaFAsRUFBQTBaLEVBQUE5UyxRQUNBLEdBQUFpckIsRUFBQTF4QixLQUFBdVosRUFBQTFaLEdBR0EsT0FGQWdQLEVBQUEvTixNQUFBeVksRUFBQTFaLEdBQ0FnUCxFQUFBQyxNQUFBLEVBQ0FELEVBT0EsT0FIQUEsRUFBQS9OLE1BQUFzQyxFQUNBeUwsRUFBQUMsTUFBQSxFQUVBRCxHQUdBLE9BQUFBLFVBS0EsT0FBWUEsS0FBQW16RSxHQUlaLFNBQUFBLElBQ0EsT0FBWWxoRixNQUFBc0MsRUFBQTBMLE1BQUEsSUF4ZlosQ0Fzc0JBLFdBQ0EsT0FBQWxKLE1BQUEsaUJBQUFqQyxXQURBLElBRUdOLFNBQUEsY0FBQUEsa0NDL3NCSCxJQUFBdS9FLEVBQUFuakYsRUFBQSxJQUFBQSxFQUFBNkIsRUFBQXNoRixHQUFvWCxvQkNBcFhoakYsRUFBQUQsUUFBMkJGLEVBQVEsR0FBUkEsRUFBOEQsSUFFekYrSSxLQUFBLENBQWM1SSxFQUFBQyxFQUFTLDJkQUErZCxJQUFTa0YsUUFBQSxFQUFBdWYsUUFBQSx5SUFBQTZELE1BQUEsR0FBQTA2RCxTQUFBLGtPQUFnWnRyRCxLQUFBLG9EQUFBdXJELGVBQUEsNmRBQWlqQnYrRCxXQUFBLG9DQ0ZoOEMsSUFBQXcrRCxFQUFBdGpGLEVBQUEsSUFBQUEsRUFBQTZCLEVBQUF5aEYsR0FBK1csb0JDQS9XbmpGLEVBQUFELFFBQTJCRixFQUFRLEdBQVJBLEVBQThELElBRXpGK0ksS0FBQSxDQUFjNUksRUFBQUMsRUFBUyx1ZEFBcWQsSUFBU2tGLFFBQUEsRUFBQXVmLFFBQUEsb0lBQUE2RCxNQUFBLEdBQUEwNkQsU0FBQSw2UUFBc2J0ckQsS0FBQSwrQ0FBQXVyRCxlQUFBLHlkQUFraUJ2K0QsV0FBQSx3QkNGNzhDLFNBQUExaUIsR0FBQSxJQUFBbWhGLE9BQUEsSUFBQW5oRixNQUNBLG9CQUFBOEIsWUFDQUYsT0FDQWtGLEVBQUF0RixTQUFBNUIsVUFBQWtILE1BaUJBLFNBQUFzNkUsRUFBQTF2RSxFQUFBMnZFLEdBQ0F0OUUsS0FBQXU5RSxJQUFBNXZFLEVBQ0EzTixLQUFBdzlFLFNBQUFGLEVBZkF2akYsRUFBQTBnQixXQUFBLFdBQ0EsV0FBQTRpRSxFQUFBdDZFLEVBQUEzSSxLQUFBcWdCLFdBQUEyaUUsRUFBQXA2RSxXQUFBeTZFLGVBRUExakYsRUFBQSs3RSxZQUFBLFdBQ0EsV0FBQXVILEVBQUF0NkUsRUFBQTNJLEtBQUEwN0UsWUFBQXNILEVBQUFwNkUsV0FBQTA2RSxnQkFFQTNqRixFQUFBMGpGLGFBQ0ExakYsRUFBQTJqRixjQUFBLFNBQUE3MEMsR0FDQUEsR0FDQUEsRUFBQW41QixTQVFBMnRFLEVBQUF4aEYsVUFBQThoRixNQUFBTixFQUFBeGhGLFVBQUErM0MsSUFBQSxhQUNBeXBDLEVBQUF4aEYsVUFBQTZULE1BQUEsV0FDQTFQLEtBQUF3OUUsU0FBQXBqRixLQUFBZ2pGLEVBQUFwOUUsS0FBQXU5RSxNQUlBeGpGLEVBQUE2akYsT0FBQSxTQUFBNS9ELEVBQUE2L0QsR0FDQUosYUFBQXovRCxFQUFBOC9ELGdCQUNBOS9ELEVBQUErL0QsYUFBQUYsR0FHQTlqRixFQUFBaWtGLFNBQUEsU0FBQWhnRSxHQUNBeS9ELGFBQUF6L0QsRUFBQTgvRCxnQkFDQTkvRCxFQUFBKy9ELGNBQUEsR0FHQWhrRixFQUFBa2tGLGFBQUFsa0YsRUFBQWl6QyxPQUFBLFNBQUFodkIsR0FDQXkvRCxhQUFBei9ELEVBQUE4L0QsZ0JBRUEsSUFBQUQsRUFBQTcvRCxFQUFBKy9ELGFBQ0FGLEdBQUEsSUFDQTcvRCxFQUFBOC9ELGVBQUFyakUsV0FBQSxXQUNBdUQsRUFBQWtnRSxZQUNBbGdFLEVBQUFrZ0UsY0FDS0wsS0FLTGhrRixFQUFRLEtBSVJFLEVBQUFzZixhQUFBLG9CQUFBdGIsV0FBQXNiLG1CQUNBLElBQUFwZCxLQUFBb2QsY0FDQXJaLFdBQUFxWixhQUNBdGYsRUFBQXdmLGVBQUEsb0JBQUF4YixXQUFBd2IscUJBQ0EsSUFBQXRkLEtBQUFzZCxnQkFDQXZaLFdBQUF1WixvREM5REEsU0FBQXRkLEVBQUFrZCxJQUFBLFNBQUFsZCxFQUFBdUIsR0FDQSxhQUVBLElBQUF2QixFQUFBb2QsYUFBQSxDQUlBLElBSUE4a0UsRUE2SEFsbEUsRUFaQUgsRUFyQkFzbEUsRUFDQUMsRUFqR0FDLEVBQUEsRUFDQUMsRUFBQSxHQUNBQyxHQUFBLEVBQ0FDLEVBQUF4aUYsRUFBQXFULFNBb0pBb3ZFLEVBQUEvakYsT0FBQWtKLGdCQUFBbEosT0FBQWtKLGVBQUE1SCxHQUNBeWlGLE9BQUFqa0UsV0FBQWlrRSxFQUFBemlGLEVBR1UscUJBQVYsR0FBVWdILFNBQUE3SSxLQUFBNkIsRUFBQWtkLFNBcEZWZ2xFLEVBQUEsU0FBQXBELEdBQ0E1aEUsRUFBQWEsU0FBQSxXQUEwQzJrRSxFQUFBNUQsT0FJMUMsV0FHQSxHQUFBOStFLEVBQUFvZSxjQUFBcGUsRUFBQXNlLGNBQUEsQ0FDQSxJQUFBcWtFLEdBQUEsRUFDQUMsRUFBQTVpRixFQUFBbWUsVUFNQSxPQUxBbmUsRUFBQW1lLFVBQUEsV0FDQXdrRSxHQUFBLEdBRUEzaUYsRUFBQW9lLFlBQUEsUUFDQXBlLEVBQUFtZSxVQUFBeWtFLEVBQ0FELEdBd0VLRSxHQUlBN2lGLEVBQUF1ZCxpQkE5Q0xWLEVBQUEsSUFBQVUsZ0JBQ0FXLE1BQUFDLFVBQUEsU0FBQU4sR0FFQTZrRSxFQURBN2tFLEVBQUF0TixPQUlBMnhFLEVBQUEsU0FBQXBELEdBQ0FqaUUsRUFBQW9CLE1BQUFHLFlBQUEwZ0UsS0EyQ0swRCxHQUFBLHVCQUFBQSxFQUFBbnBFLGNBQUEsV0F0Q0wyRCxFQUFBd2xFLEVBQUFocEUsZ0JBQ0Ewb0UsRUFBQSxTQUFBcEQsR0FHQSxJQUFBZ0UsRUFBQU4sRUFBQW5wRSxjQUFBLFVBQ0F5cEUsRUFBQUMsbUJBQUEsV0FDQUwsRUFBQTVELEdBQ0FnRSxFQUFBQyxtQkFBQSxLQUNBL2xFLEVBQUF1QixZQUFBdWtFLEdBQ0FBLEVBQUEsTUFFQTlsRSxFQUFBN0osWUFBQTJ2RSxLQUtBWixFQUFBLFNBQUFwRCxHQUNBdGdFLFdBQUFra0UsRUFBQSxFQUFBNUQsS0FsREFxRCxFQUFBLGdCQUFBdGdGLEtBQUEwUSxTQUFBLElBQ0E2dkUsRUFBQSxTQUFBdmtFLEdBQ0FBLEVBQUF0ZCxTQUFBUCxHQUNBLGlCQUFBNmQsRUFBQXROLE1BQ0EsSUFBQXNOLEVBQUF0TixLQUFBeEMsUUFBQW8wRSxJQUNBTyxHQUFBN2tFLEVBQUF0TixLQUFBdEosTUFBQWs3RSxFQUFBdjlFLFVBSUE1RSxFQUFBcWUsaUJBQ0FyZSxFQUFBcWUsaUJBQUEsVUFBQStqRSxHQUFBLEdBRUFwaUYsRUFBQWdqRixZQUFBLFlBQUFaLEdBR0FGLEVBQUEsU0FBQXBELEdBQ0E5K0UsRUFBQW9lLFlBQUErakUsRUFBQXJELEVBQUEsT0FnRUEyRCxFQUFBcmxFLGFBMUtBLFNBQUE2dkIsR0FFQSxtQkFBQUEsSUFDQUEsRUFBQSxJQUFBenJDLFNBQUEsR0FBQXlyQyxJQUlBLElBREEsSUFBQW52QixFQUFBLElBQUFoVixNQUFBL0IsVUFBQW5DLE9BQUEsR0FDQTVHLEVBQUEsRUFBcUJBLEVBQUE4ZixFQUFBbFosT0FBaUI1RyxJQUN0QzhmLEVBQUE5ZixHQUFBK0ksVUFBQS9JLEVBQUEsR0FHQSxJQUFBZ3JCLEVBQUEsQ0FBa0Jpa0IsV0FBQW52QixRQUdsQixPQUZBd2tFLEVBQUFELEdBQUFyNUQsRUFDQWs1RCxFQUFBRyxHQUNBQSxLQTZKQUksRUFBQW5sRSxpQkExSkEsU0FBQUEsRUFBQXdoRSxVQUNBd0QsRUFBQXhELEdBeUJBLFNBQUE0RCxFQUFBNUQsR0FHQSxHQUFBeUQsRUFHQS9qRSxXQUFBa2tFLEVBQUEsRUFBQTVELE9BQ1MsQ0FDVCxJQUFBOTFELEVBQUFzNUQsRUFBQXhELEdBQ0EsR0FBQTkxRCxFQUFBLENBQ0F1NUQsR0FBQSxFQUNBLEtBakNBLFNBQUF2NUQsR0FDQSxJQUFBaWtCLEVBQUFqa0IsRUFBQWlrQixTQUNBbnZCLEVBQUFrTCxFQUFBbEwsS0FDQSxPQUFBQSxFQUFBbFosUUFDQSxPQUNBcW9DLElBQ0EsTUFDQSxPQUNBQSxFQUFBbnZCLEVBQUEsSUFDQSxNQUNBLE9BQ0FtdkIsRUFBQW52QixFQUFBLEdBQUFBLEVBQUEsSUFDQSxNQUNBLE9BQ0FtdkIsRUFBQW52QixFQUFBLEdBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBLE1BQ0EsUUFDQW12QixFQUFBbm1DLE1BQUF2RixFQUFBdWMsSUFpQkFILENBQUFxTCxHQUNpQixRQUNqQjFMLEVBQUF3aEUsR0FDQXlELEdBQUEsTUF2RUEsQ0F5TEMsb0JBQUF6Z0YsVUFBQSxJQUFBOUIsRUFBQStELEtBQUEvRCxFQUFBOEIsK0NDeExELElBT0FtaEYsRUFDQUMsRUFSQWhtRSxFQUFBbmYsRUFBQUQsUUFBQSxHQVVBLFNBQUFxbEYsSUFDQSxVQUFBei9ELE1BQUEsbUNBRUEsU0FBQTAvRCxJQUNBLFVBQUExL0QsTUFBQSxxQ0FzQkEsU0FBQTIvRCxFQUFBQyxHQUNBLEdBQUFMLElBQUF6a0UsV0FFQSxPQUFBQSxXQUFBOGtFLEVBQUEsR0FHQSxJQUFBTCxJQUFBRSxJQUFBRixJQUFBemtFLFdBRUEsT0FEQXlrRSxFQUFBemtFLFdBQ0FBLFdBQUE4a0UsRUFBQSxHQUVBLElBRUEsT0FBQUwsRUFBQUssRUFBQSxHQUNLLE1BQUFyaEYsR0FDTCxJQUVBLE9BQUFnaEYsRUFBQTlrRixLQUFBLEtBQUFtbEYsRUFBQSxHQUNTLE1BQUFyaEYsR0FFVCxPQUFBZ2hGLEVBQUE5a0YsS0FBQTRGLEtBQUF1L0UsRUFBQSxNQXZDQSxXQUNBLElBRUFMLEVBREEsbUJBQUF6a0UsV0FDQUEsV0FFQTJrRSxFQUVLLE1BQUFsaEYsR0FDTGdoRixFQUFBRSxFQUVBLElBRUFELEVBREEsbUJBQUExQixhQUNBQSxhQUVBNEIsRUFFSyxNQUFBbmhGLEdBQ0xpaEYsRUFBQUUsR0FqQkEsR0F3RUEsSUFFQUcsRUFGQTdsRSxFQUFBLEdBQ0E4bEUsR0FBQSxFQUVBQyxHQUFBLEVBRUEsU0FBQUMsSUFDQUYsR0FBQUQsSUFHQUMsR0FBQSxFQUNBRCxFQUFBMytFLE9BQ0E4WSxFQUFBNmxFLEVBQUF0eUUsT0FBQXlNLEdBRUErbEUsR0FBQSxFQUVBL2xFLEVBQUE5WSxRQUNBKytFLEtBSUEsU0FBQUEsSUFDQSxJQUFBSCxFQUFBLENBR0EsSUFBQTUyQyxFQUFBeTJDLEVBQUFLLEdBQ0FGLEdBQUEsRUFHQSxJQURBLElBQUF0MEUsRUFBQXdPLEVBQUE5WSxPQUNBc0ssR0FBQSxDQUdBLElBRkFxMEUsRUFBQTdsRSxFQUNBQSxFQUFBLEtBQ0ErbEUsRUFBQXYwRSxHQUNBcTBFLEdBQ0FBLEVBQUFFLEdBQUE5bEUsTUFHQThsRSxHQUFBLEVBQ0F2MEUsRUFBQXdPLEVBQUE5WSxPQUVBMitFLEVBQUEsS0FDQUMsR0FBQSxFQW5FQSxTQUFBSSxHQUNBLEdBQUFWLElBQUExQixhQUVBLE9BQUFBLGFBQUFvQyxHQUdBLElBQUFWLElBQUFFLElBQUFGLElBQUExQixhQUVBLE9BREEwQixFQUFBMUIsYUFDQUEsYUFBQW9DLEdBRUEsSUFFQVYsRUFBQVUsR0FDSyxNQUFBM2hGLEdBQ0wsSUFFQSxPQUFBaWhGLEVBQUEva0YsS0FBQSxLQUFBeWxGLEdBQ1MsTUFBQTNoRixHQUdULE9BQUFpaEYsRUFBQS9rRixLQUFBNEYsS0FBQTYvRSxLQWdEQUMsQ0FBQWozQyxJQWlCQSxTQUFBazNDLEVBQUFSLEVBQUFTLEdBQ0FoZ0YsS0FBQXUvRSxNQUNBdi9FLEtBQUFnZ0YsUUFZQSxTQUFBOS9ELEtBNUJBL0csRUFBQWEsU0FBQSxTQUFBdWxFLEdBQ0EsSUFBQXhsRSxFQUFBLElBQUFoVixNQUFBL0IsVUFBQW5DLE9BQUEsR0FDQSxHQUFBbUMsVUFBQW5DLE9BQUEsRUFDQSxRQUFBNUcsRUFBQSxFQUF1QkEsRUFBQStJLFVBQUFuQyxPQUFzQjVHLElBQzdDOGYsRUFBQTlmLEVBQUEsR0FBQStJLFVBQUEvSSxHQUdBMGYsRUFBQS9XLEtBQUEsSUFBQW05RSxFQUFBUixFQUFBeGxFLElBQ0EsSUFBQUosRUFBQTlZLFFBQUE0K0UsR0FDQUgsRUFBQU0sSUFTQUcsRUFBQWxrRixVQUFBK2QsSUFBQSxXQUNBNVosS0FBQXUvRSxJQUFBeDhFLE1BQUEsS0FBQS9DLEtBQUFnZ0YsUUFFQTdtRSxFQUFBOG1FLE1BQUEsVUFDQTltRSxFQUFBK21FLFNBQUEsRUFDQS9tRSxFQUFBa1gsSUFBQSxHQUNBbFgsRUFBQWduRSxLQUFBLEdBQ0FobkUsRUFBQWhhLFFBQUEsR0FDQWdhLEVBQUFtTSxTQUFBLEdBSUFuTSxFQUFBK2tCLEdBQUFoZSxFQUNBL0csRUFBQWluRSxZQUFBbGdFLEVBQ0EvRyxFQUFBc1UsS0FBQXZOLEVBQ0EvRyxFQUFBa25FLElBQUFuZ0UsRUFDQS9HLEVBQUFtbkUsZUFBQXBnRSxFQUNBL0csRUFBQW9uRSxtQkFBQXJnRSxFQUNBL0csRUFBQXNPLEtBQUF2SCxFQUNBL0csRUFBQXFuRSxnQkFBQXRnRSxFQUNBL0csRUFBQXNuRSxvQkFBQXZnRSxFQUVBL0csRUFBQW1yQixVQUFBLFNBQUE5cEMsR0FBcUMsVUFFckMyZSxFQUFBcXpDLFFBQUEsU0FBQWh5RCxHQUNBLFVBQUFtbEIsTUFBQSxxQ0FHQXhHLEVBQUF1bkUsSUFBQSxXQUEyQixXQUMzQnZuRSxFQUFBd25FLE1BQUEsU0FBQTluQyxHQUNBLFVBQUFsNUIsTUFBQSxtQ0FFQXhHLEVBQUF5bkUsTUFBQSxXQUE0QiwyQkNwTDVCLElBQUEzckUsRUFBY3BiLEVBQVEsS0FDdEIsaUJBQUFvYixNQUFBLEVBQTRDamIsRUFBQUMsRUFBU2diLEVBQUEsTUFDckRBLEVBQUFDLFNBQUFsYixFQUFBRCxRQUFBa2IsRUFBQUMsU0FHQUMsRUFEVXRiLEVBQVEsSUFBMER1YixTQUM1RSxXQUFBSCxHQUFBLHdCQ1JBbGIsRUFBQUMsRUFBQUQsUUFBMkJGLEVBQVEsR0FBUkEsRUFBd0QsSUFFbkYrSSxLQUFBLENBQWM1SSxFQUFBQyxFQUFTLDRFQUE0RSxLQUduR0YsRUFBQTZJLEtBQUEsQ0FBYzVJLEVBQUFDLEVBQVMseVlBQXVZLElBQVNrRixRQUFBLEVBQUF1ZixRQUFBLDhFQUFBNkQsTUFBQSxHQUFBMDZELFNBQUEsMk5BQWtVdHJELEtBQUEsWUFBQXVyRCxlQUFBLDBkQUE0Z0J2K0QsV0FBQSxpRUNMcnZDcWUsRUFBQSxXQUNBLElBQUE2akQsRUFBQTdnRixLQUNBaW5CLEVBQUE0NUQsRUFBQXovQyxlQUNBN2EsRUFBQXM2RCxFQUFBanZDLE1BQUFyckIsSUFBQVUsRUFDQSxPQUFBVixFQUNBLE9BQ0EsQ0FDQTJYLEdBQUEsQ0FDQTRpRCxPQUFBLFNBQUF6K0MsR0FDQUEsRUFBQTArQyxpQkFDQUYsRUFBQXQxQyxNQUFBLGFBQUFzMUMsRUFBQUcsVUFBQUgsRUFBQUksVUFJQSxDQUNBMTZELEVBQUEsU0FDQXVSLFdBQUEsQ0FDQSxDQUNBdDlCLEtBQUEsUUFDQW8vQyxRQUFBLFVBQ0ExK0MsTUFBQTJsRixFQUFBSSxLQUNBM3pDLFdBQUEsU0FHQXpOLE1BQUEsQ0FBZ0J0akMsS0FBQSxTQUFBMHhELFlBQUEsd0JBQ2hCOXJCLFNBQUEsQ0FBbUJqbkMsTUFBQTJsRixFQUFBSSxNQUNuQi9pRCxHQUFBLENBQ0FnakQsTUFBQSxTQUFBNytDLEdBQ0FBLEVBQUEva0MsT0FBQTZpRCxZQUdBMGdDLEVBQUFJLEtBQUE1K0MsRUFBQS9rQyxPQUFBcEMsV0FJQTJsRixFQUFBcjZELEdBQUEsS0FDQUQsRUFBQSxTQUFtQnNaLE1BQUEsQ0FBU3RqQyxLQUFBLFNBQUFyQixNQUFBLHNVQUs1QjhoQyxFQUFBQyxlQUFBLEVDakNBLElDUnlNa2tELEVEUXpNLENBQ0FqcUQsTUFBQSxDQUNBa3FELE1BQUFyaEYsT0FDQXNoRixjQUFBcC9ELFNBRUF6VixLQUxBLFdBTUEsT0FDQXkwRSxLQUFBLEtBR0FodEUsUUFBQSxDQUNBcXRFLGFBREEsZUFBQUMsRUFBQUMsRUFBQTVJLG1CQUFBMTlDLEtBQUEsU0FBQXVtRCxFQUNBQyxHQURBLElBQUFDLEVBQUFDLEVBQUEsT0FBQWhKLG1CQUFBaFMsS0FBQSxTQUFBaWIsR0FBQSxjQUFBQSxFQUFBcDRELEtBQUFvNEQsRUFBQTU0RSxNQUFBLGNBQUE0NEUsRUFBQXA0RCxLQUFBLEVBQUFvNEQsRUFBQTU0RSxLQUFBLEVBR0E2NEUsTUFBQSxxREFBQTUwRSxPQUNBdzBFLEVBREEsd0JBQUF4MEUsT0FFQWxOLEtBQUFvaEYsUUFMQSxjQUdBTyxFQUhBRSxFQUFBeEgsS0FBQXdILEVBQUE1NEUsS0FBQSxFQVFBMDRFLEVBQUFJLE9BUkEsY0FRQUgsRUFSQUMsRUFBQXhILEtBQUF3SCxFQUFBckcsT0FBQSxTQVNBb0csR0FUQSxRQUFBQyxFQUFBcDRELEtBQUEsR0FBQW80RCxFQUFBRyxHQUFBSCxFQUFBLFNBV0FJLE1BQUEsNkJBQUEvMEUsT0FBQTIwRSxFQUFBRyxHQUFBcGxCLEtBQUEsTUFBQTF2RCxPQUFBMjBFLEVBQUFHLEdBQUFwb0QsVUFYQSx5QkFBQWlvRCxFQUFBbmpCLFNBQUEraUIsRUFBQXpoRixLQUFBLDZCQUFBa2lGLEdBQUEsT0FBQVgsRUFBQXgrRSxNQUFBL0MsS0FBQWdELFlBQUEsR0FlQW0vRSxlQWZBLFNBZUFQLEdBZ0JBLE1BZkEsQ0FDQVgsS0FBQVcsRUFBQXBuRixLQUNBNG5GLFFBQUFSLEVBQUFTLElBQUFELFFBQ0FFLFNBQUFWLEVBQUFXLEtBQUFELFNBQ0FFLFNBQUFaLEVBQUFXLEtBQUFDLFNBQ0FDLEtBQUEza0YsS0FBQXFELE1BQUF5Z0YsRUFBQVcsS0FBQUUsTUFDQUMsUUFBQSxDQUNBQyxZQUFBZixFQUFBYyxRQUFBLEdBQUFDLFlBQ0FKLEtBQUFYLEVBQUFjLFFBQUEsR0FBQUgsTUFFQUssS0FBQSxDQUNBQyxVQUFBakIsRUFBQWdCLEtBQUFFLElBQ0FDLE1BQUFuQixFQUFBZ0IsS0FBQUcsU0FNQS9CLFVBbENBLGVBQUFnQyxFQUFBeEIsRUFBQTVJLG1CQUFBMTlDLEtBQUEsU0FBQStuRCxFQWtDQXZCLEdBbENBLElBQUFFLEVBQUEsT0FBQWhKLG1CQUFBaFMsS0FBQSxTQUFBc2MsR0FBQSxjQUFBQSxFQUFBejVELEtBQUF5NUQsRUFBQWo2RSxNQUFBLGNBbUNBakosS0FBQXVyQyxNQUFBLGtCQW5DQTIzQyxFQUFBejVELEtBQUEsRUFBQXk1RCxFQUFBajZFLEtBQUEsRUFxQ0FqSixLQUFBc2hGLGFBQUFJLEdBckNBLGNBcUNBRSxFQXJDQXNCLEVBQUE3SSxLQUFBNkksRUFBQTFILE9BQUEsU0FzQ0F4N0UsS0FBQW1pRixlQUFBUCxJQXRDQSxPQUFBc0IsRUFBQXo1RCxLQUFBLEVBQUF5NUQsRUFBQWxCLEdBQUFrQixFQUFBLFNBd0NBakIsTUFBQSxnQ0FBQS8wRSxPQUFBZzJFLEVBQUFsQixHQUFBcGxCLEtBQUEsTUFBQTF2RCxPQUFBZzJFLEVBQUFsQixHQUFBcG9ELFVBeENBLGVBQUFzcEQsRUFBQXo1RCxLQUFBLEdBMENBenBCLEtBQUFpaEYsS0FBQSxHQUNBamhGLEtBQUF1ckMsTUFBQSxrQkEzQ0EyM0MsRUFBQXRILE9BQUEsNkJBQUFzSCxFQUFBeGtCLFNBQUF1a0IsRUFBQWpqRixLQUFBLGtDQUFBbWpGLEdBQUEsT0FBQUgsRUFBQWpnRixNQUFBL0MsS0FBQWdELFlBQUEsWUVaZSxTQUFBb2dGLEVBQ2ZDLEVBQ0FybUQsRUFDQTBGLEVBQ0E0Z0QsRUFDQUMsRUFDQXhyQyxFQUNBeXJDLEVBQ0FDLEdBR0EsSUFxQkF6c0QsRUFyQkE3VyxFQUFBLG1CQUFBa2pFLEVBQ0FBLEVBQUFsakUsUUFDQWtqRSxFQWlEQSxHQTlDQXJtRCxJQUNBN2MsRUFBQTZjLFNBQ0E3YyxFQUFBdWlCLGtCQUNBdmlCLEVBQUFpa0IsV0FBQSxHQUlBay9DLElBQ0FuakUsRUFBQW1wQixZQUFBLEdBSUF5TyxJQUNBNTNCLEVBQUFza0IsU0FBQSxVQUFBc1QsR0FJQXlyQyxHQUNBeHNELEVBQUEsU0FBQWhFLElBRUFBLEVBQ0FBLEdBQ0FoekIsS0FBQXFtQyxRQUFBcm1DLEtBQUFxbUMsT0FBQWdQLFlBQ0FyMUMsS0FBQXV6QixRQUFBdnpCLEtBQUF1ekIsT0FBQThTLFFBQUFybUMsS0FBQXV6QixPQUFBOFMsT0FBQWdQLGFBRUEsb0JBQUFxdUMsc0JBQ0Exd0QsRUFBQTB3RCxxQkFHQUgsR0FDQUEsRUFBQW5wRixLQUFBNEYsS0FBQWd6QixHQUdBQSxLQUFBMndELHVCQUNBM3dELEVBQUEyd0Qsc0JBQUF4dUUsSUFBQXF1RSxJQUtBcmpFLEVBQUF5akUsYUFBQTVzRCxHQUNHdXNELElBQ0h2c0QsRUFBQXlzRCxFQUNBLFdBQXFCRixFQUFBbnBGLEtBQUE0RixVQUFBc3hCLE1BQUFHLFNBQUFveUQsYUFDckJOLEdBR0F2c0QsRUFDQSxHQUFBN1csRUFBQW1wQixXQUFBLENBR0FucEIsRUFBQTJqRSxjQUFBOXNELEVBRUEsSUFBQStzRCxFQUFBNWpFLEVBQUE2YyxPQUNBN2MsRUFBQTZjLE9BQUEsU0FBQWt4QixFQUFBbDdCLEdBRUEsT0FEQWdFLEVBQUE1OEIsS0FBQTQ0QixHQUNBK3dELEVBQUE3MUIsRUFBQWw3QixRQUVLLENBRUwsSUFBQThQLEVBQUEzaUIsRUFBQTZqRSxhQUNBN2pFLEVBQUE2akUsYUFBQWxoRCxFQUNBLEdBQUE1MUIsT0FBQTQxQixFQUFBOUwsR0FDQSxDQUFBQSxHQUlBLE9BQ0FqOUIsUUFBQXNwRixFQUNBbGpFLFdDbEZBLElBQUF3b0IsRUFBZ0J5NkMsRUFDZGpDLEVBQ0Fua0QsRUo4QkYsSUk1QkEsRUFDQSxLQUNBLEtBQ0EsTUF1QkEyTCxFQUFBeG9CLFFBQUF5UixPQUFBLHlDQUNlLElBQUFxeUQsRUFBQXQ3QyxVQ3ZDWHU3QyxFQUFNLFdBQ1YsSUFBQXJELEVBQUE3Z0YsS0FDQWluQixFQUFBNDVELEVBQUF6L0MsZUFDQTdhLEVBQUFzNkQsRUFBQWp2QyxNQUFBcnJCLElBQUFVLEVBQ0EsT0FBQVYsRUFBQSxPQUFvQnNaLE1BQUEsQ0FBU2x5QixHQUFBLFdBQWlCLENBQzlDa3pFLEVBQUEzNEMsUUFDQTNoQixFQUFBLE9BQUFBLEVBQUEsTUFBQXM2RCxFQUFBcjZELEdBQUEsa0JBQ0FxNkQsRUFBQXNELFFBQUF0RCxFQUFBbG1ELE1BQ0FwVSxFQUFBLE9BQUFBLEVBQUEsTUFBQXM2RCxFQUFBcjZELEdBQUEsdUJBQ0FELEVBQUEsT0FDQUEsRUFBQSxNQUFBczZELEVBQUFyNkQsR0FBQXE2RCxFQUFBbjZELEdBQUFtNkQsRUFBQVosVUFDQVksRUFBQXI2RCxHQUFBLEtBQ0FELEVBQUEsUUFDQUEsRUFBQSxPQUF1QnNaLE1BQUEsQ0FBU2x5QixHQUFBLFNBQWUsQ0FDL0NrekUsRUFBQXI2RCxHQUFBcTZELEVBQUFuNkQsR0FBQW02RCxFQUFBbG1ELEtBQUE4bkQsTUFBQSxPQUVBNUIsRUFBQXI2RCxHQUFBLEtBQ0FELEVBQUEsT0FBdUJzWixNQUFBLENBQVNseUIsR0FBQSxZQUFrQixDQUNsRDRZLEVBQUEsS0FBdUJzWixNQUFBLENBQVNseUIsR0FBQSxpQkFBdUIsQ0FDdkRrekUsRUFBQXI2RCxHQUFBcTZELEVBQUFuNkQsR0FBQW02RCxFQUFBbG1ELEtBQUErbkQsUUFBQUgsU0FFQTFCLEVBQUFyNkQsR0FBQSxLQUNBRCxFQUFBLEtBQXVCc1osTUFBQSxDQUFTbHlCLEdBQUEsd0JBQThCLENBQzlEa3pFLEVBQUFyNkQsR0FBQXE2RCxFQUFBbjZELEdBQUFtNkQsRUFBQWxtRCxLQUFBK25ELFFBQUFDLG9CQUlBOUIsRUFBQXI2RCxHQUFBLEtBQ0FELEVBQUEsV0FBeUI0dkIsWUFBQSxhQUEyQixDQUNwRDV2QixFQUFBLE9BQXVCNHZCLFlBQUEsUUFBc0IsQ0FDN0M1dkIsRUFBQSxNQUF3QjR2QixZQUFBLGNBQTRCLENBQUEwcUMsRUFBQXI2RCxHQUFBLGVBQ3BEcTZELEVBQUFyNkQsR0FBQSxLQUNBRCxFQUFBLEtBQUFzNkQsRUFBQXI2RCxHQUFBcTZELEVBQUFuNkQsR0FBQW02RCxFQUFBbG1ELEtBQUEybkQsVUFBQSxTQUVBekIsRUFBQXI2RCxHQUFBLEtBQ0FELEVBQUEsT0FBdUI0dkIsWUFBQSxRQUFzQixDQUM3QzV2QixFQUFBLE1BQXdCNHZCLFlBQUEsY0FBNEIsQ0FBQTBxQyxFQUFBcjZELEdBQUEsZUFDcERxNkQsRUFBQXI2RCxHQUFBLEtBQ0FELEVBQUEsS0FBQXM2RCxFQUFBcjZELEdBQUFxNkQsRUFBQW42RCxHQUFBbTZELEVBQUFsbUQsS0FBQTZuRCxVQUFBLFlBRUEzQixFQUFBcjZELEdBQUEsS0FDQUQsRUFBQSxPQUF1QjR2QixZQUFBLFFBQXNCLENBQzdDNXZCLEVBQUEsTUFBd0I0dkIsWUFBQSxjQUE0QixDQUFBMHFDLEVBQUFyNkQsR0FBQSxXQUNwRHE2RCxFQUFBcjZELEdBQUEsS0FDQUQsRUFBQSxLQUFBczZELEVBQUFyNkQsR0FBQXE2RCxFQUFBbjZELEdBQUFtNkQsRUFBQWxtRCxLQUFBaW9ELEtBQUFHLE9BQUEsbUJBT0FtQixFQUFNam5ELGVBQUEsRUNmTixJQ3BDb01tbkQsRURvQ3BNLENBQ0FsdEQsTUFBQSxDQUNBeUQsS0FBQWhnQyxPQUNBdXRDLFFBQUFqbUIsU0FFQWhPLFFBQUEsQ0FDQWt3RSxRQURBLFNBQ0FuakUsR0FDQSxRQUFBeGxCLEtBQUF3bEIsRUFDQSxHQUFBQSxFQUFBbGxCLGVBQUFOLEdBQUEsU0FFQSxXQUdBNDdCLFNBQUEsQ0FDQTZvRCxNQUFBLFdBQ0EsU0FBQS95RSxPQUFBbE4sS0FBQTI2QixLQUFBc21ELEtBQUEsTUFBQS96RSxPQUFBbE4sS0FBQTI2QixLQUFBeW5ELFVBRUFRLEtBQUEsV0FDQSxTQUFBMTFFLE9BQUFsTixLQUFBMjZCLEtBQUFpb0QsS0FBQUcsTUFBQSxXQUFBNzFFLE9BQUFsTixLQUFBMjZCLEtBQUFpb0QsS0FBQUMsVUFBQSxRRTlDSXdCLFVBQVlqQixFQUNkZ0IsRUFDQUYsRUh3Q2lCLElHdENuQixFQUNBLEtBQ0EsS0FDQSxPQXVCQUcsRUFBU2xrRSxRQUFBeVIsT0FBQSxvQ0FDTSxJQUFBMHlELEVBQUFELG1JQ25DSSxJQUFJbDBDLElBQUksQ0FDekJsL0IsR0FBSSxPQUNKdW1CLFdBQVksQ0FDVitzRCxhQUNBRCxVQUVGOTNFLEtBQU0sQ0FDSjgzRSxPQUFRLEdBQ1JqRCxlQUFlLEVBQ2ZELE1BQU8sb0NBRVRudEUsUUFBUyxDQUNEdXdFLFdBREMsaUJBQUFDLEtBQUE3TCxtQkFBQTE5QyxLQUFBLFNBQUF1bUQsRUFDVWlELEdBRFYsT0FBQTlMLG1CQUFBaFMsS0FBQSxTQUFBaWIsR0FBQSxjQUFBQSxFQUFBcDRELEtBQUFvNEQsRUFBQTU0RSxNQUFBLGNBQUE0NEUsRUFBQTU0RSxLQUFBLEVBRWV5N0UsRUFGZixPQUVMMWtGLEtBQUtza0YsT0FGQXpDLEVBQUF4SCxLQUFBLHdCQUFBd0gsRUFBQW5qQixTQUFBK2lCLEVBQUF6aEYscUxBQUEsZ0JBQUFraUYsR0FBQSxPQUFBdUMsRUFBQTFoRixNQUFBL0MsS0FBQWdELFlBQUEsR0FLUDJoRixnQkFMTyxXQU1MM2tGLEtBQUtxaEYsZUFBaUJyaEYsS0FBS3FoRiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEyMSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi41JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3NlYXJjaC1mb3JtLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiYTgzZGFmZmNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWFyY2gtZm9ybS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWFyY2gtZm9ybS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3JlcG9ydC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjIxNmZiYTgwXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVwb3J0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3JlcG9ydC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xuXG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXG4vLyB3aGljaCBsb2FkcyB0aGlzIGZpbGUgYmVmb3JlIHBhdGNoaW5nIHRoZSBtZXRob2QuXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcblxudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcblxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS8sXG4gICAgICByZTIgPSAvYiovZztcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMVtMQVNUX0lOREVYXSAhPT0gMCB8fCByZTJbTEFTVF9JTkRFWF0gIT09IDA7XG59KSgpO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRDtcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHIpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChyZSwgc3RyKTtcblxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlW0xBU1RfSU5ERVhdID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gJ0BtZWRpYSAnICsgaXRlbVsyXSArICd7JyArIGNvbnRlbnQgKyAnfSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tpXTsgLy8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuICAgICAgLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcbiAgICAgIC8vIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cbiAgICAgIC8vIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblxuICAgICAgaWYgKGl0ZW1bMF0gPT0gbnVsbCB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBpZiAobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2UgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgICBpdGVtWzJdID0gJygnICsgaXRlbVsyXSArICcpIGFuZCAoJyArIG1lZGlhUXVlcnkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLyc7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG4gIHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59IiwiLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBsaXN0IGZvcm1hdCBwcm9kdWNlZCBieSBjc3MtbG9hZGVyIGludG8gc29tZXRoaW5nXG4gKiBlYXNpZXIgdG8gbWFuaXB1bGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cbiIsIi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiAgTW9kaWZpZWQgYnkgRXZhbiBZb3UgQHl5eDk5MDgwM1xuKi9cblxuaW1wb3J0IGxpc3RUb1N0eWxlcyBmcm9tICcuL2xpc3RUb1N0eWxlcydcblxudmFyIGhhc0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG5pZiAodHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBERUJVRykge1xuICBpZiAoIWhhc0RvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuICcgK1xuICAgIFwiVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIlxuICApIH1cbn1cblxuLypcbnR5cGUgU3R5bGVPYmplY3QgPSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcnRzOiBBcnJheTxTdHlsZU9iamVjdFBhcnQ+XG59XG5cbnR5cGUgU3R5bGVPYmplY3RQYXJ0ID0ge1xuICBjc3M6IHN0cmluZztcbiAgbWVkaWE6IHN0cmluZztcbiAgc291cmNlTWFwOiA/c3RyaW5nXG59XG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7LypcbiAgW2lkOiBudW1iZXJdOiB7XG4gICAgaWQ6IG51bWJlcixcbiAgICByZWZzOiBudW1iZXIsXG4gICAgcGFydHM6IEFycmF5PChvYmo/OiBTdHlsZU9iamVjdFBhcnQpID0+IHZvaWQ+XG4gIH1cbiovfVxuXG52YXIgaGVhZCA9IGhhc0RvY3VtZW50ICYmIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pXG52YXIgc2luZ2xldG9uRWxlbWVudCA9IG51bGxcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMFxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgb3B0aW9ucyA9IG51bGxcbnZhciBzc3JJZEtleSA9ICdkYXRhLXZ1ZS1zc3ItaWQnXG5cbi8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFN0eWxlc0NsaWVudCAocGFyZW50SWQsIGxpc3QsIF9pc1Byb2R1Y3Rpb24sIF9vcHRpb25zKSB7XG4gIGlzUHJvZHVjdGlvbiA9IF9pc1Byb2R1Y3Rpb25cblxuICBvcHRpb25zID0gX29wdGlvbnMgfHwge31cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBsaXN0KVxuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICAgIGRvbVN0eWxlLnJlZnMtLVxuICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpXG4gICAgfVxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIG5ld0xpc3QpXG4gICAgICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyA9IFtdXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV1cbiAgICAgIGlmIChkb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXSgpXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzIC8qIEFycmF5PFN0eWxlT2JqZWN0PiAqLykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrK1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKVxuICAgICAgfVxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBpZiAoZG9tU3R5bGUucGFydHMubGVuZ3RoID4gaXRlbS5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMubGVuZ3RoID0gaXRlbS5wYXJ0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW11cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7IGlkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHMgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKCkge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZUVsZW1lbnQudHlwZSA9ICd0ZXh0L2NzcydcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG4gIHJldHVybiBzdHlsZUVsZW1lbnRcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgdmFyIHVwZGF0ZSwgcmVtb3ZlXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVsnICsgc3NySWRLZXkgKyAnfj1cIicgKyBvYmouaWQgKyAnXCJdJylcblxuICBpZiAoc3R5bGVFbGVtZW50KSB7XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYW5kIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAgICAgIC8vIHNpbXBseSBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG5vb3BcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYnV0IGluIGRldiBtb2RlLlxuICAgICAgLy8gZm9yIHNvbWUgcmVhc29uIENocm9tZSBjYW4ndCBoYW5kbGUgc291cmNlIG1hcCBpbiBzZXJ2ZXItcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlIHRhZ3MgLSBzb3VyY2UgbWFwcyBpbiA8c3R5bGU+IG9ubHkgd29ya3MgaWYgdGhlIHN0eWxlIHRhZyBpc1xuICAgICAgLy8gY3JlYXRlZCBhbmQgaW5zZXJ0ZWQgZHluYW1pY2FsbHkuIFNvIHdlIHJlbW92ZSB0aGUgc2VydmVyIHJlbmRlcmVkXG4gICAgICAvLyBzdHlsZXMgYW5kIGluamVjdCBuZXcgb25lcy5cbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICBpZiAoaXNPbGRJRSkge1xuICAgIC8vIHVzZSBzaW5nbGV0b24gbW9kZSBmb3IgSUU5LlxuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrXG4gICAgc3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKVxuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpXG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG11bHRpLXN0eWxlLXRhZyBtb2RlIGluIGFsbCBvdGhlciBjYXNlc1xuICAgIHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpXG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudClcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKG9iailcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuICAgICAgICAgIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG4gICAgICAgICAgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpXG4gICAgfVxuICB9XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJylcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzXG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpXG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2Rlc1xuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlRWxlbWVudCwgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzXG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcFxuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpXG4gIH1cbiAgaWYgKG9wdGlvbnMuc3NySWQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKHNzcklkS2V5LCBvYmouaWQpXG4gIH1cblxuICBpZiAoc291cmNlTWFwKSB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL2phdmFzY3JpcHQtZGVidWdnaW5nXG4gICAgLy8gdGhpcyBtYWtlcyBzb3VyY2UgbWFwcyBpbnNpZGUgc3R5bGUgdGFncyB3b3JrIHByb3Blcmx5IGluIENocm9tZVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZVVSTD0nICsgc291cmNlTWFwLnNvdXJjZXNbMF0gKyAnICovJ1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCcgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgJyAqLydcbiAgfVxuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZClcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xuICBpZiAoIShsZW4gaW4gZmFjdG9yaWVzKSkge1xuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdDtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDtcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07XG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW5kZXhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLyohXG4gKiBWdWUuanMgdjIuNi43XG4gKiAoYykgMjAxNC0yMDE5IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuVnVlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyogICovXG5cbiAgdmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbiAgLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4gIC8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG4gIGZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gICAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG4gIH1cblxuICBmdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICAgIHJldHVybiB2ID09PSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICAgIHJldHVybiAoXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICAgKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gICAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAgICovXG4gIGZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICAgKi9cbiAgdmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbiAgZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG4gIH1cblxuICAvKipcbiAgICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICAgKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gIH1cblxuICBmdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICAgIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG4gIH1cblxuICBmdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICAgIHJldHVybiAoXG4gICAgICBpc0RlZih2YWwpICYmXG4gICAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gICAqL1xuICBmdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgICA/ICcnXG4gICAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgICAgOiBTdHJpbmcodmFsKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICAgKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG4gIH1cblxuICAvKipcbiAgICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gICAqIGlzIGluIHRoYXQgbWFwLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFrZU1hcCAoXG4gICAgc3RyLFxuICAgIGV4cGVjdHNMb3dlckNhc2VcbiAgKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAgICovXG4gIHZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gICAqL1xuICB2YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICAgKi9cbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gICAqL1xuICB2YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbiAgdmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gICAqL1xuICB2YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxuICB9KTtcblxuICAvKipcbiAgICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAgICovXG4gIHZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG4gIHZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAgICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gICAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICAgKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gICAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgKi9cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBmdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICByZXR1cm4gbFxuICAgICAgICA/IGwgPiAxXG4gICAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgICA6IGZuLmNhbGwoY3R4KVxuICAgIH1cblxuICAgIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgICByZXR1cm4gYm91bmRGblxuICB9XG5cbiAgZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICAgIHJldHVybiBmbi5iaW5kKGN0eClcbiAgfVxuXG4gIHZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgICA/IG5hdGl2ZUJpbmRcbiAgICA6IHBvbHlmaWxsQmluZDtcblxuICAvKipcbiAgICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICAgIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0b1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyW2ldKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICAgKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAgICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICAgKi9cbiAgZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuICAvKipcbiAgICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAgICovXG4gIHZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAgICovXG4gIHZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHN0cmluZyBjb250YWluaW5nIHN0YXRpYyBrZXlzIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGtleXMsIG0pIHtcbiAgICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gICAgfSwgW10pLmpvaW4oJywnKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICAgKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gICAqL1xuICBmdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICAgIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gICAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICAgKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICAgKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgICByZXR1cm4gLTFcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxuICB2YXIgQVNTRVRfVFlQRVMgPSBbXG4gICAgJ2NvbXBvbmVudCcsXG4gICAgJ2RpcmVjdGl2ZScsXG4gICAgJ2ZpbHRlcidcbiAgXTtcblxuICB2YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAgICdiZWZvcmVDcmVhdGUnLFxuICAgICdjcmVhdGVkJyxcbiAgICAnYmVmb3JlTW91bnQnLFxuICAgICdtb3VudGVkJyxcbiAgICAnYmVmb3JlVXBkYXRlJyxcbiAgICAndXBkYXRlZCcsXG4gICAgJ2JlZm9yZURlc3Ryb3knLFxuICAgICdkZXN0cm95ZWQnLFxuICAgICdhY3RpdmF0ZWQnLFxuICAgICdkZWFjdGl2YXRlZCcsXG4gICAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAgICdzZXJ2ZXJQcmVmZXRjaCdcbiAgXTtcblxuICAvKiAgKi9cblxuXG5cbiAgdmFyIGNvbmZpZyA9ICh7XG4gICAgLyoqXG4gICAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAgICovXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICAgKi9cbiAgICBzaWxlbnQ6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICAgKi9cbiAgICBwcm9kdWN0aW9uVGlwOiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyxcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAgICovXG4gICAgZGV2dG9vbHM6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgICAqL1xuICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAgICovXG4gICAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAgICovXG4gICAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICAgKi9cbiAgICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICAgKi9cbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICAgKi9cbiAgICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICAgKi9cbiAgICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgICAqL1xuICAgIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgICAqL1xuICAgIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAgICovXG4gICAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAgICovXG4gICAgbXVzdFVzZVByb3A6IG5vLFxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICAgKi9cbiAgICBhc3luYzogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAgICovXG4gICAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1NcbiAgfSk7XG5cbiAgLyogICovXG5cbiAgLyoqXG4gICAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAgICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAgICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICAgKi9cbiAgdmFyIHVuaWNvZGVMZXR0ZXJzID0gJ2EtekEtWlxcdTAwQjdcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDNGLVxcdTIwNDBcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkQnO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAgICovXG4gIGZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICAgIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICAgIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NUZcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYSBwcm9wZXJ0eS5cbiAgICovXG4gIGZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbCxcbiAgICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gICAqL1xuICB2YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgdW5pY29kZUxldHRlcnMgKyBcIi4kX1xcXFxkXVwiKSk7XG4gIGZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICAgIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xuICB2YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuICAvLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG4gIHZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG4gIHZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xuICB2YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgdmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbiAgdmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG4gIHZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcbiAgdmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xuICB2YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xuICB2YXIgaXNDaHJvbWUgPSBVQSAmJiAvY2hyb21lXFwvXFxkKy8udGVzdChVQSkgJiYgIWlzRWRnZTtcbiAgdmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG4gIHZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuICAvLyBGaXJlZm94IGhhcyBhIFwid2F0Y2hcIiBmdW5jdGlvbiBvbiBPYmplY3QucHJvdG90eXBlLi4uXG4gIHZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbiAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvcHRzID0ge307XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG5cbiAgLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4gIC8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG4gIHZhciBfaXNTZXJ2ZXI7XG4gIHZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIF9pc1NlcnZlclxuICB9O1xuXG4gIC8vIGRldGVjdCBkZXZ0b29sc1xuICB2YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbiAgfVxuXG4gIHZhciBoYXNTeW1ib2wgPVxuICAgIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxuICB2YXIgX1NldDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAgIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICAgIF9TZXQgPSBTZXQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICAgIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICAgIH07XG4gICAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgICAgfTtcbiAgICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBTZXQ7XG4gICAgfSgpKTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciB3YXJuID0gbm9vcDtcbiAgdmFyIHRpcCA9IG5vb3A7XG4gIHZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG4gIHZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG4gIHtcbiAgICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICAgKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgICAgfVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgICAgPyB2bS5vcHRpb25zXG4gICAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgICAgOiB2bTtcbiAgICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gKFxuICAgICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICAgIClcbiAgICB9O1xuXG4gICAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICAgIHZhciByZXMgPSAnJztcbiAgICAgIHdoaWxlIChuKSB7XG4gICAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICAgIG4gPj49IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzXG4gICAgfTtcblxuICAgIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgICAuam9pbignXFxuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciB1aWQgPSAwO1xuXG4gIC8qKlxuICAgKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAgICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAgICovXG4gIHZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICAgIHRoaXMuaWQgPSB1aWQrKztcbiAgICB0aGlzLnN1YnMgPSBbXTtcbiAgfTtcblxuICBEZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gICAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbiAgfTtcblxuICBEZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gICAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbiAgfTtcblxuICBEZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICBEZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gICAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICAgIGlmICghY29uZmlnLmFzeW5jKSB7XG4gICAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgICAvLyBvcmRlclxuICAgICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3Vicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbiAgLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4gIC8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuICBEZXAudGFyZ2V0ID0gbnVsbDtcbiAgdmFyIHRhcmdldFN0YWNrID0gW107XG5cbiAgZnVuY3Rpb24gcHVzaFRhcmdldCAodGFyZ2V0KSB7XG4gICAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICAgIERlcC50YXJnZXQgPSB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICAgIHRhcmdldFN0YWNrLnBvcCgpO1xuICAgIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlIChcbiAgICB0YWcsXG4gICAgZGF0YSxcbiAgICBjaGlsZHJlbixcbiAgICB0ZXh0LFxuICAgIGVsbSxcbiAgICBjb250ZXh0LFxuICAgIGNvbXBvbmVudE9wdGlvbnMsXG4gICAgYXN5bmNGYWN0b3J5XG4gICkge1xuICAgIHRoaXMudGFnID0gdGFnO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5lbG0gPSBlbG07XG4gICAgdGhpcy5ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZm5PcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgICB0aGlzLmNvbXBvbmVudE9wdGlvbnMgPSBjb21wb25lbnRPcHRpb25zO1xuICAgIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5yYXcgPSBmYWxzZTtcbiAgICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gICAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICAgIHRoaXMuaXNDb21tZW50ID0gZmFsc2U7XG4gICAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICAgIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gICAgdGhpcy5hc3luY0ZhY3RvcnkgPSBhc3luY0ZhY3Rvcnk7XG4gICAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbiAgfTtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gIC8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gIHZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICBpZiAoIHRleHQgPT09IHZvaWQgMCApIHRleHQgPSAnJztcblxuICAgIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gICAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gICAgcmV0dXJuIG5vZGVcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICAgIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG4gIH1cblxuICAvLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuICAvLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4gIC8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuICAvLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuICBmdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICAgIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgICB2bm9kZS50YWcsXG4gICAgICB2bm9kZS5kYXRhLFxuICAgICAgLy8gIzc5NzVcbiAgICAgIC8vIGNsb25lIGNoaWxkcmVuIGFycmF5IHRvIGF2b2lkIG11dGF0aW5nIG9yaWdpbmFsIGluIGNhc2Ugb2YgY2xvbmluZ1xuICAgICAgLy8gYSBjaGlsZC5cbiAgICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgICB2bm9kZS50ZXh0LFxuICAgICAgdm5vZGUuZWxtLFxuICAgICAgdm5vZGUuY29udGV4dCxcbiAgICAgIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsXG4gICAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgICApO1xuICAgIGNsb25lZC5ucyA9IHZub2RlLm5zO1xuICAgIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICAgIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gICAgY2xvbmVkLmlzQ29tbWVudCA9IHZub2RlLmlzQ29tbWVudDtcbiAgICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICAgIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gICAgY2xvbmVkLmZuU2NvcGVJZCA9IHZub2RlLmZuU2NvcGVJZDtcbiAgICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICAgIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gICAgcmV0dXJuIGNsb25lZFxuICB9XG5cbiAgLypcbiAgICogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoXG4gICAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICAgKi9cblxuICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbiAgdmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbiAgdmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAgICdwdXNoJyxcbiAgICAncG9wJyxcbiAgICAnc2hpZnQnLFxuICAgICd1bnNoaWZ0JyxcbiAgICAnc3BsaWNlJyxcbiAgICAnc29ydCcsXG4gICAgJ3JldmVyc2UnXG4gIF07XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50c1xuICAgKi9cbiAgbWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXG4gICAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICAgIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgdmFyIG9iID0gdGhpcy5fX29iX187XG4gICAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgICBjYXNlICdwdXNoJzpcbiAgICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgICAgLy8gbm90aWZ5IGNoYW5nZVxuICAgICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0pO1xuICB9KTtcblxuICAvKiAgKi9cblxuICB2YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcblxuICAvKipcbiAgICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gICAqIHVwZGF0ZSBjb21wdXRhdGlvbi5cbiAgICovXG4gIHZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuICBmdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcgKHZhbHVlKSB7XG4gICAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICAgKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gICAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XG4gICAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICAgKi9cbiAgdmFyIE9ic2VydmVyID0gZnVuY3Rpb24gT2JzZXJ2ZXIgKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICAgIHRoaXMudm1Db3VudCA9IDA7XG4gICAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBpZiAoaGFzUHJvdG8pIHtcbiAgICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29weUF1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcywgYXJyYXlLZXlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAgICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gICAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICAgKi9cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiB3YWxrIChvYmopIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gICAqL1xuICBPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZUFycmF5ID0gZnVuY3Rpb24gb2JzZXJ2ZUFycmF5IChpdGVtcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaGVscGVyc1xuXG4gIC8qKlxuICAgKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAgICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAgICovXG4gIGZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICAgIHRhcmdldC5fX3Byb3RvX18gPSBzcmM7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xuICB9XG5cbiAgLyoqXG4gICAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gICAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdCB0byBjcmVhdGUgYW4gb2JzZXJ2ZXIgaW5zdGFuY2UgZm9yIGEgdmFsdWUsXG4gICAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gICAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICAgKi9cbiAgZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIG9iO1xuICAgIGlmIChoYXNPd24odmFsdWUsICdfX29iX18nKSAmJiB2YWx1ZS5fX29iX18gaW5zdGFuY2VvZiBPYnNlcnZlcikge1xuICAgICAgb2IgPSB2YWx1ZS5fX29iX187XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHNob3VsZE9ic2VydmUgJiZcbiAgICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgICBPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSAmJlxuICAgICAgIXZhbHVlLl9pc1Z1ZVxuICAgICkge1xuICAgICAgb2IgPSBuZXcgT2JzZXJ2ZXIodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgICAgb2Iudm1Db3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gb2JcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gICAgb2JqLFxuICAgIGtleSxcbiAgICB2YWwsXG4gICAgY3VzdG9tU2V0dGVyLFxuICAgIHNoYWxsb3dcbiAgKSB7XG4gICAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICAgIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xuICAgIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICAgIHZhciBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gICAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdmFsID0gb2JqW2tleV07XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChjaGlsZE9iKSB7XG4gICAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gcmVhY3RpdmVTZXR0ZXIgKG5ld1ZhbCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgICAgaWYgKG5ld1ZhbCA9PT0gdmFsdWUgfHwgKG5ld1ZhbCAhPT0gbmV3VmFsICYmIHZhbHVlICE9PSB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuICAgICAgICBpZiAoY3VzdG9tU2V0dGVyKSB7XG4gICAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gIzc5ODE6IGZvciBhY2Nlc3NvciBwcm9wZXJ0aWVzIHdpdGhvdXQgc2V0dGVyXG4gICAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgICAgc2V0dGVyLmNhbGwob2JqLCBuZXdWYWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgICBkZXAubm90aWZ5KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gICAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAgICogYWxyZWFkeSBleGlzdC5cbiAgICovXG4gIGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICAgIGlmIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KVxuICAgICkge1xuICAgICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgICBpZiAoa2V5IGluIHRhcmdldCAmJiAhKGtleSBpbiBPYmplY3QucHJvdG90eXBlKSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuICAgIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICAgICk7XG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuICAgIGlmICghb2IpIHtcbiAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAgICovXG4gIGZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldClcbiAgICApIHtcbiAgICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCBkZWxldGluZyBwcm9wZXJ0aWVzIG9uIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZGVsZXRlIHRhcmdldFtrZXldO1xuICAgIGlmICghb2IpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gIH1cblxuICAvKipcbiAgICogQ29sbGVjdCBkZXBlbmRlbmNpZXMgb24gYXJyYXkgZWxlbWVudHMgd2hlbiB0aGUgYXJyYXkgaXMgdG91Y2hlZCwgc2luY2VcbiAgICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gICAqL1xuICBmdW5jdGlvbiBkZXBlbmRBcnJheSAodmFsdWUpIHtcbiAgICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBlID0gdmFsdWVbaV07XG4gICAgICBlICYmIGUuX19vYl9fICYmIGUuX19vYl9fLmRlcC5kZXBlbmQoKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qKlxuICAgKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gICAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXG4gICAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICAgKi9cbiAgdmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG5cbiAgLyoqXG4gICAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAgICovXG4gIHtcbiAgICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICAgIGlmICghdm0pIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICAgIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICAgIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgICApIHtcbiAgICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvXG4gIH1cblxuICAvKipcbiAgICogRGF0YVxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gICAgcGFyZW50VmFsLFxuICAgIGNoaWxkVmFsLFxuICAgIHZtXG4gICkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICAgIH1cbiAgICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgICAgfVxuICAgICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gICAgcGFyZW50VmFsLFxuICAgIGNoaWxkVmFsLFxuICAgIHZtXG4gICkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgICAnZGVmaW5pdGlvbnMuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG4gIH07XG5cbiAgLyoqXG4gICAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlSG9vayAoXG4gICAgcGFyZW50VmFsLFxuICAgIGNoaWxkVmFsXG4gICkge1xuICAgIHZhciByZXMgPSBjaGlsZFZhbFxuICAgICAgPyBwYXJlbnRWYWxcbiAgICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICAgIDogW2NoaWxkVmFsXVxuICAgICAgOiBwYXJlbnRWYWw7XG4gICAgcmV0dXJuIHJlc1xuICAgICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgICA6IHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZXMuaW5kZXhPZihob29rc1tpXSkgPT09IC0xKSB7XG4gICAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBBc3NldHNcbiAgICpcbiAgICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICAgKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gICAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICAgIHBhcmVudFZhbCxcbiAgICBjaGlsZFZhbCxcbiAgICB2bSxcbiAgICBrZXlcbiAgKSB7XG4gICAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICAgIGlmIChjaGlsZFZhbCkge1xuICAgICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXNcbiAgICB9XG4gIH1cblxuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBXYXRjaGVycy5cbiAgICpcbiAgICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICAgKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAgICovXG4gIHN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBwYXJlbnRWYWwsXG4gICAgY2hpbGRWYWwsXG4gICAgdm0sXG4gICAga2V5XG4gICkge1xuICAgIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gICAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgcGFyZW50VmFsID0gdW5kZWZpbmVkOyB9XG4gICAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRWYWwpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpIH1cbiAgICB7XG4gICAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgICB2YXIgcmV0ID0ge307XG4gICAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgICAgdmFyIHBhcmVudCA9IHJldFtrZXkkMV07XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgICAgcGFyZW50ID0gW3BhcmVudF07XG4gICAgICB9XG4gICAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICAgID8gcGFyZW50LmNvbmNhdChjaGlsZClcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgICB9XG4gICAgcmV0dXJuIHJldFxuICB9O1xuXG4gIC8qKlxuICAgKiBPdGhlciBvYmplY3QgaGFzaGVzLlxuICAgKi9cbiAgc3RyYXRzLnByb3BzID1cbiAgc3RyYXRzLm1ldGhvZHMgPVxuICBzdHJhdHMuaW5qZWN0ID1cbiAgc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICAgIHBhcmVudFZhbCxcbiAgICBjaGlsZFZhbCxcbiAgICB2bSxcbiAgICBrZXlcbiAgKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICAgIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgICByZXR1cm4gcmV0XG4gIH07XG4gIHN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuICAvKipcbiAgICogRGVmYXVsdCBzdHJhdGVneS5cbiAgICovXG4gIHZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICAgIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkXG4gICAgICA/IHBhcmVudFZhbFxuICAgICAgOiBjaGlsZFZhbFxuICB9O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShrZXkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlQ29tcG9uZW50TmFtZSAobmFtZSkge1xuICAgIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArIHVuaWNvZGVMZXR0ZXJzICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAgICdpZDogJyArIG5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICAgKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICAgKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gICAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHZhciBpLCB2YWwsIG5hbWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgICA/IHZhbFxuICAgICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gICAqL1xuICBmdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gICAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICAgIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gICAqL1xuICBmdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gICAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gICAgaWYgKGRpcnMpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gICAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICAgIHBhcmVudCxcbiAgICBjaGlsZCxcbiAgICB2bVxuICApIHtcbiAgICB7XG4gICAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgICB9XG5cbiAgICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICAgIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICAgIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gICAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gICAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICAgIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBrZXk7XG4gICAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICAgIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlIGFuIGFzc2V0LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAgICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgICBvcHRpb25zLFxuICAgIHR5cGUsXG4gICAgaWQsXG4gICAgd2Fybk1pc3NpbmdcbiAgKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICAgIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICAgIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gICAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICAgIGlmICh3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKiAgKi9cblxuXG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAgICBrZXksXG4gICAgcHJvcE9wdGlvbnMsXG4gICAgcHJvcHNEYXRhLFxuICAgIHZtXG4gICkge1xuICAgIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gICAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gICAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gICAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICAgIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gICAgfVxuICAgIHtcbiAgICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gICAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gICAgaWYgKGlzT2JqZWN0KGRlZikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAgIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICAgIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICAgIH1cbiAgICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAgIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICAgID8gZGVmLmNhbGwodm0pXG4gICAgICA6IGRlZlxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICAgIHByb3AsXG4gICAgbmFtZSxcbiAgICB2YWx1ZSxcbiAgICB2bSxcbiAgICBhYnNlbnRcbiAgKSB7XG4gICAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICAgIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICB0eXBlID0gW3R5cGVdO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgd2FybihcbiAgICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuICBmdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICAgIHZhciB2YWxpZDtcbiAgICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB2YWxpZDogdmFsaWQsXG4gICAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gICAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICAgKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICAgIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTFcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICAgIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICAgIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICAgIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gICAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyBleHBlY3RlZFZhbHVlO1xuICAgIH1cbiAgICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZVxuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICAgIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxuICB9XG5cbiAgZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gICAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNVxuICAgIHB1c2hUYXJnZXQoKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHZtKSB7XG4gICAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgcG9wVGFyZ2V0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcgKFxuICAgIGhhbmRsZXIsXG4gICAgY29udGV4dCxcbiAgICBhcmdzLFxuICAgIHZtLFxuICAgIGluZm9cbiAgKSB7XG4gICAgdmFyIHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XG4gICAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vIGlzc3VlICM5NTExXG4gICAgICAgIC8vIHJlYXNzaWduIHRvIHJlcyB0byBhdm9pZCBjYXRjaCB0cmlnZ2VyaW5nIG11bHRpcGxlIHRpbWVzIHdoZW4gbmVzdGVkIGNhbGxzXG4gICAgICAgIHJlcyA9IHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAgIHtcbiAgICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG4gIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgdmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gICAgcGVuZGluZyA9IGZhbHNlO1xuICAgIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvcGllc1tpXSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbiAgLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbiAgLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbiAgLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4gIC8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuICAvLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbiAgLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuICAvLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3NcbiAgLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4gIC8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbiAgLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG4gIHZhciB0aW1lckZ1bmM7XG5cbiAgLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbiAgLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4gIC8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuICAvLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuICAvLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4gIC8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgICB9O1xuICAgIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xuICB9IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4gICkpIHtcbiAgICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAgIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAgIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgICB2YXIgY291bnRlciA9IDE7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gICAgfTtcbiAgICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gICAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAgIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGNiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2IuY2FsbChjdHgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgICBfcmVzb2x2ZShjdHgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IHRydWU7XG4gICAgICB0aW1lckZ1bmMoKTtcbiAgICB9XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciBtYXJrO1xuICB2YXIgbWVhc3VyZTtcblxuICB7XG4gICAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIHBlcmYgJiZcbiAgICAgIHBlcmYubWFyayAmJlxuICAgICAgcGVyZi5tZWFzdXJlICYmXG4gICAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICAgICkge1xuICAgICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxuICB2YXIgaW5pdFByb3h5O1xuXG4gIHtcbiAgICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICAgJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4sJyArXG4gICAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgICApO1xuXG4gICAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgICB0YXJnZXRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMnICtcbiAgICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgICAgdGFyZ2V0XG4gICAgICApO1xuICAgIH07XG5cbiAgICB2YXIgaGFzUHJveHkgPVxuICAgICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gICAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gICAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gICAqL1xuICBmdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gICAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICAgIHNlZW5PYmplY3RzLmNsZWFyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICAgIHZhciBpLCBrZXlzO1xuICAgIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gICAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh2YWwuX19vYl9fKSB7XG4gICAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBzZWVuLmFkZChkZXBJZCk7XG4gICAgfVxuICAgIGlmIChpc0EpIHtcbiAgICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gICAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgICBuYW1lID0gb25jZSQkMSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICAgIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgb25jZTogb25jZSQkMSxcbiAgICAgIGNhcHR1cmU6IGNhcHR1cmUsXG4gICAgICBwYXNzaXZlOiBwYXNzaXZlXG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgICB2YXIgY2xvbmVkID0gZm5zLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgICByZXR1cm4gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoZm5zLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKVxuICAgICAgfVxuICAgIH1cbiAgICBpbnZva2VyLmZucyA9IGZucztcbiAgICByZXR1cm4gaW52b2tlclxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlTGlzdGVuZXJzIChcbiAgICBvbixcbiAgICBvbGRPbixcbiAgICBhZGQsXG4gICAgcmVtb3ZlJCQxLFxuICAgIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICAgIHZtXG4gICkge1xuICAgIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgICBmb3IgKG5hbWUgaW4gb24pIHtcbiAgICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICAgIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgICB9XG4gICAgdmFyIGludm9rZXI7XG4gICAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gICAgfVxuXG4gICAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICAgIGRlZltob29rS2V5XSA9IGludm9rZXI7XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgICBkYXRhLFxuICAgIEN0b3IsXG4gICAgdGFnXG4gICkge1xuICAgIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAgIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAgIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gICAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICAgIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICAgIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gICAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGlwKFxuICAgICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBmdW5jdGlvbiBjaGVja1Byb3AgKFxuICAgIHJlcyxcbiAgICBoYXNoLFxuICAgIGtleSxcbiAgICBhbHRLZXksXG4gICAgcHJlc2VydmVcbiAgKSB7XG4gICAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuICAvLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuICAvL1xuICAvLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuICAvLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4gIC8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuICAvLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIC8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4gIC8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuICAvLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG4gIGZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlblxuICB9XG5cbiAgLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbiAgLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4gIC8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbiAgLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICAgIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgICAgOiB1bmRlZmluZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gICAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgICAgLy8gIG5lc3RlZFxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gICAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICAgIGlmIChwcm92aWRlKSB7XG4gICAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgICAgOiBwcm92aWRlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICAgIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICB7XG4gICAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgICB2bVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICAgIGlmIChpbmplY3QpIHtcbiAgICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cblxuXG4gIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICAgKi9cbiAgZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0XG4gICkge1xuICAgIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHt9XG4gICAgfVxuICAgIHZhciBzbG90cyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgICB9XG4gICAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICAgICkge1xuICAgICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzbG90c1xuICB9XG5cbiAgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gICAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gICAgc2xvdHMsXG4gICAgbm9ybWFsU2xvdHMsXG4gICAgcHJldlNsb3RzXG4gICkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiB0cnVlO1xuICAgIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICAgIGlmICghc2xvdHMpIHtcbiAgICAgIHJlcyA9IHt9O1xuICAgIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGlzU3RhYmxlICYmXG4gICAgICBwcmV2U2xvdHMgJiZcbiAgICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAgIE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPT09IDBcbiAgICApIHtcbiAgICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgICAgcmV0dXJuIHByZXZTbG90c1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB7fTtcbiAgICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gICAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gICAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gICAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICAgIH1cbiAgICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICAgIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgICAgcmV0dXJuIHJlcyAmJiByZXMubGVuZ3RoID09PSAwXG4gICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgIDogcmVzXG4gICAgfTtcbiAgICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgICBpZiAoZm4ucHJveHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gICAgdmFsLFxuICAgIHJlbmRlclxuICApIHtcbiAgICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKGkgKyAxLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0ID0gW107XG4gICAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICB9XG4gICAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICAgKi9cbiAgZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gICAgbmFtZSxcbiAgICBmYWxsYmFjayxcbiAgICBwcm9wcyxcbiAgICBiaW5kT2JqZWN0XG4gICkge1xuICAgIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgICB2YXIgbm9kZXM7XG4gICAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICAgIGlmICghaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgICAgfVxuICAgICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlcyA9IHRoaXMuJHNsb3RzW25hbWVdIHx8IGZhbGxiYWNrO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZXNcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gICAqL1xuICBmdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICAgIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0KSkge1xuICAgICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBleHBlY3QgIT09IGFjdHVhbFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gICAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICAgKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICovXG4gIGZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICAgIGV2ZW50S2V5Q29kZSxcbiAgICBrZXksXG4gICAgYnVpbHRJbktleUNvZGUsXG4gICAgZXZlbnRLZXlOYW1lLFxuICAgIGJ1aWx0SW5LZXlOYW1lXG4gICkge1xuICAgIHZhciBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gICAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gICAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gICAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgLyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gICAqL1xuICBmdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICAgIGRhdGEsXG4gICAgdGFnLFxuICAgIHZhbHVlLFxuICAgIGFzUHJvcCxcbiAgICBpc1N5bmNcbiAgKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b09iamVjdCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhhc2g7XG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAgICBrZXkgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaGFzaCA9IGRhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGhhc2gpICYmICEoY2FtZWxpemVkS2V5IGluIGhhc2gpKSB7XG4gICAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICAgIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGNhbWVsaXplZEtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICAgIGluZGV4LFxuICAgIGlzSW5Gb3JcbiAgKSB7XG4gICAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gICAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gICAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gICAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICAgIHJldHVybiB0cmVlXG4gICAgfVxuICAgIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgICBudWxsLFxuICAgICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICAgICk7XG4gICAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX3N0YXRpY19fXCIgKyBpbmRleCksIGZhbHNlKTtcbiAgICByZXR1cm4gdHJlZVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gICAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICAgKi9cbiAgZnVuY3Rpb24gbWFya09uY2UgKFxuICAgIHRyZWUsXG4gICAgaW5kZXgsXG4gICAga2V5XG4gICkge1xuICAgIG1hcmtTdGF0aWModHJlZSwgKFwiX19vbmNlX19cIiArIGluZGV4ICsgKGtleSA/IChcIl9cIiArIGtleSkgOiBcIlwiKSksIHRydWUpO1xuICAgIHJldHVybiB0cmVlXG4gIH1cblxuICBmdW5jdGlvbiBtYXJrU3RhdGljIChcbiAgICB0cmVlLFxuICAgIGtleSxcbiAgICBpc09uY2VcbiAgKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya1N0YXRpY05vZGUgKG5vZGUsIGtleSwgaXNPbmNlKSB7XG4gICAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgbm9kZS5pc09uY2UgPSBpc09uY2U7XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzIChkYXRhLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gICAgcmVzLFxuICAgIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICAgIGhhc0R5bmFtaWNLZXlzLFxuICAgIGNvbnRlbnRIYXNoS2V5XG4gICkge1xuICAgIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgICB9IGVsc2UgaWYgKGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIG51bGwgaXMgYSBzcGVpY2FsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIkludmFsaWQgdmFsdWUgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IChleHBlY3RlZCBzdHJpbmcgb3IgbnVsbCk6IFwiICsga2V5KSxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBiYXNlT2JqXG4gIH1cblxuICAvLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbiAgLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3RcbiAgLy8gdG8gc3RyaW5nIGFuZCBjYXVzZSB0aGUgdHlwZSBjaGVjayB0byBtaXNzLlxuICBmdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgICB0YXJnZXQuX28gPSBtYXJrT25jZTtcbiAgICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xuICAgIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gICAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XG4gICAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICAgIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gICAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcbiAgICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gICAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICAgIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICAgIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gICAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xuICAgIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIHBhcmVudCxcbiAgICBDdG9yXG4gICkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gICAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAgIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgICB2YXIgY29udGV4dFZtO1xuICAgIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxuICAgICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gICAgfVxuICAgIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gICAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgICB9O1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzY29wZWRTbG90cycsICh7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgICAgfVxuICAgIH0pKTtcblxuICAgIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgICBpZiAoaXNDb21waWxlZCkge1xuICAgICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgICAgdm5vZGUuZm5TY29wZUlkID0gb3B0aW9ucy5fc2NvcGVJZDtcbiAgICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7IH07XG4gICAgfVxuICB9XG5cbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoRnVuY3Rpb25hbFJlbmRlckNvbnRleHQucHJvdG90eXBlKTtcblxuICBmdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgICBDdG9yLFxuICAgIHByb3BzRGF0YSxcbiAgICBkYXRhLFxuICAgIGNvbnRleHRWbSxcbiAgICBjaGlsZHJlblxuICApIHtcbiAgICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICAgIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgICBkYXRhLFxuICAgICAgcHJvcHMsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNvbnRleHRWbSxcbiAgICAgIEN0b3JcbiAgICApO1xuXG4gICAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICAgIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgdmFyIHZub2RlcyA9IG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlKSB8fCBbXTtcbiAgICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgICAvLyAjNzgxNyBjbG9uZSBub2RlIGJlZm9yZSBzZXR0aW5nIGZuQ29udGV4dCwgb3RoZXJ3aXNlIGlmIHRoZSBub2RlIGlzIHJldXNlZFxuICAgIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAgIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICAgIHZhciBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHtcbiAgICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICAgIH1cbiAgICBpZiAoZGF0YS5zbG90KSB7XG4gICAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lXG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICAvKiAgKi9cblxuICAvKiAgKi9cblxuICAvKiAgKi9cblxuICAvLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxuICB2YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICAgICkge1xuICAgICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICAgIGNoaWxkLFxuICAgICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfSxcblxuICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICAgIEN0b3IsXG4gICAgZGF0YSxcbiAgICBjb250ZXh0LFxuICAgIGNoaWxkcmVuLFxuICAgIHRhZ1xuICApIHtcbiAgICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAgIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICAgIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgICB9XG5cbiAgICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gICAgLy8gcmVqZWN0LlxuICAgIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAge1xuICAgICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGFzeW5jIGNvbXBvbmVudFxuICAgIHZhciBhc3luY0ZhY3Rvcnk7XG4gICAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgICAgQ3RvciA9IHJlc29sdmVBc3luY0NvbXBvbmVudChhc3luY0ZhY3RvcnksIGJhc2VDdG9yKTtcbiAgICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgICBhc3luY0ZhY3RvcnksXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgIHRhZ1xuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgICAvLyByZXNvbHZlIGNvbnN0cnVjdG9yIG9wdGlvbnMgaW4gY2FzZSBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkIGFmdGVyXG4gICAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAgIC8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBkYXRhIGludG8gcHJvcHMgJiBldmVudHNcbiAgICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gICAgfVxuXG4gICAgLy8gZXh0cmFjdCBwcm9wc1xuICAgIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICAgIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gICAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgICB2YXIgbGlzdGVuZXJzID0gZGF0YS5vbjtcbiAgICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAgIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICAgIGRhdGEub24gPSBkYXRhLm5hdGl2ZU9uO1xuXG4gICAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgICAvLyBvdGhlciB0aGFuIHByb3BzICYgbGlzdGVuZXJzICYgc2xvdFxuXG4gICAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICAgIGRhdGEgPSB7fTtcbiAgICAgIGlmIChzbG90KSB7XG4gICAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gICAgaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpO1xuXG4gICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgICB2YXIgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICAgIHsgQ3RvcjogQ3RvciwgcHJvcHNEYXRhOiBwcm9wc0RhdGEsIGxpc3RlbmVyczogbGlzdGVuZXJzLCB0YWc6IHRhZywgY2hpbGRyZW46IGNoaWxkcmVuIH0sXG4gICAgICBhc3luY0ZhY3RvcnlcbiAgICApO1xuXG4gICAgcmV0dXJuIHZub2RlXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgICB2bm9kZSwgLy8gd2Uga25vdyBpdCdzIE1vdW50ZWRDb21wb25lbnRWTm9kZSBidXQgZmxvdyBkb2Vzbid0XG4gICAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICApIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgICBwYXJlbnQ6IHBhcmVudFxuICAgIH07XG4gICAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICAgIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG4gIH1cblxuICBmdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICAgIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgICAgZjEoYSwgYik7XG4gICAgICBmMihhLCBiKTtcbiAgICB9O1xuICAgIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkXG4gIH1cblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4gIC8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICAgIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICAgIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICAgIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICAgIGlmIChcbiAgICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgICApIHtcbiAgICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG4gIHZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuICAvLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuICAvLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gICAgY29udGV4dCxcbiAgICB0YWcsXG4gICAgZGF0YSxcbiAgICBjaGlsZHJlbixcbiAgICBub3JtYWxpemF0aW9uVHlwZSxcbiAgICBhbHdheXNOb3JtYWxpemVcbiAgKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICAgIGNvbnRleHQsXG4gICAgdGFnLFxuICAgIGRhdGEsXG4gICAgY2hpbGRyZW4sXG4gICAgbm9ybWFsaXphdGlvblR5cGVcbiAgKSB7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgICB9XG4gICAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICAgIHRhZyA9IGRhdGEuaXM7XG4gICAgfVxuICAgIGlmICghdGFnKSB7XG4gICAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gICAgfVxuICAgIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICAgICkge1xuICAgICAge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICkge1xuICAgICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgICB9XG4gICAgdmFyIHZub2RlLCBucztcbiAgICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBDdG9yO1xuICAgICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgICB2bm9kZS5ucyA9IG5zO1xuICAgIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgICBucyA9IHVuZGVmaW5lZDtcbiAgICAgIGZvcmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcmVmICM1MzE4XG4gIC8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4gIC8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gICAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICAgIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gICAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gICAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gICAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gICAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gICAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gICAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gICAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gICAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gICAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAgIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgICAgfSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbiAgZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAgIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gICAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICAgIH07XG5cbiAgICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgICAgLy8gcmVuZGVyIHNlbGZcbiAgICAgIHZhciB2bm9kZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1ZXMgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICBpZiAodm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgICAgfVxuICAgICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgICB9XG4gICAgICAvLyBzZXQgcGFyZW50XG4gICAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICAgIGlmIChcbiAgICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICAgICkge1xuICAgICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgICB9XG4gICAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgICA6IGNvbXBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICAgIGZhY3RvcnksXG4gICAgZGF0YSxcbiAgICBjb250ZXh0LFxuICAgIGNoaWxkcmVuLFxuICAgIHRhZ1xuICApIHtcbiAgICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgICByZXR1cm4gbm9kZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgICBmYWN0b3J5LFxuICAgIGJhc2VDdG9yXG4gICkge1xuICAgIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgICB9XG5cbiAgICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gICAgfVxuXG4gICAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgIH1cblxuICAgIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICBpZiAoaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgICAgdmFyIHN5bmMgPSB0cnVlO1xuXG4gICAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgICApO1xuICAgICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICAgIFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3luYyA9IGZhbHNlO1xuICAgICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICAgIHJldHVybiBjXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRhcmdldDtcblxuICBmdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICAgIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICAgIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgICB2bSxcbiAgICBsaXN0ZW5lcnMsXG4gICAgb2xkTGlzdGVuZXJzXG4gICkge1xuICAgIHRhcmdldCA9IHZtO1xuICAgIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgICB0YXJnZXQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gICAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICAgIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgICAgfVxuICAgICAgb24uZm4gPSBmbjtcbiAgICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAvLyBhbGxcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgcmV0dXJuIHZtXG4gICAgICB9XG4gICAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2bVxuICAgICAgfVxuICAgICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICAgIGlmICghY2JzKSB7XG4gICAgICAgIHJldHVybiB2bVxuICAgICAgfVxuICAgICAgaWYgKCFmbikge1xuICAgICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICAgIHJldHVybiB2bVxuICAgICAgfVxuICAgICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgICAgdmFyIGNiO1xuICAgICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjYiA9IGNic1tpXTtcbiAgICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH07XG5cbiAgICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAge1xuICAgICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgICBpZiAoY2JzKSB7XG4gICAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG4gIHZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICAgIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgICB9XG5cbiAgICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICAgIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgICB2bS4kcmVmcyA9IHt9O1xuXG4gICAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICAgIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gICAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVwZGF0ZXNcbiAgICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgICAgfVxuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICAgIGlmIChwcmV2RWwpIHtcbiAgICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHZtLiRlbCkge1xuICAgICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgICAgfVxuICAgICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgICB9XG4gICAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICAgIH07XG5cbiAgICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgICB9XG4gICAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgICB9XG4gICAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgICAgfVxuICAgICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgICAgdm0uJG9mZigpO1xuICAgICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgICBpZiAodm0uJGVsKSB7XG4gICAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgICB2bSxcbiAgICBlbCxcbiAgICBoeWRyYXRpbmdcbiAgKSB7XG4gICAgdm0uJGVsID0gZWw7XG4gICAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgICB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICAgIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICAgIHZhciBpZCA9IHZtLl91aWQ7XG4gICAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArIG5hbWUgKyBcIiByZW5kZXJcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuXG4gICAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gICAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gICAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUgKCkge1xuICAgICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgICBoeWRyYXRpbmcgPSBmYWxzZTtcblxuICAgIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gICAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgICBpZiAodm0uJHZub2RlID09IG51bGwpIHtcbiAgICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQgKFxuICAgIHZtLFxuICAgIHByb3BzRGF0YSxcbiAgICBsaXN0ZW5lcnMsXG4gICAgcGFyZW50Vm5vZGUsXG4gICAgcmVuZGVyQ2hpbGRyZW5cbiAgKSB7XG4gICAge1xuICAgICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cblxuICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAgIC8vIFwiJHN0YWJsZVwiIG1hcmtlci5cbiAgICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICAgIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgICB2YXIgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShcbiAgICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgICAobmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkgIT09IG5ld1Njb3BlZFNsb3RzLiRrZXkpXG4gICAgKTtcblxuICAgIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgICApO1xuXG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gICAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICAgIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgICB9XG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICAgIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gICAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAgIC8vIHVwZGF0ZSBwcm9wc1xuICAgIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgICAgfVxuICAgICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gICAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAgIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gICAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICAgIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICAgIGlmIChkaXJlY3QpIHtcbiAgICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgICBpZiAoZGlyZWN0KSB7XG4gICAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAgIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgICBwdXNoVGFyZ2V0KCk7XG4gICAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gICAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICAgIGlmIChoYW5kbGVycykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbiAgdmFyIHF1ZXVlID0gW107XG4gIHZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xuICB2YXIgaGFzID0ge307XG4gIHZhciBjaXJjdWxhciA9IHt9O1xuICB2YXIgd2FpdGluZyA9IGZhbHNlO1xuICB2YXIgZmx1c2hpbmcgPSBmYWxzZTtcbiAgdmFyIGluZGV4ID0gMDtcblxuICAvKipcbiAgICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gICAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICAgIGhhcyA9IHt9O1xuICAgIHtcbiAgICAgIGNpcmN1bGFyID0ge307XG4gICAgfVxuICAgIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuICAvLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbiAgLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbiAgLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4gIC8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxuICB2YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuICAvLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxuICB2YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbiAgLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbiAgLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbiAgLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4gIC8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbiAgaWYgKGluQnJvd3NlciAmJiBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcCkge1xuICAgIC8vIGlmIHRoZSBsb3ctcmVzIHRpbWVzdGFtcCB3aGljaCBpcyBiaWdnZXIgdGhhbiB0aGUgZXZlbnQgdGltZXN0YW1wXG4gICAgLy8gKHdoaWNoIGlzIGV2YWx1YXRlZCBBRlRFUikgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lcnMgYXMgd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAgICovXG4gIGZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICAgIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gICAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAgIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gICAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gICAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gICAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gICAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgICB9XG4gICAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgICBoYXNbaWRdID0gbnVsbDtcbiAgICAgIHdhdGNoZXIucnVuKCk7XG4gICAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgICBpZiAoaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICAgIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gICAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gICAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gICAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgICAvLyBkZXZ0b29sIGhvb2tcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gICAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAgIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICAgKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAgICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gICAqL1xuICBmdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgICB9XG4gICAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICAgIGlmICghd2FpdGluZykge1xuICAgICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIWNvbmZpZy5hc3luYykge1xuICAgICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuXG5cbiAgdmFyIHVpZCQyID0gMDtcblxuICAvKipcbiAgICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gICAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gICAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICAgKi9cbiAgdmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgICB2bSxcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnMsXG4gICAgaXNSZW5kZXJXYXRjaGVyXG4gICkge1xuICAgIHRoaXMudm0gPSB2bTtcbiAgICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gICAgfVxuICAgIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAgIC8vIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5jYiA9IGNiO1xuICAgIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gICAgdGhpcy5kZXBzID0gW107XG4gICAgdGhpcy5uZXdEZXBzID0gW107XG4gICAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICAgIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgICB0aGlzLmV4cHJlc3Npb24gPSBleHBPckZuLnRvU3RyaW5nKCk7XG4gICAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gICAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IHRoaXMuZ2V0KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAgICovXG4gIFdhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgcHVzaFRhcmdldCh0aGlzKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFyIHZtID0gdGhpcy52bTtcbiAgICB0cnkge1xuICAgICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgICAgfVxuICAgICAgcG9wVGFyZ2V0KCk7XG4gICAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICAgKi9cbiAgV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgICB2YXIgaWQgPSBkZXAuaWQ7XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAgICovXG4gIFdhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gICAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICAgIHRtcCA9IHRoaXMuZGVwcztcbiAgICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gICAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICAgIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAgICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAgICovXG4gIFdhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodGhpcy5sYXp5KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgICAgdGhpcy5ydW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gICAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gICAqL1xuICBXYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICAgIGlmIChcbiAgICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgICAgdGhpcy5kZWVwXG4gICAgICApIHtcbiAgICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICAgKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gICAqL1xuICBXYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICAgKi9cbiAgV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gICAqL1xuICBXYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBub29wLFxuICAgIHNldDogbm9vcFxuICB9O1xuXG4gIGZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICAgIH07XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICAgIHZtLl93YXRjaGVycyA9IFtdO1xuICAgIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gICAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICAgIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgICBpZiAob3B0cy5kYXRhKSB7XG4gICAgICBpbml0RGF0YSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICAgIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICAgIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gICAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICAgIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgICBpZiAoIWlzUm9vdCkge1xuICAgICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB9XG4gICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgICB2bVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICAgIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgICAgOiBkYXRhIHx8IHt9O1xuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgZGF0YSA9IHt9O1xuICAgICAgd2FybihcbiAgICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICAgIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAge1xuICAgICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG9ic2VydmUgZGF0YVxuICAgIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gICAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICAgIHB1c2hUYXJnZXQoKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgICAgcmV0dXJuIHt9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHBvcFRhcmdldCgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbiAgZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyID09IG51bGwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgICB2bSxcbiAgICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgICBub29wLFxuICAgICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICAgIHRhcmdldCxcbiAgICBrZXksXG4gICAgdXNlckRlZlxuICApIHtcbiAgICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgICA6IG5vb3A7XG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgICB9XG4gICAgaWYgKHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICAgIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gICAgdm0sXG4gICAgZXhwT3JGbixcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICAgIH1cbiAgICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG4gIH1cblxuICBmdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gICAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICAgIHtcbiAgICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICAgIGV4cE9yRm4sXG4gICAgICBjYixcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZXJyb3IsIHZtLCAoXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgdWlkJDMgPSAwO1xuXG4gIGZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgLy8gYSB1aWRcbiAgICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgfVxuXG4gICAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAge1xuICAgICAgICBpbml0UHJveHkodm0pO1xuICAgICAgfVxuICAgICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgICAgdm0uX3NlbGYgPSB2bTtcbiAgICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgICBpbml0UmVuZGVyKHZtKTtcbiAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgICAgaW5pdFN0YXRlKHZtKTtcbiAgICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICAgIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICAgIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICAgIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICAgIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICAgIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgICBpZiAoQ3Rvci5zdXBlcikge1xuICAgICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gICAgdmFyIG1vZGlmaWVkO1xuICAgIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gICAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtb2RpZmllZFxuICB9XG5cbiAgZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgICApIHtcbiAgICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgICB9XG4gICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgfVxuXG4gIGluaXRNaXhpbihWdWUpO1xuICBzdGF0ZU1peGluKFZ1ZSk7XG4gIGV2ZW50c01peGluKFZ1ZSk7XG4gIGxpZmVjeWNsZU1peGluKFZ1ZSk7XG4gIHJlbmRlck1peGluKFZ1ZSk7XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gICAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cblxuICAgICAgLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXJzXG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICAgIGlmICh0eXBlb2YgcGx1Z2luLmluc3RhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwbHVnaW4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICB9XG4gICAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAgIC8qKlxuICAgICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cbiAgICAgKi9cbiAgICBWdWUuY2lkID0gMDtcbiAgICB2YXIgY2lkID0gMTtcblxuICAgIC8qKlxuICAgICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAgICovXG4gICAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciBTdXBlciA9IHRoaXM7XG4gICAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgICBpZiAoY2FjaGVkQ3RvcnNbU3VwZXJJZF0pIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgICB9XG5cbiAgICAgIHZhciBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICAgIH1cblxuICAgICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgICAgfTtcbiAgICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICAgICk7XG4gICAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICAgIH1cbiAgICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgICAgfVxuXG4gICAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgICB9KTtcbiAgICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgICB9XG5cbiAgICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgICByZXR1cm4gU3ViXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gICAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICAgKi9cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICAgIGlkLFxuICAgICAgICBkZWZpbml0aW9uXG4gICAgICApIHtcbiAgICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50JyAmJiBpc1BsYWluT2JqZWN0KGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qICAqL1xuXG5cblxuICBmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gICAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gICAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICAgIHZhciBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICAgIGNhY2hlLFxuICAgIGtleSxcbiAgICBrZXlzLFxuICAgIGN1cnJlbnRcbiAgKSB7XG4gICAgdmFyIGNhY2hlZCQkMSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICB9XG4gICAgY2FjaGVba2V5XSA9IG51bGw7XG4gICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gIH1cblxuICB2YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbiAgdmFyIEtlZXBBbGl2ZSA9IHtcbiAgICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gICAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgICBwcm9wczoge1xuICAgICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gICAgfSxcblxuICAgIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB0aGlzLmtleXMgPSBbXTtcbiAgICB9LFxuXG4gICAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy4kd2F0Y2goJ2V4Y2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgICAgdmFyIHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAgIC8vIGNoZWNrIHBhdHRlcm5cbiAgICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgICAgdmFyIGluY2x1ZGUgPSByZWYuaW5jbHVkZTtcbiAgICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICAgIHZhciBrZXlzID0gcmVmJDEua2V5cztcbiAgICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgICB9XG4gIH07XG5cbiAgdmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICAgIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG4gIH07XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gICAgLy8gY29uZmlnXG4gICAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICAgIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gICAge1xuICAgICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAgIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAgIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAgIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gICAgVnVlLnV0aWwgPSB7XG4gICAgICB3YXJuOiB3YXJuLFxuICAgICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICAgIH07XG5cbiAgICBWdWUuc2V0ID0gc2V0O1xuICAgIFZ1ZS5kZWxldGUgPSBkZWw7XG4gICAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIG9ic2VydmUob2JqKTtcbiAgICAgIHJldHVybiBvYmpcbiAgICB9O1xuXG4gICAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9KTtcblxuICAgIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICAgIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgICBpbml0VXNlKFZ1ZSk7XG4gICAgaW5pdE1peGluJDEoVnVlKTtcbiAgICBpbml0RXh0ZW5kKFZ1ZSk7XG4gICAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG4gIH1cblxuICBpbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gICAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICAgIH1cbiAgfSk7XG5cbiAgLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbiAgfSk7XG5cbiAgVnVlLnZlcnNpb24gPSAnMi42LjcnO1xuXG4gIC8qICAqL1xuXG4gIC8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuICAvLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbiAgdmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuICAvLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG4gIHZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbiAgdmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICAgIHJldHVybiAoXG4gICAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICAgIClcbiAgfTtcblxuICB2YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG4gIHZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbiAgdmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgICAgPyAnZmFsc2UnXG4gICAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICAgID8gdmFsdWVcbiAgICAgICAgOiAndHJ1ZSdcbiAgfTtcblxuICB2YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbiAgKTtcblxuICB2YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxuICB2YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xuICB9O1xuXG4gIHZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xuICB9O1xuXG4gIHZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG4gIH07XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gICAgc3RhdGljQ2xhc3MsXG4gICAgZHluYW1pY0NsYXNzXG4gICkge1xuICAgIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICAgIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG4gIH1cblxuICBmdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHZhciBzdHJpbmdpZmllZDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICAgIHZhciByZXMgPSAnJztcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgICByZXMgKz0ga2V5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgbmFtZXNwYWNlTWFwID0ge1xuICAgIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbiAgfTtcblxuICB2YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAgICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAgICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuICApO1xuXG4gIC8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuICAvLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxuICB2YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAgICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICAgJ2ZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAgICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgICB0cnVlXG4gICk7XG5cbiAgdmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxuICB2YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gICAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICAgIHJldHVybiAnc3ZnJ1xuICAgIH1cbiAgICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gICAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgICByZXR1cm4gJ21hdGgnXG4gICAgfVxuICB9XG5cbiAgdmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3Nlcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICAgIH1cbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICAgICkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgICB9XG4gIH1cblxuICB2YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RlZFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gICAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgICByZXR1cm4gZWxtXG4gICAgfVxuICAgIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gICAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gICAgfVxuICAgIHJldHVybiBlbG1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gICAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG4gIH1cblxuICBmdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG4gIH1cblxuICBmdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG4gIH1cblxuICB2YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gICAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gICAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICAgIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gICAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICAgIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG4gIH0pO1xuXG4gIC8qICAqL1xuXG4gIHZhciByZWYgPSB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gICAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gICAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gICAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgKlxuICAgKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAgICpcbiAgICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICAgKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAgICovXG5cbiAgdmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxuICB2YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuICBmdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5rZXkgPT09IGIua2V5ICYmIChcbiAgICAgICAgKFxuICAgICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICAgICkgfHwgKFxuICAgICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgICBpc1VuZGVmKGIuYXN5bmNGYWN0b3J5LmVycm9yKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICAgIGlmIChhLnRhZyAhPT0gJ2lucHV0JykgeyByZXR1cm4gdHJ1ZSB9XG4gICAgdmFyIGk7XG4gICAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgICB2YXIgdHlwZUIgPSBpc0RlZihpID0gYi5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICAgIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeCAoY2hpbGRyZW4sIGJlZ2luSWR4LCBlbmRJZHgpIHtcbiAgICB2YXIgaSwga2V5O1xuICAgIHZhciBtYXAgPSB7fTtcbiAgICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gICAgfVxuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24gKGJhY2tlbmQpIHtcbiAgICB2YXIgaSwgajtcbiAgICB2YXIgY2JzID0ge307XG5cbiAgICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcztcbiAgICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgICAgY2JzW2hvb2tzW2ldXSA9IFtdO1xuICAgICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICAgIGNic1tob29rc1tpXV0ucHVzaChtb2R1bGVzW2pdW2hvb2tzW2ldXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgICAgaWYgKC0tcmVtb3ZlJCQxLmxpc3RlbmVycyA9PT0gMCkge1xuICAgICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgICAgcmV0dXJuIHJlbW92ZSQkMVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhaW5WUHJlICYmXG4gICAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgICAhKFxuICAgICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXG4gICAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgICAgfSlcbiAgICAgICAgKSAmJlxuICAgICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgICApXG4gICAgfVxuXG4gICAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVsbSAoXG4gICAgICB2bm9kZSxcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgIHBhcmVudEVsbSxcbiAgICAgIHJlZkVsbSxcbiAgICAgIG5lc3RlZCxcbiAgICAgIG93bmVyQXJyYXksXG4gICAgICBpbmRleFxuICAgICkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcbiAgICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAgIC8vIHBvdGVudGlhbCBwYXRjaCBlcnJvcnMgZG93biB0aGUgcm9hZCB3aGVuIGl0J3MgdXNlZCBhcyBhbiBpbnNlcnRpb25cbiAgICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICAgIH1cblxuICAgICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICAgIGlmIChjcmVhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgICdVbmtub3duIGN1c3RvbSBlbGVtZW50OiA8JyArIHRhZyArICc+IC0gZGlkIHlvdSAnICtcbiAgICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICAgIDogbm9kZU9wcy5jcmVhdGVFbGVtZW50KHRhZywgdm5vZGUpO1xuICAgICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUodm5vZGUudGV4dCkpIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgdm5vZGUpO1xuICAgICAgfVxuICAgICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICAgIGlmIChpc0RlZihpKSkge1xuICAgICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAgIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICAgIHZhciBpO1xuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICAgKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgICB2YXIgaSwgajtcbiAgICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuZGVzdHJveSkpIHsgaSh2bm9kZSk7IH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBybSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgICB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZub2RlID0gY2hpbGRyZW5baV07XG4gICAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICAgIGlmIChpc0RlZihrZXkpKSB7XG4gICAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAgIChcIkR1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnXCIgKyBrZXkgKyBcIicuIFRoaXMgbWF5IGNhdXNlIGFuIHVwZGF0ZSBlcnJvci5cIiksXG4gICAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlZW5LZXlzW2tleV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICAgIGlmIChpc0RlZihjKSAmJiBzYW1lVm5vZGUobm9kZSwgYykpIHsgcmV0dXJuIGkgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhdGNoVm5vZGUgKFxuICAgICAgb2xkVm5vZGUsXG4gICAgICB2bm9kZSxcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgIG93bmVyQXJyYXksXG4gICAgICBpbmRleCxcbiAgICAgIHJlbW92ZU9ubHlcbiAgICApIHtcbiAgICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAgIC8vIGNsb25lIHJldXNlZCB2bm9kZVxuICAgICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xuICAgICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cbiAgICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpXG4gICAgICApIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgICBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkudXBkYXRlKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRDaCkgJiYgaXNEZWYoY2gpKSB7XG4gICAgICAgICAgaWYgKG9sZENoICE9PSBjaCkgeyB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTsgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgeyBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpOyB9XG4gICAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKGVsbSwgb2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCB2bm9kZS50ZXh0KTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucG9zdHBhdGNoKSkgeyBpKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gICAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAgIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAgIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICAgIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICAgIGZ1bmN0aW9uIGh5ZHJhdGUgKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgICB2bm9kZS5lbG0gPSBlbG07XG5cbiAgICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgICAge1xuICAgICAgICBpZiAoIWFzc2VydE5vZGVNYXRjaChlbG0sIHZub2RlLCBpblZQcmUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYodGFnKSkge1xuICAgICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgICAgaWYgKCFlbG0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxuICAgICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybignc2VydmVyIGlubmVySFRNTDogJywgaSk7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaXRlcmF0ZSBhbmQgY29tcGFyZSBjaGlsZHJlbiBsaXN0c1xuICAgICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxuICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xuICAgICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgICAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFRoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBpbmNvcnJlY3QgJyArXG4gICAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAgICdmdWxsIGNsaWVudC1zaWRlIHJlbmRlci4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgICAgb2xkVm5vZGUgPSBlbXB0eU5vZGVBdChvbGRWbm9kZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICAgIGNyZWF0ZUVsbShcbiAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgICAgLy8gZXh0cmVtZWx5IHJhcmUgZWRnZSBjYXNlOiBkbyBub3QgaW5zZXJ0IGlmIG9sZCBlbGVtZW50IGlzIGluIGFcbiAgICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICAgIG9sZEVsbS5fbGVhdmVDYiA/IG51bGwgOiBwYXJlbnRFbG0sXG4gICAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gdXBkYXRlIHBhcmVudCBwbGFjZWhvbGRlciBub2RlIGVsZW1lbnQsIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICAgIHZhciBwYXRjaGFibGUgPSBpc1BhdGNoYWJsZSh2bm9kZSk7XG4gICAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICAgIGlmIChwYXRjaGFibGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cbiAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyUmVmKGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgICAgaWYgKGlzRGVmKHBhcmVudEVsbSkpIHtcbiAgICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICAgIHJldHVybiB2bm9kZS5lbG1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgZGlyZWN0aXZlcyA9IHtcbiAgICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gICAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gICAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gICAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gICAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gICAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgICBpZiAoIW9sZERpcikge1xuICAgICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghaXNDcmVhdGUpIHtcbiAgICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gICAgZGlycyxcbiAgICB2bVxuICApIHtcbiAgICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoIWRpcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgICB2YXIgaSwgZGlyO1xuICAgIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkaXIgPSBkaXJzW2ldO1xuICAgICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgICB9XG4gICAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICAgIH1cbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBmdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICAgIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZU1vZHVsZXMgPSBbXG4gICAgcmVmLFxuICAgIGRpcmVjdGl2ZXNcbiAgXTtcblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBrZXksIGN1ciwgb2xkO1xuICAgIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gICAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAgIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICAgIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gIzQzOTE6IGluIElFOSwgc2V0dGluZyB0eXBlIGNhbiByZXNldCB2YWx1ZSBmb3IgaW5wdXRbdHlwZT1yYWRpb11cbiAgICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKChpc0lFIHx8IGlzRWRnZSkgJiYgYXR0cnMudmFsdWUgIT09IG9sZEF0dHJzLnZhbHVlKSB7XG4gICAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICAgIH1cbiAgICBmb3IgKGtleSBpbiBvbGRBdHRycykge1xuICAgICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgICA6IGtleTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoXG4gICAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgICApIHtcbiAgICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICAgIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXR0cnMgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG4gIH07XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICAgIGlmIChcbiAgICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gICAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBjbGFzc1xuICAgIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgICB9XG4gIH1cblxuICB2YXIga2xhc3MgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbiAgZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICAgIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gICAgdmFyIGN1cmx5ID0gMDtcbiAgICB2YXIgc3F1YXJlID0gMDtcbiAgICB2YXIgcGFyZW4gPSAwO1xuICAgIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICAgIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgICAgcHJldiA9IGM7XG4gICAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICAgKSB7XG4gICAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcbiAgICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgICBwdXNoRmlsdGVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgfVxuXG4gICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBleHByZXNzaW9uXG4gIH1cblxuICBmdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICAgIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIChhcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJncykpXG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cblxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIGZ1bmN0aW9uIGJhc2VXYXJuIChtc2csIHJhbmdlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbVnVlIGNvbXBpbGVyXTogXCIgKyBtc2cpKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gICAgbW9kdWxlcyxcbiAgICBrZXlcbiAgKSB7XG4gICAgcmV0dXJuIG1vZHVsZXNcbiAgICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuICAgICAgOiBbXVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICAgIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgICA/IChlbC5keW5hbWljQXR0cnMgfHwgKGVsLmR5bmFtaWNBdHRycyA9IFtdKSlcbiAgICAgIDogKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSk7XG4gICAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICB9XG5cbiAgLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG4gIGZ1bmN0aW9uIGFkZFJhd0F0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgICBlbC5hdHRyc01hcFtuYW1lXSA9IHZhbHVlO1xuICAgIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgICBlbCxcbiAgICBuYW1lLFxuICAgIHJhd05hbWUsXG4gICAgdmFsdWUsXG4gICAgYXJnLFxuICAgIGlzRHluYW1pY0FyZyxcbiAgICBtb2RpZmllcnMsXG4gICAgcmFuZ2VcbiAgKSB7XG4gICAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICByYXdOYW1lOiByYXdOYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgYXJnOiBhcmcsXG4gICAgICBpc0R5bmFtaWNBcmc6IGlzRHluYW1pY0FyZyxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gICAgfSwgcmFuZ2UpKTtcbiAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyTWFya2VyIChzeW1ib2wsIG5hbWUsIGR5bmFtaWMpIHtcbiAgICByZXR1cm4gZHluYW1pY1xuICAgICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgICA6IHN5bWJvbCArIG5hbWUgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICAgIGVsLFxuICAgIG5hbWUsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzLFxuICAgIGltcG9ydGFudCxcbiAgICB3YXJuLFxuICAgIHJhbmdlLFxuICAgIGR5bmFtaWNcbiAgKSB7XG4gICAgbW9kaWZpZXJzID0gbW9kaWZpZXJzIHx8IGVtcHR5T2JqZWN0O1xuICAgIC8vIHdhcm4gcHJldmVudCBhbmQgcGFzc2l2ZSBtb2RpZmllclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIHdhcm4gJiZcbiAgICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIG5vcm1hbGl6ZSBjbGljay5yaWdodCBhbmQgY2xpY2subWlkZGxlIHNpbmNlIHRoZXkgZG9uJ3QgYWN0dWFsbHkgZmlyZVxuICAgIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlXG4gICAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gICAgaWYgKG1vZGlmaWVycy5yaWdodCkge1xuICAgICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7XG4gICAgICBpZiAoZHluYW1pYykge1xuICAgICAgICBuYW1lID0gXCIoXCIgKyBuYW1lICsgXCIpPT09J2NsaWNrJz8nbW91c2V1cCc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICAgIGlmIChtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJ34nLCBuYW1lLCBkeW5hbWljKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKG1vZGlmaWVycy5wYXNzaXZlKSB7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50cztcbiAgICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgICBpZiAobW9kaWZpZXJzICE9PSBlbXB0eU9iamVjdCkge1xuICAgICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gICAgfVxuXG4gICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgICBlbCxcbiAgICBuYW1lXG4gICkge1xuICAgIHJldHVybiBlbC5yYXdBdHRyc01hcFsnOicgKyBuYW1lXSB8fFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHxcbiAgICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG4gIH1cblxuICBmdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gICAgZWwsXG4gICAgbmFtZSxcbiAgICBnZXRTdGF0aWNcbiAgKSB7XG4gICAgdmFyIGR5bmFtaWNWYWx1ZSA9XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gICAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpO1xuICAgICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbiAgLy8gZG9lc24ndCBnZXQgcHJvY2Vzc2VkIGJ5IHByb2Nlc3NBdHRycy5cbiAgLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4gIC8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cbiAgZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoXG4gICAgZWwsXG4gICAgbmFtZSxcbiAgICByZW1vdmVGcm9tTWFwXG4gICkge1xuICAgIHZhciB2YWw7XG4gICAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZW1vdmVGcm9tTWFwKSB7XG4gICAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiB2YWxcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IChcbiAgICBlbCxcbiAgICBuYW1lXG4gICkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhdHRyID0gbGlzdFtpXTtcbiAgICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuIGF0dHJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZVNldEl0ZW0gKFxuICAgIGl0ZW0sXG4gICAgcmFuZ2VcbiAgKSB7XG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBpdGVtLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgaXRlbS5lbmQgPSByYW5nZS5lbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtXG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICAgKi9cbiAgZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuICApIHtcbiAgICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICAgIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICAgIHZhciB0cmltID0gcmVmLnRyaW07XG5cbiAgICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnO1xuICAgIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICAgIGlmICh0cmltKSB7XG4gICAgICB2YWx1ZUV4cHJlc3Npb24gPVxuICAgICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgICBcIj8gXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIudHJpbSgpXCIgK1xuICAgICAgICBcIjogXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gICAgfVxuICAgIGlmIChudW1iZXIpIHtcbiAgICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgICB9XG4gICAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICAgIGVsLm1vZGVsID0ge1xuICAgICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgICAgZXhwcmVzc2lvbjogSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuICAgICAgY2FsbGJhY2s6IChcImZ1bmN0aW9uIChcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIikge1wiICsgYXNzaWdubWVudCArIFwifVwiKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gICAqL1xuICBmdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAoXG4gICAgdmFsdWUsXG4gICAgYXNzaWdubWVudFxuICApIHtcbiAgICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gICAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAodmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCIkc2V0KFwiICsgKHJlcy5leHApICsgXCIsIFwiICsgKHJlcy5rZXkpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIHYtbW9kZWwgZXhwcmVzc2lvbiBpbnRvIGEgYmFzZSBwYXRoIGFuZCBhIGZpbmFsIGtleSBzZWdtZW50LlxuICAgKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAgICpcbiAgICogUG9zc2libGUgY2FzZXM6XG4gICAqXG4gICAqIC0gdGVzdFxuICAgKiAtIHRlc3Rba2V5XVxuICAgKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAgICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gICAqIC0geHh4LnRlc3RbYVthXS50ZXN0MVtrZXldXVxuICAgKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAgICpcbiAgICovXG5cbiAgdmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICAgIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL3B1bGwvNzczMFxuICAgIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgbGVuID0gdmFsLmxlbmd0aDtcblxuICAgIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICAgIGluZGV4JDEgPSB2YWwubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmIChpbmRleCQxID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBleHA6IHZhbC5zbGljZSgwLCBpbmRleCQxKSxcbiAgICAgICAgICBrZXk6ICdcIicgKyB2YWwuc2xpY2UoaW5kZXgkMSArIDEpICsgJ1wiJ1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGV4cDogdmFsLFxuICAgICAgICAgIGtleTogbnVsbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RyID0gdmFsO1xuICAgIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgICB3aGlsZSAoIWVvZigpKSB7XG4gICAgICBjaHIgPSBuZXh0KCk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleHA6IHZhbC5zbGljZSgwLCBleHByZXNzaW9uUG9zKSxcbiAgICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQgKCkge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG4gIH1cblxuICBmdW5jdGlvbiBlb2YgKCkge1xuICAgIHJldHVybiBpbmRleCQxID49IGxlblxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gICAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4MjdcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gICAgdmFyIGluQnJhY2tldCA9IDE7XG4gICAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gICAgd2hpbGUgKCFlb2YoKSkge1xuICAgICAgY2hyID0gbmV4dCgpO1xuICAgICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgICAgaWYgKGNociA9PT0gMHg1RCkgeyBpbkJyYWNrZXQtLTsgfVxuICAgICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gICAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICAgIHdoaWxlICghZW9mKCkpIHtcbiAgICAgIGNociA9IG5leHQoKTtcbiAgICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIHdhcm4kMTtcblxuICAvLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4gIC8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG4gIHZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xuICB2YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuICBmdW5jdGlvbiBtb2RlbCAoXG4gICAgZWwsXG4gICAgZGlyLFxuICAgIF93YXJuXG4gICkge1xuICAgIHdhcm4kMSA9IF93YXJuO1xuICAgIHZhciB2YWx1ZSA9IGRpci52YWx1ZTtcbiAgICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgICB2YXIgdGFnID0gZWwudGFnO1xuICAgIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAgIHtcbiAgICAgIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAgICAgLy8gdmFsdWUgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuICAgICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIixcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgZ2VuU2VsZWN0KGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAncmFkaW8nKSB7XG4gICAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gICAgfSBlbHNlIGlmICghY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGVsZW1lbnQgdHlwZS4gXCIgK1xuICAgICAgICAnSWYgeW91IGFyZSB3b3JraW5nIHdpdGggY29udGVudGVkaXRhYmxlLCBpdFxcJ3MgcmVjb21tZW5kZWQgdG8gJyArXG4gICAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuICApIHtcbiAgICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gICAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gICAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG4gICAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG4gICAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG4gICAgICBcIj9faShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIik+LTFcIiArIChcbiAgICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnXG4gICAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcbiAgICAgICAgICA6IChcIjpfcShcIiArIHZhbHVlICsgXCIsXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpXCIpXG4gICAgICApXG4gICAgKTtcbiAgICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJyxcbiAgICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArXG4gICAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICAgIFwidmFyICQkdj1cIiArIChudW1iZXIgPyAnX24oJyArIHZhbHVlQmluZGluZyArICcpJyA6IHZhbHVlQmluZGluZykgKyBcIixcIiArXG4gICAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgICBcImlmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5jb25jYXQoWyQkdl0pJykpICsgXCIpfVwiICtcbiAgICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSknKSkgKyBcIil9XCIgK1xuICAgICAgXCJ9ZWxzZXtcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYycpKSArIFwifVwiLFxuICAgICAgbnVsbCwgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcbiAgICBlbCxcbiAgICB2YWx1ZSxcbiAgICBtb2RpZmllcnNcbiAgKSB7XG4gICAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICAgIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICAgIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuICAgIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuU2VsZWN0IChcbiAgICBlbCxcbiAgICB2YWx1ZSxcbiAgICBtb2RpZmllcnNcbiAgKSB7XG4gICAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICAgIHZhciBzZWxlY3RlZFZhbCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgICBcIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFxcXCJfdmFsdWVcXFwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiO1xuXG4gICAgdmFyIGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJztcbiAgICB2YXIgY29kZSA9IFwidmFyICQkc2VsZWN0ZWRWYWwgPSBcIiArIHNlbGVjdGVkVmFsICsgXCI7XCI7XG4gICAgY29kZSA9IGNvZGUgKyBcIiBcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCkpO1xuICAgIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4gICkge1xuICAgIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAgIC8vIHdhcm4gaWYgdi1iaW5kOnZhbHVlIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWxcbiAgICAvLyBleGNlcHQgZm9yIGlucHV0cyB3aXRoIHYtYmluZDp0eXBlXG4gICAge1xuICAgICAgdmFyIHZhbHVlJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gfHwgZWwuYXR0cnNNYXBbJzp2YWx1ZSddO1xuICAgICAgdmFyIHR5cGVCaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gPyAndi1iaW5kOnZhbHVlJyA6ICc6dmFsdWUnO1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYmluZGluZyArIFwiPVxcXCJcIiArIHZhbHVlJDEgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggdi1tb2RlbCBvbiB0aGUgc2FtZSBlbGVtZW50IFwiICtcbiAgICAgICAgICAnYmVjYXVzZSB0aGUgbGF0dGVyIGFscmVhZHkgZXhwYW5kcyB0byBhIHZhbHVlIGJpbmRpbmcgaW50ZXJuYWxseScsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbYmluZGluZ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICAgIHZhciBsYXp5ID0gcmVmLmxhenk7XG4gICAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gICAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgICB2YXIgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuICAgIHZhciBldmVudCA9IGxhenlcbiAgICAgID8gJ2NoYW5nZSdcbiAgICAgIDogdHlwZSA9PT0gJ3JhbmdlJ1xuICAgICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICAgIDogJ2lucHV0JztcblxuICAgIHZhciB2YWx1ZUV4cHJlc3Npb24gPSAnJGV2ZW50LnRhcmdldC52YWx1ZSc7XG4gICAgaWYgKHRyaW0pIHtcbiAgICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClcIjtcbiAgICB9XG4gICAgaWYgKG51bWJlcikge1xuICAgICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICAgIH1cblxuICAgIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG4gICAgaWYgKG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICAgIH1cblxuICAgIGFkZFByb3AoZWwsICd2YWx1ZScsIChcIihcIiArIHZhbHVlICsgXCIpXCIpKTtcbiAgICBhZGRIYW5kbGVyKGVsLCBldmVudCwgY29kZSwgbnVsbCwgdHJ1ZSk7XG4gICAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpO1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbiAgLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuICAvLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4gIC8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICAgIH1cbiAgICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAgIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gICAgfVxuICB9XG5cbiAgdmFyIHRhcmdldCQxO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuICAvLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4gIC8vIHNhZmUgdG8gZXhjbHVkZS5cbiAgdmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbiAgZnVuY3Rpb24gYWRkJDEgKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBjYXB0dXJlLFxuICAgIHBhc3NpdmVcbiAgKSB7XG4gICAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAgIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gICAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gICAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAgIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gICAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgICAgLy8gIzk0NjIgYmFpbCBmb3IgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAgIGUudGltZVN0YW1wID09PSAwIHx8XG4gICAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgbmFtZSxcbiAgICAgIGhhbmRsZXIsXG4gICAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgICA6IGNhcHR1cmVcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBjYXB0dXJlLFxuICAgIF90YXJnZXRcbiAgKSB7XG4gICAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICBuYW1lLFxuICAgICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgICAgY2FwdHVyZVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICAgIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gICAgdGFyZ2V0JDEgPSB2bm9kZS5lbG07XG4gICAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICAgIHRhcmdldCQxID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIGV2ZW50cyA9IHtcbiAgICBjcmVhdGU6IHVwZGF0ZURPTUxpc3RlbmVycyxcbiAgICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBzdmdDb250YWluZXI7XG5cbiAgZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuZG9tUHJvcHMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5kb21Qcm9wcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIga2V5LCBjdXI7XG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAgIHZhciBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gICAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gICAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICAgIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyA9IGV4dGVuZCh7fSwgcHJvcHMpO1xuICAgIH1cblxuICAgIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgICBpZiAoaXNVbmRlZihwcm9wc1trZXldKSkge1xuICAgICAgICBlbG1ba2V5XSA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICAgKSB7XG4gICAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbiAgZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICAgKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gICAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAgIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICAgIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgICAvLyAjNjE1N1xuICAgIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICAgIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxuICB9XG5cbiAgZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gICAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICAgIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICAgIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgICB9XG4gICAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxuICB9XG5cbiAgdmFyIGRvbVByb3BzID0ge1xuICAgIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gICAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gICAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNcbiAgfSk7XG5cbiAgLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbiAgZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gICAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAgIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAgIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gICAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgICAgOiBzdHlsZVxuICB9XG5cbiAgLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuICBmdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgICB9XG4gICAgcmV0dXJuIGJpbmRpbmdTdHlsZVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAgICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgc3R5bGVEYXRhO1xuXG4gICAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgICApIHtcbiAgICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIGNzc1ZhclJFID0gL14tLS87XG4gIHZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xuICB2YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG4gIHZhciBlbXB0eVN0eWxlO1xuICB2YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gICAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICAgIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgICAgcmV0dXJuIHByb3BcbiAgICB9XG4gICAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gICAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgY3VyLCBuYW1lO1xuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICAgIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gICAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gICAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAgIC8vIHRvIG11dGF0ZSBpdC5cbiAgICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICAgIDogc3R5bGU7XG5cbiAgICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgc3R5bGUgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuICAvKipcbiAgICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gICAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICAgKi9cbiAgZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICAgKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAgICovXG4gIGZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgICAgfVxuICAgICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICAgIH1cbiAgICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgICBpZiAoY3VyKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgICBpZiAoIWRlZiQkMSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgICB9XG4gICAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gICAgfVxuICB9XG5cbiAgdmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xuICB2YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbiAgdmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbiAgdmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xuICB2YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xuICB2YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xuICB2YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbiAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICAgIH1cbiAgICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxuICB2YXIgcmFmID0gaW5Ccm93c2VyXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgICA6IHNldFRpbWVvdXRcbiAgICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuICBmdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gICAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJhZihmbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG4gIH1cblxuICBmdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICAgIGVsLFxuICAgIGV4cGVjdGVkVHlwZSxcbiAgICBjYlxuICApIHtcbiAgICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICAgIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICAgIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gICAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICAgIHZhciBlbmRlZCA9IDA7XG4gICAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICAgIGNiKCk7XG4gICAgfTtcbiAgICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgICBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfSwgdGltZW91dCArIDEpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgfVxuXG4gIHZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gICAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgICB2YXIgdHlwZTtcbiAgICB2YXIgdGltZW91dCA9IDA7XG4gICAgdmFyIHByb3BDb3VudCA9IDA7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgICA6IG51bGw7XG4gICAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiAwO1xuICAgIH1cbiAgICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gICAgfSkpXG4gIH1cblxuICAvLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4gIC8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbiAgLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3RpbmdcbiAgLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuICBmdW5jdGlvbiB0b01zIChzKSB7XG4gICAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICAgIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICBlbC5fbGVhdmVDYigpO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICAgIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICAgIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICAgIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICAgIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICAgIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICAgIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICAgIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gICAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICAgIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICAgIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gICAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAgIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAgIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gICAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gICAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gICAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gICAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB9XG5cbiAgICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgICA/IGFwcGVhckNsYXNzXG4gICAgICA6IGVudGVyQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICAgID8gYXBwZWFyVG9DbGFzc1xuICAgICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICAgIDogYmVmb3JlRW50ZXI7XG4gICAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgICA6IGVudGVyO1xuICAgIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgICAgOiBhZnRlckVudGVyO1xuICAgIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICAgIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICAgIDogZHVyYXRpb25cbiAgICApO1xuXG4gICAgaWYgKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gICAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICAgIH1cbiAgICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgICB9KTtcblxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgICApIHtcbiAgICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gICAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9XG5cbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAgIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gICAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgIGVsLl9lbnRlckNiKCk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICAgIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICByZXR1cm4gcm0oKVxuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gICAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICAgIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICAgIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gICAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gICAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gICAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICAgIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICAgIDogZHVyYXRpb25cbiAgICApO1xuXG4gICAgaWYgKGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgICB9XG4gICAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJmb3JtTGVhdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgICAgfVxuICAgICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG4gIGZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gICAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICAgKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAgICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAgIC8vIGludm9rZXJcbiAgICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBlbnRlcih2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gICAgY3JlYXRlOiBfZW50ZXIsXG4gICAgYWN0aXZhdGU6IF9lbnRlcixcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gOiB7fTtcblxuICB2YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICAgIGF0dHJzLFxuICAgIGtsYXNzLFxuICAgIGV2ZW50cyxcbiAgICBkb21Qcm9wcyxcbiAgICBzdHlsZSxcbiAgICB0cmFuc2l0aW9uXG4gIF07XG5cbiAgLyogICovXG5cbiAgLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4gIC8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG4gIHZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbiAgdmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbiAgLyoqXG4gICAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICAgKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICAgKi9cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUU5KSB7XG4gICAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlID0ge1xuICAgIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgLy8gIzY5MDNcbiAgICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gICAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICAgIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gICAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgICA6IG9wdGlvbi52YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICAgIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xuICB9XG5cbiAgLyogICovXG5cbiAgLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuICBmdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICAgIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgICA6IHZub2RlXG4gIH1cblxuICB2YXIgc2hvdyA9IHtcbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgICAgZWwsXG4gICAgICBiaW5kaW5nLFxuICAgICAgdm5vZGUsXG4gICAgICBvbGRWbm9kZSxcbiAgICAgIGlzRGVzdHJveVxuICAgICkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgICBtb2RlbDogZGlyZWN0aXZlLFxuICAgIHNob3c6IHNob3dcbiAgfTtcblxuICAvKiAgKi9cblxuICB2YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICBhcHBlYXI6IEJvb2xlYW4sXG4gICAgY3NzOiBCb29sZWFuLFxuICAgIG1vZGU6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW50ZXJDbGFzczogU3RyaW5nLFxuICAgIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gICAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxuICB9O1xuXG4gIC8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuICAvLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuICBmdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuICAgIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgICAvLyBwcm9wc1xuICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICAgIH1cbiAgICAvLyBldmVudHMuXG4gICAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gICAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gICAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gICAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG4gIH1cblxuICB2YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbiAgdmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbiAgdmFyIFRyYW5zaXRpb24gPSB7XG4gICAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICAgIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgICBpZiAobW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICAgKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfVxuXG4gICAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgICAvLyBtYXJrIHYtc2hvd1xuICAgICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgICApIHtcbiAgICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgICB0YWc6IFN0cmluZyxcbiAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xuICB9LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gIGRlbGV0ZSBwcm9wcy5tb2RlO1xuXG4gIHZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gICAgcHJvcHM6IHByb3BzLFxuXG4gICAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgICB9LFxuXG4gICAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgICB9XG4gICAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgICAgYy5lbG0uX21vdmVDYigpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gICAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gICAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gICAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgICBpZiAoZHggfHwgZHkpIHtcbiAgICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxuICB9O1xuXG4gIC8qICAqL1xuXG4gIC8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcbiAgVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuICBWdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuICBWdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG4gIFZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuICBWdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4gIC8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuICBleHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbiAgLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuICBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuICAvLyBwdWJsaWMgbW91bnQgbWV0aG9kXG4gIFZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICAgIGVsLFxuICAgIGh5ZHJhdGluZ1xuICApIHtcbiAgICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbiAgfTtcblxuICAvLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sIDApO1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXHI/XFxuKSs/KVxcfVxcfS9nO1xuICB2YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbiAgdmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gICAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxuICB9KTtcblxuXG5cbiAgZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgICB0ZXh0LFxuICAgIGRlbGltaXRlcnNcbiAgKSB7XG4gICAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7XG4gICAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHRva2VucyA9IFtdO1xuICAgIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbWF0Y2gsIGluZGV4LCB0b2tlblZhbHVlO1xuICAgIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTtcbiAgICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgICAgfVxuICAgICAgLy8gdGFnIHRva2VuXG4gICAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgICByYXdUb2tlbnMucHVzaCh7ICdAYmluZGluZyc6IGV4cCB9KTtcbiAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCkpO1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICAgIHRva2VuczogcmF3VG9rZW5zXG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydjbGFzcyddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGF0aWNDbGFzcykge1xuICAgICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gICAgfVxuICAgIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgICB2YXIgZGF0YSA9ICcnO1xuICAgIGlmIChlbC5zdGF0aWNDbGFzcykge1xuICAgICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICAgIH1cbiAgICBpZiAoZWwuY2xhc3NCaW5kaW5nKSB7XG4gICAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgdmFyIGtsYXNzJDEgPSB7XG4gICAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuICAgIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gICAgZ2VuRGF0YTogZ2VuRGF0YVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY1N0eWxlLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJyxcbiAgICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzdHlsZSddXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWwuc3RhdGljU3R5bGUgPSBKU09OLnN0cmluZ2lmeShwYXJzZVN0eWxlVGV4dChzdGF0aWNTdHlsZSkpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgICBpZiAoc3R5bGVCaW5kaW5nKSB7XG4gICAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICAgIHZhciBkYXRhID0gJyc7XG4gICAgaWYgKGVsLnN0YXRpY1N0eWxlKSB7XG4gICAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gICAgfVxuICAgIGlmIChlbC5zdHlsZUJpbmRpbmcpIHtcbiAgICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIHZhciBzdHlsZSQxID0ge1xuICAgIHN0YXRpY0tleXM6IFsnc3RhdGljU3R5bGUnXSxcbiAgICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gICAgZ2VuRGF0YTogZ2VuRGF0YSQxXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIGRlY29kZXI7XG5cbiAgdmFyIGhlID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gICAgICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG4gICAgfVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJ1xuICApO1xuXG4gIC8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuICAvLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG4gIHZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSdcbiAgKTtcblxuICAvLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4gIC8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxuICB2YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAgICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAgICd0aXRsZSx0cix0cmFjaydcbiAgKTtcblxuICAvKipcbiAgICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gICAqL1xuXG4gIC8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlID0gL15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG4gIHZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xuICB2YXIgbmNuYW1lID0gXCJbYS16QS1aX11bXFxcXC1cXFxcLjAtOV9hLXpBLVpcIiArIHVuaWNvZGVMZXR0ZXJzICsgXCJdKlwiO1xuICB2YXIgcW5hbWVDYXB0dXJlID0gXCIoKD86XCIgKyBuY25hbWUgKyBcIlxcXFw6KT9cIiArIG5jbmFtZSArIFwiKVwiO1xuICB2YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoXCJePFwiICsgcW5hbWVDYXB0dXJlKSk7XG4gIHZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG4gIHZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKChcIl48XFxcXC9cIiArIHFuYW1lQ2FwdHVyZSArIFwiW14+XSo+XCIpKTtcbiAgdmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbiAgLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxuICB2YXIgY29tbWVudCA9IC9ePCFcXC0tLztcbiAgdmFyIGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG4gIC8vIFNwZWNpYWwgRWxlbWVudHMgKGNhbiBjb250YWluIGFueXRoaW5nKVxuICB2YXIgaXNQbGFpblRleHRFbGVtZW50ID0gbWFrZU1hcCgnc2NyaXB0LHN0eWxlLHRleHRhcmVhJywgdHJ1ZSk7XG4gIHZhciByZUNhY2hlID0ge307XG5cbiAgdmFyIGRlY29kaW5nTWFwID0ge1xuICAgICcmbHQ7JzogJzwnLFxuICAgICcmZ3Q7JzogJz4nLFxuICAgICcmcXVvdDsnOiAnXCInLFxuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJiMxMDsnOiAnXFxuJyxcbiAgICAnJiM5Oyc6ICdcXHQnLFxuICAgICcmIzM5Oyc6IFwiJ1wiXG4gIH07XG4gIHZhciBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbiAgdmFyIGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMzl8IzEwfCM5KTsvZztcblxuICAvLyAjNTk5MlxuICB2YXIgaXNJZ25vcmVOZXdsaW5lVGFnID0gbWFrZU1hcCgncHJlLHRleHRhcmVhJywgdHJ1ZSk7XG4gIHZhciBzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUgPSBmdW5jdGlvbiAodGFnLCBodG1sKSB7IHJldHVybiB0YWcgJiYgaXNJZ25vcmVOZXdsaW5lVGFnKHRhZykgJiYgaHRtbFswXSA9PT0gJ1xcbic7IH07XG5cbiAgZnVuY3Rpb24gZGVjb2RlQXR0ciAodmFsdWUsIHNob3VsZERlY29kZU5ld2xpbmVzKSB7XG4gICAgdmFyIHJlID0gc2hvdWxkRGVjb2RlTmV3bGluZXMgPyBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA6IGVuY29kZWRBdHRyO1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlLCBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIGRlY29kaW5nTWFwW21hdGNoXTsgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIHZhciBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICAgIHZhciBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICAgIHZhciBjYW5CZUxlZnRPcGVuVGFnJCQxID0gb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnIHx8IG5vO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxhc3QsIGxhc3RUYWc7XG4gICAgd2hpbGUgKGh0bWwpIHtcbiAgICAgIGxhc3QgPSBodG1sO1xuICAgICAgLy8gTWFrZSBzdXJlIHdlJ3JlIG5vdCBpbiBhIHBsYWludGV4dCBjb250ZW50IGVsZW1lbnQgbGlrZSBzY3JpcHQvc3R5bGVcbiAgICAgIGlmICghbGFzdFRhZyB8fCAhaXNQbGFpblRleHRFbGVtZW50KGxhc3RUYWcpKSB7XG4gICAgICAgIHZhciB0ZXh0RW5kID0gaHRtbC5pbmRleE9mKCc8Jyk7XG4gICAgICAgIGlmICh0ZXh0RW5kID09PSAwKSB7XG4gICAgICAgICAgLy8gQ29tbWVudDpcbiAgICAgICAgICBpZiAoY29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICB2YXIgY29tbWVudEVuZCA9IGh0bWwuaW5kZXhPZignLS0+Jyk7XG5cbiAgICAgICAgICAgIGlmIChjb21tZW50RW5kID49IDApIHtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgY29tbWVudEVuZCksIGluZGV4LCBpbmRleCArIGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbmRpdGlvbmFsX2NvbW1lbnQjRG93bmxldmVsLXJldmVhbGVkX2NvbmRpdGlvbmFsX2NvbW1lbnRcbiAgICAgICAgICBpZiAoY29uZGl0aW9uYWxDb21tZW50LnRlc3QoaHRtbCkpIHtcbiAgICAgICAgICAgIHZhciBjb25kaXRpb25hbEVuZCA9IGh0bWwuaW5kZXhPZignXT4nKTtcblxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgICAgYWR2YW5jZShjb25kaXRpb25hbEVuZCArIDIpO1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIERvY3R5cGU6XG4gICAgICAgICAgdmFyIGRvY3R5cGVNYXRjaCA9IGh0bWwubWF0Y2goZG9jdHlwZSk7XG4gICAgICAgICAgaWYgKGRvY3R5cGVNYXRjaCkge1xuICAgICAgICAgICAgYWR2YW5jZShkb2N0eXBlTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRW5kIHRhZzpcbiAgICAgICAgICB2YXIgZW5kVGFnTWF0Y2ggPSBodG1sLm1hdGNoKGVuZFRhZyk7XG4gICAgICAgICAgaWYgKGVuZFRhZ01hdGNoKSB7XG4gICAgICAgICAgICB2YXIgY3VySW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIHBhcnNlRW5kVGFnKGVuZFRhZ01hdGNoWzFdLCBjdXJJbmRleCwgaW5kZXgpO1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTdGFydCB0YWc6XG4gICAgICAgICAgdmFyIHN0YXJ0VGFnTWF0Y2ggPSBwYXJzZVN0YXJ0VGFnKCk7XG4gICAgICAgICAgaWYgKHN0YXJ0VGFnTWF0Y2gpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpO1xuICAgICAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFydFRhZ01hdGNoLnRhZ05hbWUsIGh0bWwpKSB7XG4gICAgICAgICAgICAgIGFkdmFuY2UoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0ZXh0ID0gKHZvaWQgMCksIHJlc3QgPSAodm9pZCAwKSwgbmV4dCA9ICh2b2lkIDApO1xuICAgICAgICBpZiAodGV4dEVuZCA+PSAwKSB7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICAgIWVuZFRhZy50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgICAhc3RhcnRUYWdPcGVuLnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAgICFjb21tZW50LnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAgICFjb25kaXRpb25hbENvbW1lbnQudGVzdChyZXN0KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gPCBpbiBwbGFpbiB0ZXh0LCBiZSBmb3JnaXZpbmcgYW5kIHRyZWF0IGl0IGFzIHRleHRcbiAgICAgICAgICAgIG5leHQgPSByZXN0LmluZGV4T2YoJzwnLCAxKTtcbiAgICAgICAgICAgIGlmIChuZXh0IDwgMCkgeyBicmVhayB9XG4gICAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgICByZXN0ID0gaHRtbC5zbGljZSh0ZXh0RW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRleHRFbmQgPCAwKSB7XG4gICAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgIGFkdmFuY2UodGV4dC5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnMgJiYgdGV4dCkge1xuICAgICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCwgaW5kZXggLSB0ZXh0Lmxlbmd0aCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciByZVN0YWNrZWRUYWcgPSByZUNhY2hlW3N0YWNrZWRUYWddIHx8IChyZUNhY2hlW3N0YWNrZWRUYWddID0gbmV3IFJlZ0V4cCgnKFtcXFxcc1xcXFxTXSo/KSg8LycgKyBzdGFja2VkVGFnICsgJ1tePl0qPiknLCAnaScpKTtcbiAgICAgICAgdmFyIHJlc3QkMSA9IGh0bWwucmVwbGFjZShyZVN0YWNrZWRUYWcsIGZ1bmN0aW9uIChhbGwsIHRleHQsIGVuZFRhZykge1xuICAgICAgICAgIGVuZFRhZ0xlbmd0aCA9IGVuZFRhZy5sZW5ndGg7XG4gICAgICAgICAgaWYgKCFpc1BsYWluVGV4dEVsZW1lbnQoc3RhY2tlZFRhZykgJiYgc3RhY2tlZFRhZyAhPT0gJ25vc2NyaXB0Jykge1xuICAgICAgICAgICAgdGV4dCA9IHRleHRcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFwtLShbXFxzXFxTXSo/KS0tPi9nLCAnJDEnKSAvLyAjNzI5OFxuICAgICAgICAgICAgICAucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLCAnJDEnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNob3VsZElnbm9yZUZpcnN0TmV3bGluZShzdGFja2VkVGFnLCB0ZXh0KSkge1xuICAgICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRpb25zLmNoYXJzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfSk7XG4gICAgICAgIGluZGV4ICs9IGh0bWwubGVuZ3RoIC0gcmVzdCQxLmxlbmd0aDtcbiAgICAgICAgaHRtbCA9IHJlc3QkMTtcbiAgICAgICAgcGFyc2VFbmRUYWcoc3RhY2tlZFRhZywgaW5kZXggLSBlbmRUYWdMZW5ndGgsIGluZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGh0bWwgPT09IGxhc3QpIHtcbiAgICAgICAgb3B0aW9ucy5jaGFycyAmJiBvcHRpb25zLmNoYXJzKGh0bWwpO1xuICAgICAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBvcHRpb25zLndhcm4pIHtcbiAgICAgICAgICBvcHRpb25zLndhcm4oKFwiTWFsLWZvcm1hdHRlZCB0YWcgYXQgZW5kIG9mIHRlbXBsYXRlOiBcXFwiXCIgKyBodG1sICsgXCJcXFwiXCIpLCB7IHN0YXJ0OiBpbmRleCArIGh0bWwubGVuZ3RoIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgYW55IHJlbWFpbmluZyB0YWdzXG4gICAgcGFyc2VFbmRUYWcoKTtcblxuICAgIGZ1bmN0aW9uIGFkdmFuY2UgKG4pIHtcbiAgICAgIGluZGV4ICs9IG47XG4gICAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VTdGFydFRhZyAoKSB7XG4gICAgICB2YXIgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgICBpZiAoc3RhcnQpIHtcbiAgICAgICAgdmFyIG1hdGNoID0ge1xuICAgICAgICAgIHRhZ05hbWU6IHN0YXJ0WzFdLFxuICAgICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgICBzdGFydDogaW5kZXhcbiAgICAgICAgfTtcbiAgICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgICB2YXIgZW5kLCBhdHRyO1xuICAgICAgICB3aGlsZSAoIShlbmQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnQ2xvc2UpKSAmJiAoYXR0ciA9IGh0bWwubWF0Y2goZHluYW1pY0FyZ0F0dHJpYnV0ZSkgfHwgaHRtbC5tYXRjaChhdHRyaWJ1dGUpKSkge1xuICAgICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgICBhZHZhbmNlKGF0dHJbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBhdHRyLmVuZCA9IGluZGV4O1xuICAgICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgICAgYWR2YW5jZShlbmRbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBtYXRjaC5lbmQgPSBpbmRleDtcbiAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0YXJ0VGFnIChtYXRjaCkge1xuICAgICAgdmFyIHRhZ05hbWUgPSBtYXRjaC50YWdOYW1lO1xuICAgICAgdmFyIHVuYXJ5U2xhc2ggPSBtYXRjaC51bmFyeVNsYXNoO1xuXG4gICAgICBpZiAoZXhwZWN0SFRNTCkge1xuICAgICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhsYXN0VGFnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyQkMSh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgICAgcGFyc2VFbmRUYWcodGFnTmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICAgIHZhciBsID0gbWF0Y2guYXR0cnMubGVuZ3RoO1xuICAgICAgdmFyIGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBtYXRjaC5hdHRyc1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJnc1szXSB8fCBhcmdzWzRdIHx8IGFyZ3NbNV0gfHwgJyc7XG4gICAgICAgIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IHRhZ05hbWUgPT09ICdhJyAmJiBhcmdzWzFdID09PSAnaHJlZidcbiAgICAgICAgICA/IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmXG4gICAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgICBhdHRyc1tpXSA9IHtcbiAgICAgICAgICBuYW1lOiBhcmdzWzFdLFxuICAgICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGFyZ3Muc3RhcnQgKyBhcmdzWzBdLm1hdGNoKC9eXFxzKi8pLmxlbmd0aDtcbiAgICAgICAgICBhdHRyc1tpXS5lbmQgPSBhcmdzLmVuZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICAgIHN0YWNrLnB1c2goeyB0YWc6IHRhZ05hbWUsIGxvd2VyQ2FzZWRUYWc6IHRhZ05hbWUudG9Mb3dlckNhc2UoKSwgYXR0cnM6IGF0dHJzLCBzdGFydDogbWF0Y2guc3RhcnQsIGVuZDogbWF0Y2guZW5kIH0pO1xuICAgICAgICBsYXN0VGFnID0gdGFnTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBhdHRycywgdW5hcnksIG1hdGNoLnN0YXJ0LCBtYXRjaC5lbmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlRW5kVGFnICh0YWdOYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgcG9zLCBsb3dlckNhc2VkVGFnTmFtZTtcbiAgICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHN0YXJ0ID0gaW5kZXg7IH1cbiAgICAgIGlmIChlbmQgPT0gbnVsbCkgeyBlbmQgPSBpbmRleDsgfVxuXG4gICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgICAgbG93ZXJDYXNlZFRhZ05hbWUgPSB0YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zID49IDA7IHBvcy0tKSB7XG4gICAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBubyB0YWcgbmFtZSBpcyBwcm92aWRlZCwgY2xlYW4gc2hvcFxuICAgICAgICBwb3MgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAocG9zID49IDApIHtcbiAgICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YWNrLmxlbmd0aCAtIDE7IGkgPj0gcG9zOyBpLS0pIHtcbiAgICAgICAgICBpZiAoaSA+IHBvcyB8fCAhdGFnTmFtZSAmJlxuICAgICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBvcHRpb25zLndhcm4oXG4gICAgICAgICAgICAgIChcInRhZyA8XCIgKyAoc3RhY2tbaV0udGFnKSArIFwiPiBoYXMgbm8gbWF0Y2hpbmcgZW5kIHRhZy5cIiksXG4gICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YWNrW2ldLnN0YXJ0IH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgICAgb3B0aW9ucy5lbmQoc3RhY2tbaV0udGFnLCBzdGFydCwgZW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIG9wZW4gZWxlbWVudHMgZnJvbSB0aGUgc3RhY2tcbiAgICAgICAgc3RhY2subGVuZ3RoID0gcG9zO1xuICAgICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICAgIH0gZWxzZSBpZiAobG93ZXJDYXNlZFRhZ05hbWUgPT09ICdicicpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ3AnKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBbXSwgZmFsc2UsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHRhZ05hbWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIG9uUkUgPSAvXkB8XnYtb246LztcbiAgdmFyIGRpclJFID0gL152LXxeQHxeOi87XG4gIHZhciBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xuICB2YXIgZm9ySXRlcmF0b3JSRSA9IC8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLztcbiAgdmFyIHN0cmlwUGFyZW5zUkUgPSAvXlxcKHxcXCkkL2c7XG4gIHZhciBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbiAgdmFyIGFyZ1JFID0gLzooLiopJC87XG4gIHZhciBiaW5kUkUgPSAvXjp8XlxcLnxedi1iaW5kOi87XG4gIHZhciBtb2RpZmllclJFID0gL1xcLlteLl0rL2c7XG5cbiAgdmFyIHNsb3RSRSA9IC9edi1zbG90KDp8JCl8XiMvO1xuXG4gIHZhciBsaW5lQnJlYWtSRSA9IC9bXFxyXFxuXS87XG4gIHZhciB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbiAgdmFyIGludmFsaWRBdHRyaWJ1dGVSRSA9IC9bXFxzXCInPD5cXC89XS87XG5cbiAgdmFyIGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoaGUuZGVjb2RlKTtcblxuICB2YXIgZW1wdHlTbG90U2NvcGVUb2tlbiA9IFwiX2VtcHR5X1wiO1xuXG4gIC8vIGNvbmZpZ3VyYWJsZSBzdGF0ZVxuICB2YXIgd2FybiQyO1xuICB2YXIgZGVsaW1pdGVycztcbiAgdmFyIHRyYW5zZm9ybXM7XG4gIHZhciBwcmVUcmFuc2Zvcm1zO1xuICB2YXIgcG9zdFRyYW5zZm9ybXM7XG4gIHZhciBwbGF0Zm9ybUlzUHJlVGFnO1xuICB2YXIgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbiAgdmFyIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlO1xuICB2YXIgbWF5YmVDb21wb25lbnQ7XG5cbiAgZnVuY3Rpb24gY3JlYXRlQVNURWxlbWVudCAoXG4gICAgdGFnLFxuICAgIGF0dHJzLFxuICAgIHBhcmVudFxuICApIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogMSxcbiAgICAgIHRhZzogdGFnLFxuICAgICAgYXR0cnNMaXN0OiBhdHRycyxcbiAgICAgIGF0dHJzTWFwOiBtYWtlQXR0cnNNYXAoYXR0cnMpLFxuICAgICAgcmF3QXR0cnNNYXA6IHt9LFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZSAoXG4gICAgdGVtcGxhdGUsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB3YXJuJDIgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgICBwbGF0Zm9ybUlzUHJlVGFnID0gb3B0aW9ucy5pc1ByZVRhZyB8fCBubztcbiAgICBwbGF0Zm9ybU11c3RVc2VQcm9wID0gb3B0aW9ucy5tdXN0VXNlUHJvcCB8fCBubztcbiAgICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICAgIHZhciBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAgIG1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuXG4gICAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICAgIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTtcblxuICAgIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgcHJlc2VydmVXaGl0ZXNwYWNlID0gb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IGZhbHNlO1xuICAgIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICAgIHZhciByb290O1xuICAgIHZhciBjdXJyZW50UGFyZW50O1xuICAgIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgICB2YXIgd2FybmVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgd2FybiQyKG1zZywgcmFuZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG4gICAgICBpZiAoIWluVlByZSAmJiAhZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gXCIgK1xuICAgICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCIsXG4gICAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICAgIHByb2Nlc3NJZkNvbmRpdGlvbnMoZWxlbWVudCwgY3VycmVudFBhcmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgICAvLyBmaW5kIGl0IGFzIHRoZSBwcmV2IG5vZGUuXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnXCJkZWZhdWx0XCInXG4gICAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgICAgZWxlbWVudC5jaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiAhKGMpLnNsb3RTY29wZTsgfSk7XG4gICAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcblxuICAgICAgLy8gY2hlY2sgcHJlIHN0YXRlXG4gICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwb3N0VHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmltRW5kaW5nV2hpdGVzcGFjZSAoZWwpIHtcbiAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICAgIGlmICghaW5QcmUpIHtcbiAgICAgICAgdmFyIGxhc3ROb2RlO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgICAgbGFzdE5vZGUudHlwZSA9PT0gMyAmJlxuICAgICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgICApIHtcbiAgICAgICAgICBlbC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXMuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzLicsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICAgIHdhcm46IHdhcm4kMixcbiAgICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICAgIGNhbkJlTGVmdE9wZW5UYWc6IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyxcbiAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgIHNob3VsZEtlZXBDb21tZW50OiBvcHRpb25zLmNvbW1lbnRzLFxuICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxKSB7XG4gICAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgICAgLy8gaW5oZXJpdCBwYXJlbnQgbnMgaWYgdGhlcmUgaXMgb25lXG4gICAgICAgIHZhciBucyA9IChjdXJyZW50UGFyZW50ICYmIGN1cnJlbnRQYXJlbnQubnMpIHx8IHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlKHRhZyk7XG5cbiAgICAgICAgLy8gaGFuZGxlIElFIHN2ZyBidWdcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFICYmIG5zID09PSAnc3ZnJykge1xuICAgICAgICAgIGF0dHJzID0gZ3VhcmRJRVNWR0J1ZyhhdHRycyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWxlbWVudCA9IGNyZWF0ZUFTVEVsZW1lbnQodGFnLCBhdHRycywgY3VycmVudFBhcmVudCk7XG4gICAgICAgIGlmIChucykge1xuICAgICAgICAgIGVsZW1lbnQubnMgPSBucztcbiAgICAgICAgfVxuXG4gICAgICAgIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdGFydCA9IHN0YXJ0JDE7XG4gICAgICAgICAgICBlbGVtZW50LnJhd0F0dHJzTWFwID0gZWxlbWVudC5hdHRyc0xpc3QucmVkdWNlKGZ1bmN0aW9uIChjdW11bGF0ZWQsIGF0dHIpIHtcbiAgICAgICAgICAgICAgY3VtdWxhdGVkW2F0dHIubmFtZV0gPSBhdHRyO1xuICAgICAgICAgICAgICByZXR1cm4gY3VtdWxhdGVkXG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICAgIGlmIChpbnZhbGlkQXR0cmlidXRlUkUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgICBcIkludmFsaWQgZHluYW1pYyBhcmd1bWVudCBleHByZXNzaW9uOiBhdHRyaWJ1dGUgbmFtZXMgY2Fubm90IGNvbnRhaW4gXCIgK1xuICAgICAgICAgICAgICAgIFwic3BhY2VzLCBxdW90ZXMsIDwsID4sIC8gb3IgPS5cIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGFydDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5pbmRleE9mKFwiW1wiKSxcbiAgICAgICAgICAgICAgICAgIGVuZDogYXR0ci5zdGFydCArIGF0dHIubmFtZS5sZW5ndGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGb3JiaWRkZW5UYWcoZWxlbWVudCkgJiYgIWlzU2VydmVyUmVuZGVyaW5nKCkpIHtcbiAgICAgICAgICBlbGVtZW50LmZvcmJpZGRlbiA9IHRydWU7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgJ1RlbXBsYXRlcyBzaG91bGQgb25seSBiZSByZXNwb25zaWJsZSBmb3IgbWFwcGluZyB0aGUgc3RhdGUgdG8gdGhlICcgK1xuICAgICAgICAgICAgJ1VJLiBBdm9pZCBwbGFjaW5nIHRhZ3Mgd2l0aCBzaWRlLWVmZmVjdHMgaW4geW91ciB0ZW1wbGF0ZXMsIHN1Y2ggYXMgJyArXG4gICAgICAgICAgICBcIjxcIiArIHRhZyArIFwiPlwiICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhcHBseSBwcmUtdHJhbnNmb3Jtc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByZVRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpblZQcmUpIHtcbiAgICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICAgIGlmIChlbGVtZW50LnByZSkge1xuICAgICAgICAgICAgaW5WUHJlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYXRmb3JtSXNQcmVUYWcoZWxlbWVudC50YWcpKSB7XG4gICAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpblZQcmUpIHtcbiAgICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICAgICAgLy8gc3RydWN0dXJhbCBkaXJlY3RpdmVzXG4gICAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgICBwcm9jZXNzSWYoZWxlbWVudCk7XG4gICAgICAgICAgcHJvY2Vzc09uY2UoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJvb3QpIHtcbiAgICAgICAgICByb290ID0gZWxlbWVudDtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGVja1Jvb3RDb25zdHJhaW50cyhyb290KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVuYXJ5KSB7XG4gICAgICAgICAgY3VycmVudFBhcmVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGVuZDogZnVuY3Rpb24gZW5kICh0YWcsIHN0YXJ0LCBlbmQkMSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgICAvLyBwb3Agc3RhY2tcbiAgICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICAgIGN1cnJlbnRQYXJlbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBlbGVtZW50LmVuZCA9IGVuZCQxO1xuICAgICAgICB9XG4gICAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH0sXG5cbiAgICAgIGNoYXJzOiBmdW5jdGlvbiBjaGFycyAodGV4dCwgc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAoIWN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGV4dCA9PT0gdGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgodGV4dCA9IHRleHQudHJpbSgpKSkge1xuICAgICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgICAoXCJ0ZXh0IFxcXCJcIiArIHRleHQgKyBcIlxcXCIgb3V0c2lkZSByb290IGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkLlwiKSxcbiAgICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFydCB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIC8vIElFIHRleHRhcmVhIHBsYWNlaG9sZGVyIGJ1Z1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUUgJiZcbiAgICAgICAgICBjdXJyZW50UGFyZW50LnRhZyA9PT0gJ3RleHRhcmVhJyAmJlxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuYXR0cnNNYXAucGxhY2Vob2xkZXIgPT09IHRleHRcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkcmVuID0gY3VycmVudFBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgICAgdGV4dCA9IGlzVGV4dFRhZyhjdXJyZW50UGFyZW50KSA/IHRleHQgOiBkZWNvZGVIVE1MQ2FjaGVkKHRleHQpO1xuICAgICAgICB9IGVsc2UgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgICAgdGV4dCA9ICcnO1xuICAgICAgICB9IGVsc2UgaWYgKHdoaXRlc3BhY2VPcHRpb24pIHtcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgICAgLy8gaW4gY29uZGVuc2UgbW9kZSwgcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlIG5vZGUgaWYgaXQgY29udGFpbnNcbiAgICAgICAgICAgIC8vIGxpbmUgYnJlYWssIG90aGVyd2lzZSBjb25kZW5zZSB0byBhIHNpbmdsZSBzcGFjZVxuICAgICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dCA9ICcgJztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCA9IHByZXNlcnZlV2hpdGVzcGFjZSA/ICcgJyA6ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgICAgaWYgKHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAgIC8vIGNvbmRlbnNlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2VzIGludG8gc2luZ2xlIHNwYWNlXG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHdoaXRlc3BhY2VSRSQxLCAnICcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVzO1xuICAgICAgICAgIHZhciBjaGlsZDtcbiAgICAgICAgICBpZiAoIWluVlByZSAmJiB0ZXh0ICE9PSAnICcgJiYgKHJlcyA9IHBhcnNlVGV4dCh0ZXh0LCBkZWxpbWl0ZXJzKSkpIHtcbiAgICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgICB0eXBlOiAyLFxuICAgICAgICAgICAgICBleHByZXNzaW9uOiByZXMuZXhwcmVzc2lvbixcbiAgICAgICAgICAgICAgdG9rZW5zOiByZXMudG9rZW5zLFxuICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8ICFjaGlsZHJlbi5sZW5ndGggfHwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHtcbiAgICAgICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgICBjaGlsZC5zdGFydCA9IHN0YXJ0O1xuICAgICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjb21tZW50OiBmdW5jdGlvbiBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAgIC8vIGFkZGluZyBhbnl0aW5nIGFzIGEgc2libGluZyB0byB0aGUgcm9vdCBub2RlIGlzIGZvcmJpZGRlblxuICAgICAgICAvLyBjb21tZW50cyBzaG91bGQgc3RpbGwgYmUgYWxsb3dlZCwgYnV0IGlnbm9yZWRcbiAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcm9vdFxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtcHJlJykgIT0gbnVsbCkge1xuICAgICAgZWwucHJlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICAgIGlmIChsZW4pIHtcbiAgICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkobGlzdFtpXS52YWx1ZSlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gbGlzdFtpXS5zdGFydDtcbiAgICAgICAgICBhdHRyc1tpXS5lbmQgPSBsaXN0W2ldLmVuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgICAgZWwucGxhaW4gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50IChcbiAgICBlbGVtZW50LFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgcHJvY2Vzc0tleShlbGVtZW50KTtcblxuICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gICAgLy8gcmVtb3Zpbmcgc3RydWN0dXJhbCBhdHRyaWJ1dGVzXG4gICAgZWxlbWVudC5wbGFpbiA9IChcbiAgICAgICFlbGVtZW50LmtleSAmJlxuICAgICAgIWVsZW1lbnQuc2NvcGVkU2xvdHMgJiZcbiAgICAgICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGhcbiAgICApO1xuXG4gICAgcHJvY2Vzc1JlZihlbGVtZW50KTtcbiAgICBwcm9jZXNzU2xvdENvbnRlbnQoZWxlbWVudCk7XG4gICAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gICAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgfVxuICAgIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgICByZXR1cm4gZWxlbWVudFxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgICBpZiAoZXhwKSB7XG4gICAgICB7XG4gICAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbC5mb3IpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxO1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yICYmIGl0ZXJhdG9yID09PSBleHAgJiYgcGFyZW50ICYmIHBhcmVudC50YWcgPT09ICd0cmFuc2l0aW9uLWdyb3VwJykge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgICBcInRoaXMgaXMgdGhlIHNhbWUgYXMgbm90IHVzaW5nIGtleXMuXCIsXG4gICAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JyksXG4gICAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWwua2V5ID0gZXhwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG4gICAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gICAgaWYgKHJlZikge1xuICAgICAgZWwucmVmID0gcmVmO1xuICAgICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICAgIHZhciBleHA7XG4gICAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICBleHRlbmQoZWwsIHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG5cbiAgZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICAgIHZhciBpbk1hdGNoID0gZXhwLm1hdGNoKGZvckFsaWFzUkUpO1xuICAgIGlmICghaW5NYXRjaCkgeyByZXR1cm4gfVxuICAgIHZhciByZXMgPSB7fTtcbiAgICByZXMuZm9yID0gaW5NYXRjaFsyXS50cmltKCk7XG4gICAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCAnJyk7XG4gICAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgICAgcmVzLmFsaWFzID0gYWxpYXMucmVwbGFjZShmb3JJdGVyYXRvclJFLCAnJykudHJpbSgpO1xuICAgICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgICAgcmVzLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXMuYWxpYXMgPSBhbGlhcztcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICAgIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuICAgIGlmIChleHApIHtcbiAgICAgIGVsLmlmID0gZXhwO1xuICAgICAgYWRkSWZDb25kaXRpb24oZWwsIHtcbiAgICAgICAgZXhwOiBleHAsXG4gICAgICAgIGJsb2NrOiBlbFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgICBlbC5lbHNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgICBpZiAoZWxzZWlmKSB7XG4gICAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gICAgdmFyIHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgICBibG9jazogZWxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidi1cIiArIChlbC5lbHNlaWYgPyAoJ2Vsc2UtaWY9XCInICsgZWwuZWxzZWlmICsgJ1wiJykgOiAnZWxzZScpICsgXCIgXCIgK1xuICAgICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICAgIHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgICBjaGlsZHJlbltpXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgICAgZWwuaWZDb25kaXRpb25zID0gW107XG4gICAgfVxuICAgIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgICBpZiAob25jZSQkMSAhPSBudWxsKSB7XG4gICAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbiAgLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG4gIGZ1bmN0aW9uIHByb2Nlc3NTbG90Q29udGVudCAoZWwpIHtcbiAgICB2YXIgc2xvdFNjb3BlO1xuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzY29wZScpO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoc2xvdFNjb3BlKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcInRoZSBcXFwic2NvcGVcXFwiIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIHNsb3RzIGhhdmUgYmVlbiBkZXByZWNhdGVkIGFuZCBcIiArXG4gICAgICAgICAgXCJyZXBsYWNlZCBieSBcXFwic2xvdC1zY29wZVxcXCIgc2luY2UgMi41LiBUaGUgbmV3IFxcXCJzbG90LXNjb3BlXFxcIiBhdHRyaWJ1dGUgXCIgK1xuICAgICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgICBcImRlbm90ZSBzY29wZWQgc2xvdHMuXCIsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Njb3BlJ10sXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gICAgfSBlbHNlIGlmICgoc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKSkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGVsLmF0dHJzTWFwWyd2LWZvciddKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIkFtYmlndW91cyBjb21iaW5lZCB1c2FnZSBvZiBzbG90LXNjb3BlIGFuZCB2LWZvciBvbiA8XCIgKyAoZWwudGFnKSArIFwiPiBcIiArXG4gICAgICAgICAgXCIodi1mb3IgdGFrZXMgaGlnaGVyIHByaW9yaXR5KS4gVXNlIGEgd3JhcHBlciA8dGVtcGxhdGU+IGZvciB0aGUgXCIgK1xuICAgICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzbG90LXNjb3BlJ10sXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICAgIH1cblxuICAgIC8vIHNsb3Q9XCJ4eHhcIlxuICAgIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gICAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcbiAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gISEoZWwuYXR0cnNNYXBbJzpzbG90J10gfHwgZWwuYXR0cnNNYXBbJ3YtYmluZDpzbG90J10pO1xuICAgICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgICAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90cy5cbiAgICAgIGlmIChlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICAgIHtcbiAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgICAgdmFyIHNsb3RCaW5kaW5nID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICAgIGlmIChzbG90QmluZGluZykge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChlbC5zbG90VGFyZ2V0IHx8IGVsLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwucGFyZW50ICYmICFtYXliZUNvbXBvbmVudChlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZSB2LXNsb3Q+IGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgcm9vdCBsZXZlbCBpbnNpZGUgXCIgK1xuICAgICAgICAgICAgICAgIFwidGhlIHJlY2VpdmluZyB0aGUgY29tcG9uZW50XCIsXG4gICAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlZiA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nKTtcbiAgICAgICAgICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuICAgICAgICAgIHZhciBkeW5hbWljID0gcmVmLmR5bmFtaWM7XG4gICAgICAgICAgZWwuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljO1xuICAgICAgICAgIGVsLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47IC8vIGZvcmNlIGl0IGludG8gYSBzY29wZWQgc2xvdCBmb3IgcGVyZlxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB2LXNsb3Qgb24gY29tcG9uZW50LCBkZW5vdGVzIGRlZmF1bHQgc2xvdFxuICAgICAgICB2YXIgc2xvdEJpbmRpbmckMSA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgICBpZiAoc2xvdEJpbmRpbmckMSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICghbWF5YmVDb21wb25lbnQoZWwpKSB7XG4gICAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgICBcInYtc2xvdCBjYW4gb25seSBiZSB1c2VkIG9uIGNvbXBvbmVudHMgb3IgPHRlbXBsYXRlPi5cIixcbiAgICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwuc2xvdFNjb3BlIHx8IGVsLnNsb3RUYXJnZXQpIHtcbiAgICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICAgIFwiVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5cIixcbiAgICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsLnNjb3BlZFNsb3RzKSB7XG4gICAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgICBcIlRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eSwgdGhlIGRlZmF1bHQgc2xvdCBzaG91bGQgYWxzbyB1c2UgXCIgK1xuICAgICAgICAgICAgICAgIFwiPHRlbXBsYXRlPiBzeW50YXggd2hlbiB0aGVyZSBhcmUgb3RoZXIgbmFtZWQgc2xvdHMuXCIsXG4gICAgICAgICAgICAgICAgc2xvdEJpbmRpbmckMVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCdzIGNoaWxkcmVuIHRvIGl0cyBkZWZhdWx0IHNsb3RcbiAgICAgICAgICB2YXIgc2xvdHMgPSBlbC5zY29wZWRTbG90cyB8fCAoZWwuc2NvcGVkU2xvdHMgPSB7fSk7XG4gICAgICAgICAgdmFyIHJlZiQxID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmckMSk7XG4gICAgICAgICAgdmFyIG5hbWUkMSA9IHJlZiQxLm5hbWU7XG4gICAgICAgICAgdmFyIGR5bmFtaWMkMSA9IHJlZiQxLmR5bmFtaWM7XG4gICAgICAgICAgdmFyIHNsb3RDb250YWluZXIgPSBzbG90c1tuYW1lJDFdID0gY3JlYXRlQVNURWxlbWVudCgndGVtcGxhdGUnLCBbXSwgZWwpO1xuICAgICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldCA9IG5hbWUkMTtcbiAgICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYyQxO1xuICAgICAgICAgIHNsb3RDb250YWluZXIuY2hpbGRyZW4gPSBlbC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIGlmICghYy5zbG90U2NvcGUpIHtcbiAgICAgICAgICAgICAgYy5wYXJlbnQgPSBzbG90Q29udGFpbmVyO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNsb3RDb250YWluZXIuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmckMS52YWx1ZSB8fCBlbXB0eVNsb3RTY29wZVRva2VuO1xuICAgICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBhcyB0aGV5IGFyZSByZXR1cm5lZCBmcm9tIHNjb3BlZFNsb3RzIG5vd1xuICAgICAgICAgIGVsLmNoaWxkcmVuID0gW107XG4gICAgICAgICAgLy8gbWFyayBlbCBub24tcGxhaW4gc28gZGF0YSBnZXRzIGdlbmVyYXRlZFxuICAgICAgICAgIGVsLnBsYWluID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTbG90TmFtZSAoYmluZGluZykge1xuICAgIHZhciBuYW1lID0gYmluZGluZy5uYW1lLnJlcGxhY2Uoc2xvdFJFLCAnJyk7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBpZiAoYmluZGluZy5uYW1lWzBdICE9PSAnIycpIHtcbiAgICAgICAgbmFtZSA9ICdkZWZhdWx0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcInYtc2xvdCBzaG9ydGhhbmQgc3ludGF4IHJlcXVpcmVzIGEgc2xvdCBuYW1lLlwiLFxuICAgICAgICAgIGJpbmRpbmdcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpXG4gICAgICAvLyBkeW5hbWljIFtuYW1lXVxuICAgICAgPyB7IG5hbWU6IG5hbWUuc2xpY2UoMSwgLTEpLCBkeW5hbWljOiB0cnVlIH1cbiAgICAgIC8vIHN0YXRpYyBuYW1lXG4gICAgICA6IHsgbmFtZTogKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSwgZHluYW1pYzogZmFsc2UgfVxuICB9XG5cbiAgLy8gaGFuZGxlIDxzbG90Lz4gb3V0bGV0c1xuICBmdW5jdGlvbiBwcm9jZXNzU2xvdE91dGxldCAoZWwpIHtcbiAgICBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgICBpZiAoZWwua2V5KSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcImBrZXlgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgXCIgK1xuICAgICAgICAgIFwiYW5kIGNhbiBwb3NzaWJseSBleHBhbmQgaW50byBtdWx0aXBsZSBlbGVtZW50cy4gXCIgK1xuICAgICAgICAgIFwiVXNlIHRoZSBrZXkgb24gYSB3cmFwcGluZyBlbGVtZW50IGluc3RlYWQuXCIsXG4gICAgICAgICAgZ2V0UmF3QmluZGluZ0F0dHIoZWwsICdrZXknKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gICAgdmFyIGJpbmRpbmc7XG4gICAgaWYgKChiaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdpcycpKSkge1xuICAgICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgICB9XG4gICAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICdpbmxpbmUtdGVtcGxhdGUnKSAhPSBudWxsKSB7XG4gICAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIHZhciBpLCBsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBzeW5jR2VuLCBpc0R5bmFtaWM7XG4gICAgZm9yIChpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICAgIHZhbHVlID0gbGlzdFtpXS52YWx1ZTtcbiAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICAgIGVsLmhhc0JpbmRpbmdzID0gdHJ1ZTtcbiAgICAgICAgLy8gbW9kaWZpZXJzXG4gICAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgICAgLy8gc3VwcG9ydCAuZm9vIHNob3J0aGFuZCBzeW50YXggZm9yIHRoZSAucHJvcCBtb2RpZmllclxuICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJpbmRSRS50ZXN0KG5hbWUpKSB7IC8vIHYtYmluZFxuICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgICAgdmFsdWUgPSBwYXJzZUZpbHRlcnModmFsdWUpO1xuICAgICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICAoXCJUaGUgdmFsdWUgZm9yIGEgdi1iaW5kIGV4cHJlc3Npb24gY2Fubm90IGJlIGVtcHR5LiBGb3VuZCBpbiBcXFwidi1iaW5kOlwiICsgbmFtZSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgICAgaWYgKG1vZGlmaWVycy5wcm9wICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpIHsgbmFtZSA9ICdpbm5lckhUTUwnOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLmNhbWVsICYmICFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycy5zeW5jKSB7XG4gICAgICAgICAgICAgIHN5bmNHZW4gPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgXCIkZXZlbnRcIik7XG4gICAgICAgICAgICAgIGlmICghaXNEeW5hbWljKSB7XG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwidXBkYXRlOlwiICsgKGNhbWVsaXplKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKGh5cGhlbmF0ZShuYW1lKSAhPT0gY2FtZWxpemUobmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoaHlwaGVuYXRlKG5hbWUpKSksXG4gICAgICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZXIgdy8gZHluYW1pYyBldmVudCBuYW1lXG4gICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICAgICAgKFwiXFxcInVwZGF0ZTpcXFwiKyhcIiArIG5hbWUgKyBcIilcIiksXG4gICAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgICAgbGlzdFtpXSxcbiAgICAgICAgICAgICAgICAgIHRydWUgLy8gZHluYW1pY1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChtb2RpZmllcnMgJiYgbW9kaWZpZXJzLnByb3ApIHx8IChcbiAgICAgICAgICAgICFlbC5jb21wb25lbnQgJiYgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpXG4gICAgICAgICAgKSkge1xuICAgICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIHZhbHVlLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHsgLy8gdi1vblxuICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uob25SRSwgJycpO1xuICAgICAgICAgIGlzRHluYW1pYyA9IGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpO1xuICAgICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkSGFuZGxlcihlbCwgbmFtZSwgdmFsdWUsIG1vZGlmaWVycywgZmFsc2UsIHdhcm4kMiwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbm9ybWFsIGRpcmVjdGl2ZXNcbiAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKGRpclJFLCAnJyk7XG4gICAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgICAgdmFyIGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgICAgdmFyIGFyZyA9IGFyZ01hdGNoICYmIGFyZ01hdGNoWzFdO1xuICAgICAgICAgIGlzRHluYW1pYyA9IGZhbHNlO1xuICAgICAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIC0oYXJnLmxlbmd0aCArIDEpKTtcbiAgICAgICAgICAgIGlmIChkeW5hbWljQXJnUkUudGVzdChhcmcpKSB7XG4gICAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgIGlzRHluYW1pYyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZERpcmVjdGl2ZShlbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIGFyZywgaXNEeW5hbWljLCBtb2RpZmllcnMsIGxpc3RbaV0pO1xuICAgICAgICAgIGlmIChuYW1lID09PSAnbW9kZWwnKSB7XG4gICAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGxpdGVyYWwgYXR0cmlidXRlXG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHZhbHVlLCBkZWxpbWl0ZXJzKTtcbiAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgaWQ9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDppZD1cInZhbFwiPi4nLFxuICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIGxpc3RbaV0pO1xuICAgICAgICAvLyAjNjg4NyBmaXJlZm94IGRvZXNuJ3QgdXBkYXRlIG11dGVkIHN0YXRlIGlmIHNldCB2aWEgYXR0cmlidXRlXG4gICAgICAgIC8vIGV2ZW4gaW1tZWRpYXRlbHkgYWZ0ZXIgZWxlbWVudCBjcmVhdGlvblxuICAgICAgICBpZiAoIWVsLmNvbXBvbmVudCAmJlxuICAgICAgICAgICAgbmFtZSA9PT0gJ211dGVkJyAmJlxuICAgICAgICAgICAgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpKSB7XG4gICAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgJ3RydWUnLCBsaXN0W2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrSW5Gb3IgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsO1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuZm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgICB2YXIgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgdmFyIHJldCA9IHt9O1xuICAgICAgbWF0Y2guZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYWtlQXR0cnNNYXAgKGF0dHJzKSB7XG4gICAgdmFyIG1hcCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoXG4gICAgICAgIG1hcFthdHRyc1tpXS5uYW1lXSAmJiAhaXNJRSAmJiAhaXNFZGdlXG4gICAgICApIHtcbiAgICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgICAgfVxuICAgICAgbWFwW2F0dHJzW2ldLm5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBtYXBcbiAgfVxuXG4gIC8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuICBmdW5jdGlvbiBpc1RleHRUYWcgKGVsKSB7XG4gICAgcmV0dXJuIGVsLnRhZyA9PT0gJ3NjcmlwdCcgfHwgZWwudGFnID09PSAnc3R5bGUnXG4gIH1cblxuICBmdW5jdGlvbiBpc0ZvcmJpZGRlblRhZyAoZWwpIHtcbiAgICByZXR1cm4gKFxuICAgICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgICAoZWwudGFnID09PSAnc2NyaXB0JyAmJiAoXG4gICAgICAgICFlbC5hdHRyc01hcC50eXBlIHx8XG4gICAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgICApKVxuICAgIClcbiAgfVxuXG4gIHZhciBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xuICB2YXIgaWVOU1ByZWZpeCA9IC9eTlNcXGQrOi87XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgZnVuY3Rpb24gZ3VhcmRJRVNWR0J1ZyAoYXR0cnMpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGF0dHIgPSBhdHRyc1tpXTtcbiAgICAgIGlmICghaWVOU0J1Zy50ZXN0KGF0dHIubmFtZSkpIHtcbiAgICAgICAgYXR0ci5uYW1lID0gYXR0ci5uYW1lLnJlcGxhY2UoaWVOU1ByZWZpeCwgJycpO1xuICAgICAgICByZXMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tGb3JBbGlhc01vZGVsIChlbCwgdmFsdWUpIHtcbiAgICB2YXIgX2VsID0gZWw7XG4gICAgd2hpbGUgKF9lbCkge1xuICAgICAgaWYgKF9lbC5mb3IgJiYgX2VsLmFsaWFzID09PSB2YWx1ZSkge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtbW9kZWw9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCI+OiBcIiArXG4gICAgICAgICAgXCJZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gXCIgK1xuICAgICAgICAgIFwiVGhpcyB3aWxsIG5vdCBiZSBhYmxlIHRvIG1vZGlmeSB0aGUgdi1mb3Igc291cmNlIGFycmF5IGJlY2F1c2UgXCIgK1xuICAgICAgICAgIFwid3JpdGluZyB0byB0aGUgYWxpYXMgaXMgbGlrZSBtb2RpZnlpbmcgYSBmdW5jdGlvbiBsb2NhbCB2YXJpYWJsZS4gXCIgK1xuICAgICAgICAgIFwiQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuXCIsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgX2VsID0gX2VsLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBwcmVUcmFuc2Zvcm1Ob2RlIChlbCwgb3B0aW9ucykge1xuICAgIGlmIChlbC50YWcgPT09ICdpbnB1dCcpIHtcbiAgICAgIHZhciBtYXAgPSBlbC5hdHRyc01hcDtcbiAgICAgIGlmICghbWFwWyd2LW1vZGVsJ10pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHZhciB0eXBlQmluZGluZztcbiAgICAgIGlmIChtYXBbJzp0eXBlJ10gfHwgbWFwWyd2LWJpbmQ6dHlwZSddKSB7XG4gICAgICAgIHR5cGVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd0eXBlJyk7XG4gICAgICB9XG4gICAgICBpZiAoIW1hcC50eXBlICYmICF0eXBlQmluZGluZyAmJiBtYXBbJ3YtYmluZCddKSB7XG4gICAgICAgIHR5cGVCaW5kaW5nID0gXCIoXCIgKyAobWFwWyd2LWJpbmQnXSkgKyBcIikudHlwZVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZUJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtaWYnLCB0cnVlKTtcbiAgICAgICAgdmFyIGlmQ29uZGl0aW9uRXh0cmEgPSBpZkNvbmRpdGlvbiA/IChcIiYmKFwiICsgaWZDb25kaXRpb24gKyBcIilcIikgOiBcIlwiO1xuICAgICAgICB2YXIgaGFzRWxzZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UnLCB0cnVlKSAhPSBudWxsO1xuICAgICAgICB2YXIgZWxzZUlmQ29uZGl0aW9uID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZS1pZicsIHRydWUpO1xuICAgICAgICAvLyAxLiBjaGVja2JveFxuICAgICAgICB2YXIgYnJhbmNoMCA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAgIC8vIHByb2Nlc3MgZm9yIG9uIHRoZSBtYWluIG5vZGVcbiAgICAgICAgcHJvY2Vzc0ZvcihicmFuY2gwKTtcbiAgICAgICAgYWRkUmF3QXR0cihicmFuY2gwLCAndHlwZScsICdjaGVja2JveCcpO1xuICAgICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gwLCBvcHRpb25zKTtcbiAgICAgICAgYnJhbmNoMC5wcm9jZXNzZWQgPSB0cnVlOyAvLyBwcmV2ZW50IGl0IGZyb20gZG91YmxlLXByb2Nlc3NlZFxuICAgICAgICBicmFuY2gwLmlmID0gXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdjaGVja2JveCdcIiArIGlmQ29uZGl0aW9uRXh0cmE7XG4gICAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgICBleHA6IGJyYW5jaDAuaWYsXG4gICAgICAgICAgYmxvY2s6IGJyYW5jaDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIDIuIGFkZCByYWRpbyBlbHNlLWlmIGNvbmRpdGlvblxuICAgICAgICB2YXIgYnJhbmNoMSA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMSwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMSwgJ3R5cGUnLCAncmFkaW8nKTtcbiAgICAgICAgcHJvY2Vzc0VsZW1lbnQoYnJhbmNoMSwgb3B0aW9ucyk7XG4gICAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgICBleHA6IFwiKFwiICsgdHlwZUJpbmRpbmcgKyBcIik9PT0ncmFkaW8nXCIgKyBpZkNvbmRpdGlvbkV4dHJhLFxuICAgICAgICAgIGJsb2NrOiBicmFuY2gxXG4gICAgICAgIH0pO1xuICAgICAgICAvLyAzLiBvdGhlclxuICAgICAgICB2YXIgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICAgIGdldEFuZFJlbW92ZUF0dHIoYnJhbmNoMiwgJ3YtZm9yJywgdHJ1ZSk7XG4gICAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMiwgJzp0eXBlJywgdHlwZUJpbmRpbmcpO1xuICAgICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICAgIGV4cDogaWZDb25kaXRpb24sXG4gICAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGhhc0Vsc2UpIHtcbiAgICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGVsc2VJZkNvbmRpdGlvbikge1xuICAgICAgICAgIGJyYW5jaDAuZWxzZWlmID0gZWxzZUlmQ29uZGl0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJyYW5jaDBcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9uZUFTVEVsZW1lbnQgKGVsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxuICB9XG5cbiAgdmFyIG1vZGVsJDEgPSB7XG4gICAgcHJlVHJhbnNmb3JtTm9kZTogcHJlVHJhbnNmb3JtTm9kZVxuICB9O1xuXG4gIHZhciBtb2R1bGVzJDEgPSBbXG4gICAga2xhc3MkMSxcbiAgICBzdHlsZSQxLFxuICAgIG1vZGVsJDFcbiAgXTtcblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiB0ZXh0IChlbCwgZGlyKSB7XG4gICAgaWYgKGRpci52YWx1ZSkge1xuICAgICAgYWRkUHJvcChlbCwgJ3RleHRDb250ZW50JywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSwgZGlyKTtcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBodG1sIChlbCwgZGlyKSB7XG4gICAgaWYgKGRpci52YWx1ZSkge1xuICAgICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIChcIl9zKFwiICsgKGRpci52YWx1ZSkgKyBcIilcIiksIGRpcik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRpcmVjdGl2ZXMkMSA9IHtcbiAgICBtb2RlbDogbW9kZWwsXG4gICAgdGV4dDogdGV4dCxcbiAgICBodG1sOiBodG1sXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIGJhc2VPcHRpb25zID0ge1xuICAgIGV4cGVjdEhUTUw6IHRydWUsXG4gICAgbW9kdWxlczogbW9kdWxlcyQxLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgICBpc1ByZVRhZzogaXNQcmVUYWcsXG4gICAgaXNVbmFyeVRhZzogaXNVbmFyeVRhZyxcbiAgICBtdXN0VXNlUHJvcDogbXVzdFVzZVByb3AsXG4gICAgY2FuQmVMZWZ0T3BlblRhZzogY2FuQmVMZWZ0T3BlblRhZyxcbiAgICBpc1Jlc2VydmVkVGFnOiBpc1Jlc2VydmVkVGFnLFxuICAgIGdldFRhZ05hbWVzcGFjZTogZ2V0VGFnTmFtZXNwYWNlLFxuICAgIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBpc1N0YXRpY0tleTtcbiAgdmFyIGlzUGxhdGZvcm1SZXNlcnZlZFRhZztcblxuICB2YXIgZ2VuU3RhdGljS2V5c0NhY2hlZCA9IGNhY2hlZChnZW5TdGF0aWNLZXlzJDEpO1xuXG4gIC8qKlxuICAgKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICAgKiBhbmQgZGV0ZWN0IHN1Yi10cmVlcyB0aGF0IGFyZSBwdXJlbHkgc3RhdGljLCBpLmUuIHBhcnRzIG9mXG4gICAqIHRoZSBET00gdGhhdCBuZXZlciBuZWVkcyB0byBjaGFuZ2UuXG4gICAqXG4gICAqIE9uY2Ugd2UgZGV0ZWN0IHRoZXNlIHN1Yi10cmVlcywgd2UgY2FuOlxuICAgKlxuICAgKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gICAqICAgIGNyZWF0ZSBmcmVzaCBub2RlcyBmb3IgdGhlbSBvbiBlYWNoIHJlLXJlbmRlcjtcbiAgICogMi4gQ29tcGxldGVseSBza2lwIHRoZW0gaW4gdGhlIHBhdGNoaW5nIHByb2Nlc3MuXG4gICAqL1xuICBmdW5jdGlvbiBvcHRpbWl6ZSAocm9vdCwgb3B0aW9ucykge1xuICAgIGlmICghcm9vdCkgeyByZXR1cm4gfVxuICAgIGlzU3RhdGljS2V5ID0gZ2VuU3RhdGljS2V5c0NhY2hlZChvcHRpb25zLnN0YXRpY0tleXMgfHwgJycpO1xuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgICAvLyBmaXJzdCBwYXNzOiBtYXJrIGFsbCBub24tc3RhdGljIG5vZGVzLlxuICAgIG1hcmtTdGF0aWMkMShyb290KTtcbiAgICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gICAgbWFya1N0YXRpY1Jvb3RzKHJvb3QsIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICAgIHJldHVybiBtYWtlTWFwKFxuICAgICAgJ3R5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwJyArXG4gICAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgICBub2RlLnN0YXRpYyA9IGlzU3RhdGljKG5vZGUpO1xuICAgIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgICAgLy8gMS4gY29tcG9uZW50cyBub3QgYWJsZSB0byBtdXRhdGUgc2xvdCBub2Rlc1xuICAgICAgLy8gMi4gc3RhdGljIHNsb3QgY29udGVudCBmYWlscyBmb3IgaG90LXJlbG9hZGluZ1xuICAgICAgaWYgKFxuICAgICAgICAhaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJlxuICAgICAgICBub2RlLnRhZyAhPT0gJ3Nsb3QnICYmXG4gICAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICAgICkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgbWFya1N0YXRpYyQxKGNoaWxkKTtcbiAgICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgICAgdmFyIGJsb2NrID0gbm9kZS5pZkNvbmRpdGlvbnNbaSQxXS5ibG9jaztcbiAgICAgICAgICBtYXJrU3RhdGljJDEoYmxvY2spO1xuICAgICAgICAgIGlmICghYmxvY2suc3RhdGljKSB7XG4gICAgICAgICAgICBub2RlLnN0YXRpYyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtTdGF0aWNSb290cyAobm9kZSwgaXNJbkZvcikge1xuICAgIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAgIGlmIChub2RlLnN0YXRpYyB8fCBub2RlLm9uY2UpIHtcbiAgICAgICAgbm9kZS5zdGF0aWNJbkZvciA9IGlzSW5Gb3I7XG4gICAgICB9XG4gICAgICAvLyBGb3IgYSBub2RlIHRvIHF1YWxpZnkgYXMgYSBzdGF0aWMgcm9vdCwgaXQgc2hvdWxkIGhhdmUgY2hpbGRyZW4gdGhhdFxuICAgICAgLy8gYXJlIG5vdCBqdXN0IHN0YXRpYyB0ZXh0LiBPdGhlcndpc2UgdGhlIGNvc3Qgb2YgaG9pc3Rpbmcgb3V0IHdpbGxcbiAgICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICAgIGlmIChub2RlLnN0YXRpYyAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCAmJiAhKFxuICAgICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICAgICkpIHtcbiAgICAgICAgbm9kZS5zdGF0aWNSb290ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnN0YXRpY1Jvb3QgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDEsIGwkMSA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSQxIDwgbCQxOyBpJDErKykge1xuICAgICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrLCBpc0luRm9yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3RhdGljIChub2RlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMikgeyAvLyBleHByZXNzaW9uXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMykgeyAvLyB0ZXh0XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gISEobm9kZS5wcmUgfHwgKFxuICAgICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICAgIW5vZGUuaWYgJiYgIW5vZGUuZm9yICYmIC8vIG5vdCB2LWlmIG9yIHYtZm9yIG9yIHYtZWxzZVxuICAgICAgIWlzQnVpbHRJblRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgYnVpbHQtaW5cbiAgICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgICAhaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3Iobm9kZSkgJiZcbiAgICAgIE9iamVjdC5rZXlzKG5vZGUpLmV2ZXJ5KGlzU3RhdGljS2V5KVxuICAgICkpXG4gIH1cblxuICBmdW5jdGlvbiBpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciAobm9kZSkge1xuICAgIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50O1xuICAgICAgaWYgKG5vZGUudGFnICE9PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUuZm9yKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIGZuRXhwUkUgPSAvXihbXFx3JF9dK3xcXChbXildKj9cXCkpXFxzKj0+fF5mdW5jdGlvblxccypcXCgvO1xuICB2YXIgZm5JbnZva2VSRSA9IC9cXChbXildKj9cXCk7KiQvO1xuICB2YXIgc2ltcGxlUGF0aFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLztcblxuICAvLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xuICB2YXIga2V5Q29kZXMgPSB7XG4gICAgZXNjOiAyNyxcbiAgICB0YWI6IDksXG4gICAgZW50ZXI6IDEzLFxuICAgIHNwYWNlOiAzMixcbiAgICB1cDogMzgsXG4gICAgbGVmdDogMzcsXG4gICAgcmlnaHQ6IDM5LFxuICAgIGRvd246IDQwLFxuICAgICdkZWxldGUnOiBbOCwgNDZdXG4gIH07XG5cbiAgLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xuICB2YXIga2V5TmFtZXMgPSB7XG4gICAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gICAgZXNjOiBbJ0VzYycsICdFc2NhcGUnXSxcbiAgICB0YWI6ICdUYWInLFxuICAgIGVudGVyOiAnRW50ZXInLFxuICAgIC8vICM5MTEyOiBJRTExIHVzZXMgYFNwYWNlYmFyYCBmb3IgU3BhY2Uga2V5IG5hbWUuXG4gICAgc3BhY2U6IFsnICcsICdTcGFjZWJhciddLFxuICAgIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gICAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICAgIGxlZnQ6IFsnTGVmdCcsICdBcnJvd0xlZnQnXSxcbiAgICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gICAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAgIC8vICM5MTEyOiBJRTExIHVzZXMgYERlbGAgZm9yIERlbGV0ZSBrZXkgbmFtZS5cbiAgICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG4gIH07XG5cbiAgLy8gIzQ4Njg6IG1vZGlmaWVycyB0aGF0IHByZXZlbnQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbGlzdGVuZXJcbiAgLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuICAvLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG4gIHZhciBnZW5HdWFyZCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHsgcmV0dXJuIChcImlmKFwiICsgY29uZGl0aW9uICsgXCIpcmV0dXJuIG51bGw7XCIpOyB9O1xuXG4gIHZhciBtb2RpZmllckNvZGUgPSB7XG4gICAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICAgIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICAgIHNlbGY6IGdlbkd1YXJkKFwiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXRcIiksXG4gICAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gICAgc2hpZnQ6IGdlbkd1YXJkKFwiISRldmVudC5zaGlmdEtleVwiKSxcbiAgICBhbHQ6IGdlbkd1YXJkKFwiISRldmVudC5hbHRLZXlcIiksXG4gICAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gICAgbGVmdDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMFwiKSxcbiAgICBtaWRkbGU6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDFcIiksXG4gICAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbiAgfTtcblxuICBmdW5jdGlvbiBnZW5IYW5kbGVycyAoXG4gICAgZXZlbnRzLFxuICAgIGlzTmF0aXZlXG4gICkge1xuICAgIHZhciBwcmVmaXggPSBpc05hdGl2ZSA/ICduYXRpdmVPbjonIDogJ29uOic7XG4gICAgdmFyIHN0YXRpY0hhbmRsZXJzID0gXCJcIjtcbiAgICB2YXIgZHluYW1pY0hhbmRsZXJzID0gXCJcIjtcbiAgICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgICAgdmFyIGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pO1xuICAgICAgaWYgKGV2ZW50c1tuYW1lXSAmJiBldmVudHNbbmFtZV0uZHluYW1pYykge1xuICAgICAgICBkeW5hbWljSGFuZGxlcnMgKz0gbmFtZSArIFwiLFwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRpY0hhbmRsZXJzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRpY0hhbmRsZXJzID0gXCJ7XCIgKyAoc3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICAgIGlmIChkeW5hbWljSGFuZGxlcnMpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBcIl9kKFwiICsgc3RhdGljSGFuZGxlcnMgKyBcIixbXCIgKyAoZHluYW1pY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHN0YXRpY0hhbmRsZXJzXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlcikge1xuICAgICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIoaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgICB9XG5cbiAgICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gICAgdmFyIGlzRnVuY3Rpb25FeHByZXNzaW9uID0gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICAgIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpO1xuXG4gICAgaWYgKCFoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgICByZXR1cm4gaGFuZGxlci52YWx1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaXNGdW5jdGlvbkludm9jYXRpb24gPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpIDogaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgICAgLy8gbGVmdC9yaWdodFxuICAgICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IChoYW5kbGVyLm1vZGlmaWVycyk7XG4gICAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IGdlbkd1YXJkKFxuICAgICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICFtb2RpZmllcnNba2V5TW9kaWZpZXJdOyB9KVxuICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gKFwiJGV2ZW50LlwiICsga2V5TW9kaWZpZXIgKyBcIktleVwiKTsgfSlcbiAgICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgY29kZSArPSBnZW5LZXlGaWx0ZXIoa2V5cyk7XG4gICAgICB9XG4gICAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgICAgaWYgKGdlbk1vZGlmaWVyQ29kZSkge1xuICAgICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTtcbiAgICAgIH1cbiAgICAgIHZhciBoYW5kbGVyQ29kZSA9IGlzTWV0aG9kUGF0aFxuICAgICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKCRldmVudClcIilcbiAgICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICAgID8gKFwicmV0dXJuIChcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKSgkZXZlbnQpXCIpXG4gICAgICAgICAgOiBpc0Z1bmN0aW9uSW52b2NhdGlvblxuICAgICAgICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpXG4gICAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIGNvZGUgKyBoYW5kbGVyQ29kZSArIFwifVwiKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAgIC8vICM5NDQxOiBjYW4ndCB1c2UgJ2tleUNvZGUnIGluICRldmVudCBiZWNhdXNlIENocm9tZSBhdXRvZmlsbCBmaXJlcyBmYWtlXG4gICAgICAvLyBrZXkgZXZlbnRzIHRoYXQgZG8gbm90IGhhdmUga2V5Q29kZSBwcm9wZXJ0eS4uLlxuICAgICAgXCJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJlwiICtcbiAgICAgIChrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpKSArIFwiKXJldHVybiBudWxsO1wiXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gICAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICAgIGlmIChrZXlWYWwpIHtcbiAgICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICAgIH1cbiAgICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gICAgdmFyIGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBcIl9rKCRldmVudC5rZXlDb2RlLFwiICtcbiAgICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArIFwiLFwiICtcbiAgICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyBcIixcIiArXG4gICAgICBcIiRldmVudC5rZXksXCIgK1xuICAgICAgXCJcIiArIChKU09OLnN0cmluZ2lmeShrZXlOYW1lKSkgK1xuICAgICAgXCIpXCJcbiAgICApXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBvbiAoZWwsIGRpcikge1xuICAgIGlmIChkaXIubW9kaWZpZXJzKSB7XG4gICAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgICB9XG4gICAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gICAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgcmV0dXJuIChcIl9iKFwiICsgY29kZSArIFwiLCdcIiArIChlbC50YWcpICsgXCInLFwiICsgKGRpci52YWx1ZSkgKyBcIixcIiArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICd0cnVlJyA6ICdmYWxzZScpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5zeW5jID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICAgIH07XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gICAgb246IG9uLFxuICAgIGJpbmQ6IGJpbmQkMSxcbiAgICBjbG9hazogbm9vcFxuICB9O1xuXG4gIC8qICAqL1xuXG5cblxuXG5cbiAgdmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy53YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICAgIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICAgIHRoaXMuZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICAgIHRoaXMuZGlyZWN0aXZlcyA9IGV4dGVuZChleHRlbmQoe30sIGJhc2VEaXJlY3RpdmVzKSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgICB0aGlzLm1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuICAgIHRoaXMub25jZUlkID0gMDtcbiAgICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICAgIHRoaXMucHJlID0gZmFsc2U7XG4gIH07XG5cblxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgICBhc3QsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICAgIHZhciBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QsIHN0YXRlKSA6ICdfYyhcImRpdlwiKSc7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbmRlcjogKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyBjb2RlICsgXCJ9XCIpLFxuICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5FbGVtZW50IChlbCwgc3RhdGUpIHtcbiAgICBpZiAoZWwucGFyZW50KSB7XG4gICAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTtcbiAgICB9XG5cbiAgICBpZiAoZWwuc3RhdGljUm9vdCAmJiAhZWwuc3RhdGljUHJvY2Vzc2VkKSB7XG4gICAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgICB9IGVsc2UgaWYgKGVsLm9uY2UgJiYgIWVsLm9uY2VQcm9jZXNzZWQpIHtcbiAgICAgIHJldHVybiBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSlcbiAgICB9IGVsc2UgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFRhcmdldCAmJiAhc3RhdGUucHJlKSB7XG4gICAgICByZXR1cm4gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndm9pZCAwJ1xuICAgIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICAgIHJldHVybiBnZW5TbG90KGVsLCBzdGF0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICAgIHZhciBjb2RlO1xuICAgICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwsIHN0YXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoIWVsLnBsYWluIHx8IChlbC5wcmUgJiYgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpKSkge1xuICAgICAgICAgIGRhdGEgPSBnZW5EYXRhJDIoZWwsIHN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICAgIGNvZGUgPSBcIl9jKCdcIiArIChlbC50YWcpICsgXCInXCIgKyAoZGF0YSA/IChcIixcIiArIGRhdGEpIDogJycpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCI7XG4gICAgICB9XG4gICAgICAvLyBtb2R1bGUgdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS50cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2RlXG4gICAgfVxuICB9XG5cbiAgLy8gaG9pc3Qgc3RhdGljIHN1Yi10cmVlcyBvdXRcbiAgZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgICBlbC5zdGF0aWNQcm9jZXNzZWQgPSB0cnVlO1xuICAgIC8vIFNvbWUgZWxlbWVudHMgKHRlbXBsYXRlcykgbmVlZCB0byBiZWhhdmUgZGlmZmVyZW50bHkgaW5zaWRlIG9mIGEgdi1wcmVcbiAgICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAgIC8vIHdyYXAgYSBzdGF0ZSBjaGFuZ2UgYW5kIHJlc2V0IGl0IHVwb24gZXhpdGluZyB0aGUgcHJlIG5vZGUuXG4gICAgdmFyIG9yaWdpbmFsUHJlU3RhdGUgPSBzdGF0ZS5wcmU7XG4gICAgaWYgKGVsLnByZSkge1xuICAgICAgc3RhdGUucHJlID0gZWwucHJlO1xuICAgIH1cbiAgICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMucHVzaCgoXCJ3aXRoKHRoaXMpe3JldHVybiBcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCIpKTtcbiAgICBzdGF0ZS5wcmUgPSBvcmlnaW5hbFByZVN0YXRlO1xuICAgIHJldHVybiAoXCJfbShcIiArIChzdGF0ZS5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMSkgKyAoZWwuc3RhdGljSW5Gb3IgPyAnLHRydWUnIDogJycpICsgXCIpXCIpXG4gIH1cblxuICAvLyB2LW9uY2VcbiAgZnVuY3Rpb24gZ2VuT25jZSAoZWwsIHN0YXRlKSB7XG4gICAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gICAgaWYgKGVsLmlmICYmICFlbC5pZlByb2Nlc3NlZCkge1xuICAgICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgICB2YXIga2V5ID0gJyc7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50LmZvcikge1xuICAgICAgICAgIGtleSA9IHBhcmVudC5rZXk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgc3RhdGUud2FybihcbiAgICAgICAgICBcInYtb25jZSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSB2LWZvciB0aGF0IGlzIGtleWVkLiBcIixcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1vbmNlJ11cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgICAgfVxuICAgICAgcmV0dXJuIChcIl9vKFwiICsgKGdlbkVsZW1lbnQoZWwsIHN0YXRlKSkgKyBcIixcIiArIChzdGF0ZS5vbmNlSWQrKykgKyBcIixcIiArIGtleSArIFwiKVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5JZiAoXG4gICAgZWwsXG4gICAgc3RhdGUsXG4gICAgYWx0R2VuLFxuICAgIGFsdEVtcHR5XG4gICkge1xuICAgIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gICAgcmV0dXJuIGdlbklmQ29uZGl0aW9ucyhlbC5pZkNvbmRpdGlvbnMuc2xpY2UoKSwgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpXG4gIH1cblxuICBmdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICAgIGNvbmRpdGlvbnMsXG4gICAgc3RhdGUsXG4gICAgYWx0R2VuLFxuICAgIGFsdEVtcHR5XG4gICkge1xuICAgIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBhbHRFbXB0eSB8fCAnX2UoKSdcbiAgICB9XG5cbiAgICB2YXIgY29uZGl0aW9uID0gY29uZGl0aW9ucy5zaGlmdCgpO1xuICAgIGlmIChjb25kaXRpb24uZXhwKSB7XG4gICAgICByZXR1cm4gKFwiKFwiICsgKGNvbmRpdGlvbi5leHApICsgXCIpP1wiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkgKyBcIjpcIiArIChnZW5JZkNvbmRpdGlvbnMoY29uZGl0aW9ucywgc3RhdGUsIGFsdEdlbiwgYWx0RW1wdHkpKSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlwiICsgKGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKSkpXG4gICAgfVxuXG4gICAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICAgIGZ1bmN0aW9uIGdlblRlcm5hcnlFeHAgKGVsKSB7XG4gICAgICByZXR1cm4gYWx0R2VuXG4gICAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgICAgOiBlbC5vbmNlXG4gICAgICAgICAgPyBnZW5PbmNlKGVsLCBzdGF0ZSlcbiAgICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkZvciAoXG4gICAgZWwsXG4gICAgc3RhdGUsXG4gICAgYWx0R2VuLFxuICAgIGFsdEhlbHBlclxuICApIHtcbiAgICB2YXIgZXhwID0gZWwuZm9yO1xuICAgIHZhciBhbGlhcyA9IGVsLmFsaWFzO1xuICAgIHZhciBpdGVyYXRvcjEgPSBlbC5pdGVyYXRvcjEgPyAoXCIsXCIgKyAoZWwuaXRlcmF0b3IxKSkgOiAnJztcbiAgICB2YXIgaXRlcmF0b3IyID0gZWwuaXRlcmF0b3IyID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMikpIDogJyc7XG5cbiAgICBpZiAoc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmXG4gICAgICBlbC50YWcgIT09ICdzbG90JyAmJlxuICAgICAgZWwudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICAhZWwua2V5XG4gICAgKSB7XG4gICAgICBzdGF0ZS53YXJuKFxuICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1mb3I9XFxcIlwiICsgYWxpYXMgKyBcIiBpbiBcIiArIGV4cCArIFwiXFxcIj46IGNvbXBvbmVudCBsaXN0cyByZW5kZXJlZCB3aXRoIFwiICtcbiAgICAgICAgXCJ2LWZvciBzaG91bGQgaGF2ZSBleHBsaWNpdCBrZXlzLiBcIiArXG4gICAgICAgIFwiU2VlIGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2xpc3QuaHRtbCNrZXkgZm9yIG1vcmUgaW5mby5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10sXG4gICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICApO1xuICAgIH1cblxuICAgIGVsLmZvclByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICAgIHJldHVybiAoYWx0SGVscGVyIHx8ICdfbCcpICsgXCIoKFwiICsgZXhwICsgXCIpLFwiICtcbiAgICAgIFwiZnVuY3Rpb24oXCIgKyBhbGlhcyArIGl0ZXJhdG9yMSArIGl0ZXJhdG9yMiArIFwiKXtcIiArXG4gICAgICAgIFwicmV0dXJuIFwiICsgKChhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKSkgK1xuICAgICAgJ30pJ1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRGF0YSQyIChlbCwgc3RhdGUpIHtcbiAgICB2YXIgZGF0YSA9ICd7JztcblxuICAgIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gICAgLy8gZGlyZWN0aXZlcyBtYXkgbXV0YXRlIHRoZSBlbCdzIG90aGVyIHByb3BlcnRpZXMgYmVmb3JlIHRoZXkgYXJlIGdlbmVyYXRlZC5cbiAgICB2YXIgZGlycyA9IGdlbkRpcmVjdGl2ZXMoZWwsIHN0YXRlKTtcbiAgICBpZiAoZGlycykgeyBkYXRhICs9IGRpcnMgKyAnLCc7IH1cblxuICAgIC8vIGtleVxuICAgIGlmIChlbC5rZXkpIHtcbiAgICAgIGRhdGEgKz0gXCJrZXk6XCIgKyAoZWwua2V5KSArIFwiLFwiO1xuICAgIH1cbiAgICAvLyByZWZcbiAgICBpZiAoZWwucmVmKSB7XG4gICAgICBkYXRhICs9IFwicmVmOlwiICsgKGVsLnJlZikgKyBcIixcIjtcbiAgICB9XG4gICAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgICBkYXRhICs9IFwicmVmSW5Gb3I6dHJ1ZSxcIjtcbiAgICB9XG4gICAgLy8gcHJlXG4gICAgaWYgKGVsLnByZSkge1xuICAgICAgZGF0YSArPSBcInByZTp0cnVlLFwiO1xuICAgIH1cbiAgICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgIGRhdGEgKz0gXCJ0YWc6XFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCI7XG4gICAgfVxuICAgIC8vIG1vZHVsZSBkYXRhIGdlbmVyYXRpb24gZnVuY3Rpb25zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS5kYXRhR2VuRm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkYXRhICs9IHN0YXRlLmRhdGFHZW5GbnNbaV0oZWwpO1xuICAgIH1cbiAgICAvLyBhdHRyaWJ1dGVzXG4gICAgaWYgKGVsLmF0dHJzKSB7XG4gICAgICBkYXRhICs9IFwiYXR0cnM6XCIgKyAoZ2VuUHJvcHMoZWwuYXR0cnMpKSArIFwiLFwiO1xuICAgIH1cbiAgICAvLyBET00gcHJvcHNcbiAgICBpZiAoZWwucHJvcHMpIHtcbiAgICAgIGRhdGEgKz0gXCJkb21Qcm9wczpcIiArIChnZW5Qcm9wcyhlbC5wcm9wcykpICsgXCIsXCI7XG4gICAgfVxuICAgIC8vIGV2ZW50IGhhbmRsZXJzXG4gICAgaWYgKGVsLmV2ZW50cykge1xuICAgICAgZGF0YSArPSAoZ2VuSGFuZGxlcnMoZWwuZXZlbnRzLCBmYWxzZSkpICsgXCIsXCI7XG4gICAgfVxuICAgIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSkpICsgXCIsXCI7XG4gICAgfVxuICAgIC8vIHNsb3QgdGFyZ2V0XG4gICAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90c1xuICAgIGlmIChlbC5zbG90VGFyZ2V0ICYmICFlbC5zbG90U2NvcGUpIHtcbiAgICAgIGRhdGEgKz0gXCJzbG90OlwiICsgKGVsLnNsb3RUYXJnZXQpICsgXCIsXCI7XG4gICAgfVxuICAgIC8vIHNjb3BlZCBzbG90c1xuICAgIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgICAgZGF0YSArPSAoZ2VuU2NvcGVkU2xvdHMoZWwsIGVsLnNjb3BlZFNsb3RzLCBzdGF0ZSkpICsgXCIsXCI7XG4gICAgfVxuICAgIC8vIGNvbXBvbmVudCB2LW1vZGVsXG4gICAgaWYgKGVsLm1vZGVsKSB7XG4gICAgICBkYXRhICs9IFwibW9kZWw6e3ZhbHVlOlwiICsgKGVsLm1vZGVsLnZhbHVlKSArIFwiLGNhbGxiYWNrOlwiICsgKGVsLm1vZGVsLmNhbGxiYWNrKSArIFwiLGV4cHJlc3Npb246XCIgKyAoZWwubW9kZWwuZXhwcmVzc2lvbikgKyBcIn0sXCI7XG4gICAgfVxuICAgIC8vIGlubGluZS10ZW1wbGF0ZVxuICAgIGlmIChlbC5pbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgdmFyIGlubGluZVRlbXBsYXRlID0gZ2VuSW5saW5lVGVtcGxhdGUoZWwsIHN0YXRlKTtcbiAgICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgICBkYXRhICs9IGlubGluZVRlbXBsYXRlICsgXCIsXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoLywkLywgJycpICsgJ30nO1xuICAgIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgICAvLyB2LWJpbmQgd2l0aCBkeW5hbWljIGFyZ3VtZW50cyBtdXN0IGJlIGFwcGxpZWQgdXNpbmcgdGhlIHNhbWUgdi1iaW5kIG9iamVjdFxuICAgIC8vIG1lcmdlIGhlbHBlciBzbyB0aGF0IGNsYXNzL3N0eWxlL211c3RVc2VQcm9wIGF0dHJzIGFyZSBoYW5kbGVkIGNvcnJlY3RseS5cbiAgICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgICBkYXRhID0gXCJfYihcIiArIGRhdGEgKyBcIixcXFwiXCIgKyAoZWwudGFnKSArIFwiXFxcIixcIiArIChnZW5Qcm9wcyhlbC5keW5hbWljQXR0cnMpKSArIFwiKVwiO1xuICAgIH1cbiAgICAvLyB2LWJpbmQgZGF0YSB3cmFwXG4gICAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgICBkYXRhID0gZWwud3JhcERhdGEoZGF0YSk7XG4gICAgfVxuICAgIC8vIHYtb24gZGF0YSB3cmFwXG4gICAgaWYgKGVsLndyYXBMaXN0ZW5lcnMpIHtcbiAgICAgIGRhdGEgPSBlbC53cmFwTGlzdGVuZXJzKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwsIHN0YXRlKSB7XG4gICAgdmFyIGRpcnMgPSBlbC5kaXJlY3RpdmVzO1xuICAgIGlmICghZGlycykgeyByZXR1cm4gfVxuICAgIHZhciByZXMgPSAnZGlyZWN0aXZlczpbJztcbiAgICB2YXIgaGFzUnVudGltZSA9IGZhbHNlO1xuICAgIHZhciBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICAgIGZvciAoaSA9IDAsIGwgPSBkaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZGlyID0gZGlyc1tpXTtcbiAgICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHZhciBnZW4gPSBzdGF0ZS5kaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICAgIGlmIChnZW4pIHtcbiAgICAgICAgLy8gY29tcGlsZS10aW1lIGRpcmVjdGl2ZSB0aGF0IG1hbmlwdWxhdGVzIEFTVC5cbiAgICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgICBuZWVkUnVudGltZSA9ICEhZ2VuKGVsLCBkaXIsIHN0YXRlLndhcm4pO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICAgIGhhc1J1bnRpbWUgPSB0cnVlO1xuICAgICAgICByZXMgKz0gXCJ7bmFtZTpcXFwiXCIgKyAoZGlyLm5hbWUpICsgXCJcXFwiLHJhd05hbWU6XFxcIlwiICsgKGRpci5yYXdOYW1lKSArIFwiXFxcIlwiICsgKGRpci52YWx1ZSA/IChcIix2YWx1ZTooXCIgKyAoZGlyLnZhbHVlKSArIFwiKSxleHByZXNzaW9uOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci52YWx1ZSkpKSA6ICcnKSArIChkaXIuYXJnID8gKFwiLGFyZzpcIiArIChkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IChcIlxcXCJcIiArIChkaXIuYXJnKSArIFwiXFxcIlwiKSkpIDogJycpICsgKGRpci5tb2RpZmllcnMgPyAoXCIsbW9kaWZpZXJzOlwiICsgKEpTT04uc3RyaW5naWZ5KGRpci5tb2RpZmllcnMpKSkgOiAnJykgKyBcIn0sXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNSdW50aW1lKSB7XG4gICAgICByZXR1cm4gcmVzLnNsaWNlKDAsIC0xKSArICddJ1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbklubGluZVRlbXBsYXRlIChlbCwgc3RhdGUpIHtcbiAgICB2YXIgYXN0ID0gZWwuY2hpbGRyZW5bMF07XG4gICAgaWYgKGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMSkge1xuICAgICAgc3RhdGUud2FybihcbiAgICAgICAgJ0lubGluZS10ZW1wbGF0ZSBjb21wb25lbnRzIG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50LicsXG4gICAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChhc3QgJiYgYXN0LnR5cGUgPT09IDEpIHtcbiAgICAgIHZhciBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgICAgcmV0dXJuIChcImlubGluZVRlbXBsYXRlOntyZW5kZXI6ZnVuY3Rpb24oKXtcIiArIChpbmxpbmVSZW5kZXJGbnMucmVuZGVyKSArIFwifSxzdGF0aWNSZW5kZXJGbnM6W1wiICsgKGlubGluZVJlbmRlckZucy5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJmdW5jdGlvbigpe1wiICsgY29kZSArIFwifVwiKTsgfSkuam9pbignLCcpKSArIFwiXX1cIilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoXG4gICAgZWwsXG4gICAgc2xvdHMsXG4gICAgc3RhdGVcbiAgKSB7XG4gICAgLy8gYnkgZGVmYXVsdCBzY29wZWQgc2xvdHMgYXJlIGNvbnNpZGVyZWQgXCJzdGFibGVcIiwgdGhpcyBhbGxvd3MgY2hpbGRcbiAgICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC5cbiAgICAvLyBidXQgaW4gc29tZSBjYXNlcyB3ZSBoYXZlIHRvIGJhaWwtb3V0IG9mIHRoaXMgb3B0aW1pemF0aW9uXG4gICAgLy8gZm9yIGV4YW1wbGUgaWYgdGhlIHNsb3QgY29udGFpbnMgZHluYW1pYyBuYW1lcywgaGFzIHYtaWYgb3Igdi1mb3Igb24gdGhlbS4uLlxuICAgIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gT2JqZWN0LmtleXMoc2xvdHMpLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHNsb3QgPSBzbG90c1trZXldO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgc2xvdC5zbG90VGFyZ2V0RHluYW1pYyB8fFxuICAgICAgICBzbG90LmlmIHx8XG4gICAgICAgIHNsb3QuZm9yIHx8XG4gICAgICAgIGNvbnRhaW5zU2xvdENoaWxkKHNsb3QpIC8vIGlzIHBhc3NpbmcgZG93biBzbG90IGZyb20gcGFyZW50IHdoaWNoIG1heSBiZSBkeW5hbWljXG4gICAgICApXG4gICAgfSk7XG5cbiAgICAvLyAjOTUzNDogaWYgYSBjb21wb25lbnQgd2l0aCBzY29wZWQgc2xvdHMgaXMgaW5zaWRlIGEgY29uZGl0aW9uYWwgYnJhbmNoLFxuICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIHRoZSBzYW1lIGNvbXBvbmVudCB0byBiZSByZXVzZWQgYnV0IHdpdGggZGlmZmVyZW50XG4gICAgLy8gY29tcGlsZWQgc2xvdCBjb250ZW50LiBUbyBhdm9pZCB0aGF0LCB3ZSBnZW5lcmF0ZSBhIHVuaXF1ZSBrZXkgYmFzZWQgb25cbiAgICAvLyB0aGUgZ2VuZXJhdGVkIGNvZGUgb2YgYWxsIHRoZSBzbG90IGNvbnRlbnRzLlxuICAgIHZhciBuZWVkc0tleSA9ICEhZWwuaWY7XG5cbiAgICAvLyBPUiB3aGVuIGl0IGlzIGluc2lkZSBhbm90aGVyIHNjb3BlZCBzbG90IG9yIHYtZm9yICh0aGUgcmVhY3Rpdml0eSBtYXkgYmVcbiAgICAvLyBkaXNjb25uZWN0ZWQgZHVlIHRvIHRoZSBpbnRlcm1lZGlhdGUgc2NvcGUgdmFyaWFibGUpXG4gICAgLy8gIzk0MzgsICM5NTA2XG4gICAgLy8gVE9ETzogdGhpcyBjYW4gYmUgZnVydGhlciBvcHRpbWl6ZWQgYnkgcHJvcGVybHkgYW5hbHl6aW5nIGluLXNjb3BlIGJpbmRpbmdzXG4gICAgLy8gYW5kIHNraXAgZm9yY2UgdXBkYXRpbmcgb25lcyB0aGF0IGRvIG5vdCBhY3R1YWxseSB1c2Ugc2NvcGUgdmFyaWFibGVzLlxuICAgIGlmICghbmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHx8XG4gICAgICAgICAgcGFyZW50LmZvclxuICAgICAgICApIHtcbiAgICAgICAgICBuZWVkc0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnQuaWYpIHtcbiAgICAgICAgICBuZWVkc0tleSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVkU2xvdHMgPSBPYmplY3Qua2V5cyhzbG90cylcbiAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZ2VuU2NvcGVkU2xvdChzbG90c1trZXldLCBzdGF0ZSk7IH0pXG4gICAgICAuam9pbignLCcpO1xuXG4gICAgcmV0dXJuIChcInNjb3BlZFNsb3RzOl91KFtcIiArIGdlbmVyYXRlZFNsb3RzICsgXCJdXCIgKyAobmVlZHNGb3JjZVVwZGF0ZSA/IFwiLG51bGwsdHJ1ZVwiIDogXCJcIikgKyAoIW5lZWRzRm9yY2VVcGRhdGUgJiYgbmVlZHNLZXkgPyAoXCIsbnVsbCxmYWxzZSxcIiArIChoYXNoKGdlbmVyYXRlZFNsb3RzKSkpIDogXCJcIikgKyBcIilcIilcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgdmFyIGhhc2ggPSA1MzgxO1xuICAgIHZhciBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZShpKSB7XG4gICAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICAgIH1cbiAgICByZXR1cm4gaGFzaCA+Pj4gMFxuICB9XG5cbiAgZnVuY3Rpb24gY29udGFpbnNTbG90Q2hpbGQgKGVsKSB7XG4gICAgaWYgKGVsLnR5cGUgPT09IDEpIHtcbiAgICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdCAoXG4gICAgZWwsXG4gICAgc3RhdGVcbiAgKSB7XG4gICAgdmFyIGlzTGVnYWN5U3ludGF4ID0gZWwuYXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXTtcbiAgICBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkICYmICFpc0xlZ2FjeVN5bnRheCkge1xuICAgICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdCwgXCJudWxsXCIpXG4gICAgfVxuICAgIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUsIGdlblNjb3BlZFNsb3QpXG4gICAgfVxuICAgIHZhciBzbG90U2NvcGUgPSBlbC5zbG90U2NvcGUgPT09IGVtcHR5U2xvdFNjb3BlVG9rZW5cbiAgICAgID8gXCJcIlxuICAgICAgOiBTdHJpbmcoZWwuc2xvdFNjb3BlKTtcbiAgICB2YXIgZm4gPSBcImZ1bmN0aW9uKFwiICsgc2xvdFNjb3BlICsgXCIpe1wiICtcbiAgICAgIFwicmV0dXJuIFwiICsgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJ1xuICAgICAgICA/IGVsLmlmICYmIGlzTGVnYWN5U3ludGF4XG4gICAgICAgICAgPyAoXCIoXCIgKyAoZWwuaWYpICsgXCIpP1wiICsgKGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCcpICsgXCI6dW5kZWZpbmVkXCIpXG4gICAgICAgICAgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnXG4gICAgICAgIDogZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiO1xuICAgIC8vIHJldmVyc2UgcHJveHkgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICB2YXIgcmV2ZXJzZVByb3h5ID0gc2xvdFNjb3BlID8gXCJcIiA6IFwiLHByb3h5OnRydWVcIjtcbiAgICByZXR1cm4gKFwie2tleTpcIiArIChlbC5zbG90VGFyZ2V0IHx8IFwiXFxcImRlZmF1bHRcXFwiXCIpICsgXCIsZm46XCIgKyBmbiArIHJldmVyc2VQcm94eSArIFwifVwiKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuQ2hpbGRyZW4gKFxuICAgIGVsLFxuICAgIHN0YXRlLFxuICAgIGNoZWNrU2tpcCxcbiAgICBhbHRHZW5FbGVtZW50LFxuICAgIGFsdEdlbk5vZGVcbiAgKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgdmFyIGVsJDEgPSBjaGlsZHJlblswXTtcbiAgICAgIC8vIG9wdGltaXplIHNpbmdsZSB2LWZvclxuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBlbCQxLmZvciAmJlxuICAgICAgICBlbCQxLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgICBlbCQxLnRhZyAhPT0gJ3Nsb3QnXG4gICAgICApIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlID0gY2hlY2tTa2lwXG4gICAgICAgICAgPyBzdGF0ZS5tYXliZUNvbXBvbmVudChlbCQxKSA/IFwiLDFcIiA6IFwiLDBcIlxuICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIChcIlwiICsgKChhbHRHZW5FbGVtZW50IHx8IGdlbkVsZW1lbnQpKGVsJDEsIHN0YXRlKSkgKyBub3JtYWxpemF0aW9uVHlwZSlcbiAgICAgIH1cbiAgICAgIHZhciBub3JtYWxpemF0aW9uVHlwZSQxID0gY2hlY2tTa2lwXG4gICAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgICA6IDA7XG4gICAgICB2YXIgZ2VuID0gYWx0R2VuTm9kZSB8fCBnZW5Ob2RlO1xuICAgICAgcmV0dXJuIChcIltcIiArIChjaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGdlbihjLCBzdGF0ZSk7IH0pLmpvaW4oJywnKSkgKyBcIl1cIiArIChub3JtYWxpemF0aW9uVHlwZSQxID8gKFwiLFwiICsgbm9ybWFsaXphdGlvblR5cGUkMSkgOiAnJykpXG4gICAgfVxuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuICAvLyAwOiBubyBub3JtYWxpemF0aW9uIG5lZWRlZFxuICAvLyAxOiBzaW1wbGUgbm9ybWFsaXphdGlvbiBuZWVkZWQgKHBvc3NpYmxlIDEtbGV2ZWwgZGVlcCBuZXN0ZWQgYXJyYXkpXG4gIC8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbiAgZnVuY3Rpb24gZ2V0Tm9ybWFsaXphdGlvblR5cGUgKFxuICAgIGNoaWxkcmVuLFxuICAgIG1heWJlQ29tcG9uZW50XG4gICkge1xuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlbCA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGVsLnR5cGUgIT09IDEpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkc05vcm1hbGl6YXRpb24oZWwpIHx8XG4gICAgICAgICAgKGVsLmlmQ29uZGl0aW9ucyAmJiBlbC5pZkNvbmRpdGlvbnMuc29tZShmdW5jdGlvbiAoYykgeyByZXR1cm4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spOyB9KSkpIHtcbiAgICAgICAgcmVzID0gMjtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGlmIChtYXliZUNvbXBvbmVudChlbCkgfHxcbiAgICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBtYXliZUNvbXBvbmVudChjLmJsb2NrKTsgfSkpKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIG5lZWRzTm9ybWFsaXphdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gZWwuZm9yICE9PSB1bmRlZmluZWQgfHwgZWwudGFnID09PSAndGVtcGxhdGUnIHx8IGVsLnRhZyA9PT0gJ3Nsb3QnXG4gIH1cblxuICBmdW5jdGlvbiBnZW5Ob2RlIChub2RlLCBzdGF0ZSkge1xuICAgIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KG5vZGUsIHN0YXRlKVxuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAzICYmIG5vZGUuaXNDb21tZW50KSB7XG4gICAgICByZXR1cm4gZ2VuQ29tbWVudChub2RlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2VuVGV4dChub2RlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlblRleHQgKHRleHQpIHtcbiAgICByZXR1cm4gKFwiX3YoXCIgKyAodGV4dC50eXBlID09PSAyXG4gICAgICA/IHRleHQuZXhwcmVzc2lvbiAvLyBubyBuZWVkIGZvciAoKSBiZWNhdXNlIGFscmVhZHkgd3JhcHBlZCBpbiBfcygpXG4gICAgICA6IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhKU09OLnN0cmluZ2lmeSh0ZXh0LnRleHQpKSkgKyBcIilcIilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkNvbW1lbnQgKGNvbW1lbnQpIHtcbiAgICByZXR1cm4gKFwiX2UoXCIgKyAoSlNPTi5zdHJpbmdpZnkoY29tbWVudC50ZXh0KSkgKyBcIilcIilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlblNsb3QgKGVsLCBzdGF0ZSkge1xuICAgIHZhciBzbG90TmFtZSA9IGVsLnNsb3ROYW1lIHx8ICdcImRlZmF1bHRcIic7XG4gICAgdmFyIGNoaWxkcmVuID0gZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKTtcbiAgICB2YXIgcmVzID0gXCJfdChcIiArIHNsb3ROYW1lICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpO1xuICAgIHZhciBhdHRycyA9IGVsLmF0dHJzIHx8IGVsLmR5bmFtaWNBdHRyc1xuICAgICAgPyBnZW5Qcm9wcygoZWwuYXR0cnMgfHwgW10pLmNvbmNhdChlbC5keW5hbWljQXR0cnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKHtcbiAgICAgICAgICAvLyBzbG90IHByb3BzIGFyZSBjYW1lbGl6ZWRcbiAgICAgICAgICBuYW1lOiBjYW1lbGl6ZShhdHRyLm5hbWUpLFxuICAgICAgICAgIHZhbHVlOiBhdHRyLnZhbHVlLFxuICAgICAgICAgIGR5bmFtaWM6IGF0dHIuZHluYW1pY1xuICAgICAgICB9KTsgfSkpXG4gICAgICA6IG51bGw7XG4gICAgdmFyIGJpbmQkJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kJ107XG4gICAgaWYgKChhdHRycyB8fCBiaW5kJCQxKSAmJiAhY2hpbGRyZW4pIHtcbiAgICAgIHJlcyArPSBcIixudWxsXCI7XG4gICAgfVxuICAgIGlmIChhdHRycykge1xuICAgICAgcmVzICs9IFwiLFwiICsgYXR0cnM7XG4gICAgfVxuICAgIGlmIChiaW5kJCQxKSB7XG4gICAgICByZXMgKz0gKGF0dHJzID8gJycgOiAnLG51bGwnKSArIFwiLFwiICsgYmluZCQkMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcyArICcpJ1xuICB9XG5cbiAgLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuICBmdW5jdGlvbiBnZW5Db21wb25lbnQgKFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgZWwsXG4gICAgc3RhdGVcbiAgKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgICByZXR1cm4gKFwiX2MoXCIgKyBjb21wb25lbnROYW1lICsgXCIsXCIgKyAoZ2VuRGF0YSQyKGVsLCBzdGF0ZSkpICsgKGNoaWxkcmVuID8gKFwiLFwiICsgY2hpbGRyZW4pIDogJycpICsgXCIpXCIpXG4gIH1cblxuICBmdW5jdGlvbiBnZW5Qcm9wcyAocHJvcHMpIHtcbiAgICB2YXIgc3RhdGljUHJvcHMgPSBcIlwiO1xuICAgIHZhciBkeW5hbWljUHJvcHMgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwcm9wID0gcHJvcHNbaV07XG4gICAgICB2YXIgdmFsdWUgPSB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSk7XG4gICAgICBpZiAocHJvcC5keW5hbWljKSB7XG4gICAgICAgIGR5bmFtaWNQcm9wcyArPSAocHJvcC5uYW1lKSArIFwiLFwiICsgdmFsdWUgKyBcIixcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRpY1Byb3BzICs9IFwiXFxcIlwiICsgKHByb3AubmFtZSkgKyBcIlxcXCI6XCIgKyB2YWx1ZSArIFwiLFwiO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWNQcm9wcyA9IFwie1wiICsgKHN0YXRpY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIn1cIjtcbiAgICBpZiAoZHluYW1pY1Byb3BzKSB7XG4gICAgICByZXR1cm4gKFwiX2QoXCIgKyBzdGF0aWNQcm9wcyArIFwiLFtcIiArIChkeW5hbWljUHJvcHMuc2xpY2UoMCwgLTEpKSArIFwiXSlcIilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YXRpY1Byb3BzXG4gICAgfVxuICB9XG5cbiAgLy8gIzM4OTUsICM0MjY4XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyAodGV4dCkge1xuICAgIHJldHVybiB0ZXh0XG4gICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCAnXFxcXHUyMDI4JylcbiAgICAgIC5yZXBsYWNlKC9cXHUyMDI5L2csICdcXFxcdTIwMjknKVxuICB9XG5cbiAgLyogICovXG5cblxuXG4gIC8vIHRoZXNlIGtleXdvcmRzIHNob3VsZCBub3QgYXBwZWFyIGluc2lkZSBleHByZXNzaW9ucywgYnV0IG9wZXJhdG9ycyBsaWtlXG4gIC8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbiAgdmFyIHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICAgJ2RvLGlmLGZvcixsZXQsbmV3LHRyeSx2YXIsY2FzZSxlbHNlLHdpdGgsYXdhaXQsYnJlYWssY2F0Y2gsY2xhc3MsY29uc3QsJyArXG4gICAgJ3N1cGVyLHRocm93LHdoaWxlLHlpZWxkLGRlbGV0ZSxleHBvcnQsaW1wb3J0LHJldHVybixzd2l0Y2gsZGVmYXVsdCwnICtcbiAgICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbiAgKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxifFxcXFxiJykgKyAnXFxcXGInKTtcblxuICAvLyB0aGVzZSB1bmFyeSBvcGVyYXRvcnMgc2hvdWxkIG5vdCBiZSB1c2VkIGFzIHByb3BlcnR5L21ldGhvZCBuYW1lc1xuICB2YXIgdW5hcnlPcGVyYXRvcnNSRSA9IG5ldyBSZWdFeHAoJ1xcXFxiJyArIChcbiAgICAnZGVsZXRlLHR5cGVvZix2b2lkJ1xuICApLnNwbGl0KCcsJykuam9pbignXFxcXHMqXFxcXChbXlxcXFwpXSpcXFxcKXxcXFxcYicpICsgJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCknKTtcblxuICAvLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXG4gIHZhciBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5cbiAgLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbiAgZnVuY3Rpb24gZGV0ZWN0RXJyb3JzIChhc3QsIHdhcm4pIHtcbiAgICBpZiAoYXN0KSB7XG4gICAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuYXR0cnNNYXApIHtcbiAgICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBub2RlLmF0dHJzTWFwW25hbWVdO1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAndi1mb3InKSB7XG4gICAgICAgICAgICAgIGNoZWNrRm9yKG5vZGUsIChcInYtZm9yPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICBjaGVja0V2ZW50KHZhbHVlLCAobmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpLCB3YXJuLCByYW5nZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNoZWNrTm9kZShub2RlLmNoaWxkcmVuW2ldLCB3YXJuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgICBjaGVja0V4cHJlc3Npb24obm9kZS5leHByZXNzaW9uLCBub2RlLnRleHQsIHdhcm4sIG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRXZlbnQgKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgICB2YXIgc3RpcHBlZCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKTtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gc3RpcHBlZC5tYXRjaCh1bmFyeU9wZXJhdG9yc1JFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoICYmIHN0aXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCB1bmFyeSBvcGVyYXRvciBhcyBwcm9wZXJ0eSBuYW1lOiBcIiArXG4gICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCIgaW4gZXhwcmVzc2lvbiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH1cbiAgICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0ZvciAobm9kZSwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgICBjaGVja0lkZW50aWZpZXIobm9kZS5hbGlhcywgJ3YtZm9yIGFsaWFzJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICAgIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMSwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICAgIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tJZGVudGlmaWVyIChcbiAgICBpZGVudCxcbiAgICB0eXBlLFxuICAgIHRleHQsXG4gICAgd2FybixcbiAgICByYW5nZVxuICApIHtcbiAgICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKChcInZhciBcIiArIGlkZW50ICsgXCI9X1wiKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHdhcm4oKFwiaW52YWxpZCBcIiArIHR5cGUgKyBcIiBcXFwiXCIgKyBpZGVudCArIFwiXFxcIiBpbiBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkpLCByYW5nZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGdW5jdGlvbigoXCJyZXR1cm4gXCIgKyBleHApKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB2YXIga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xuICAgICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiYXZvaWQgdXNpbmcgSmF2YVNjcmlwdCBrZXl3b3JkIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgICBcIlxcXCJcIiArIChrZXl3b3JkTWF0Y2hbMF0pICsgXCJcXFwiXFxuICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpLFxuICAgICAgICAgIHJhbmdlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiaW52YWxpZCBleHByZXNzaW9uOiBcIiArIChlLm1lc3NhZ2UpICsgXCIgaW5cXG5cXG5cIiArXG4gICAgICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgICAgICBcIiAgUmF3IGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSArIFwiXFxuXCIsXG4gICAgICAgICAgcmFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgcmFuZ2UgPSAyO1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgICBzb3VyY2UsXG4gICAgc3RhcnQsXG4gICAgZW5kXG4gICkge1xuICAgIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gc291cmNlLmxlbmd0aDtcblxuICAgIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XG4gICAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgeyBjb250aW51ZSB9XG4gICAgICAgICAgcmVzLnB1c2goKFwiXCIgKyAoaiArIDEpICsgKHJlcGVhdCQxKFwiIFwiLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpKSArIFwifCAgXCIgKyAobGluZXNbal0pKSk7XG4gICAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgICB2YXIgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCIgXCIsIHBhZCkgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICAgIHZhciBsZW5ndGgkMSA9IE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKTtcbiAgICAgICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgkMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMuam9pbignXFxuJylcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGVhdCQxIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKG4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmIChuICYgMSkgeyByZXN1bHQgKz0gc3RyOyB9XG4gICAgICAgIG4gPj4+PSAxO1xuICAgICAgICBpZiAobiA8PSAwKSB7IGJyZWFrIH1cbiAgICAgICAgc3RyICs9IHN0cjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyogICovXG5cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICAgIHJldHVybiBub29wXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiAoY29tcGlsZSkge1xuICAgIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHZtXG4gICAgKSB7XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICAgIHZhciB3YXJuJCQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgICBkZWxldGUgb3B0aW9ucy53YXJuO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgICB0cnkge1xuICAgICAgICAgIG5ldyBGdW5jdGlvbigncmV0dXJuIDEnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBjYWNoZVxuICAgICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICAgICAgOiB0ZW1wbGF0ZTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHJldHVybiBjYWNoZVtrZXldXG4gICAgICB9XG5cbiAgICAgIC8vIGNvbXBpbGVcbiAgICAgIHZhciBjb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBjaGVjayBjb21waWxhdGlvbiBlcnJvcnMvdGlwc1xuICAgICAge1xuICAgICAgICBpZiAoY29tcGlsZWQuZXJyb3JzICYmIGNvbXBpbGVkLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgY29tcGlsZWQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUNvZGVGcmFtZSh0ZW1wbGF0ZSwgZS5zdGFydCwgZS5lbmQpLFxuICAgICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyB0ZW1wbGF0ZSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBjb21waWxlZC5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoXCItIFwiICsgZSk7IH0pLmpvaW4oJ1xcbicpICsgJ1xcbicsXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGlsZWQudGlwcyAmJiBjb21waWxlZC50aXBzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHRpcChtc2csIHZtKTsgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgdmFyIGZuR2VuRXJyb3JzID0gW107XG4gICAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgICByZXMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpXG4gICAgICB9KTtcblxuICAgICAgLy8gY2hlY2sgZnVuY3Rpb24gZ2VuZXJhdGlvbiBlcnJvcnMuXG4gICAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhIGJ1ZyBpbiB0aGUgY29tcGlsZXIgaXRzZWxmLlxuICAgICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGlmICgoIWNvbXBpbGVkLmVycm9ycyB8fCAhY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkgJiYgZm5HZW5FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICB2YXIgZXJyID0gcmVmLmVycjtcbiAgICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVDb21waWxlckNyZWF0b3IgKGJhc2VDb21waWxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICAgIHRlbXBsYXRlLFxuICAgICAgICBvcHRpb25zXG4gICAgICApIHtcbiAgICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMpO1xuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIHZhciB0aXBzID0gW107XG5cbiAgICAgICAgdmFyIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIHZhciBsZWFkaW5nU3BhY2VMZW5ndGggPSB0ZW1wbGF0ZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGg7XG5cbiAgICAgICAgICAgIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgICAgaWYgKG9wdGlvbnMubW9kdWxlcykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPVxuICAgICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzXG4gICAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zLmRpcmVjdGl2ZXMgPSBleHRlbmQoXG4gICAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSxcbiAgICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ21vZHVsZXMnICYmIGtleSAhPT0gJ2RpcmVjdGl2ZXMnKSB7XG4gICAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gd2FybjtcblxuICAgICAgICB2YXIgY29tcGlsZWQgPSBiYXNlQ29tcGlsZSh0ZW1wbGF0ZS50cmltKCksIGZpbmFsT3B0aW9ucyk7XG4gICAgICAgIHtcbiAgICAgICAgICBkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0LCB3YXJuKTtcbiAgICAgICAgfVxuICAgICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIGNvbXBpbGVkLnRpcHMgPSB0aXBzO1xuICAgICAgICByZXR1cm4gY29tcGlsZWRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuICAvLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4gIC8vIEhlcmUgd2UganVzdCBleHBvcnQgYSBkZWZhdWx0IGNvbXBpbGVyIHVzaW5nIHRoZSBkZWZhdWx0IHBhcnRzLlxuICB2YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICAgIHRlbXBsYXRlLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMub3B0aW1pemUgIT09IGZhbHNlKSB7XG4gICAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB2YXIgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFzdDogYXN0LFxuICAgICAgcmVuZGVyOiBjb2RlLnJlbmRlcixcbiAgICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgICB9XG4gIH0pO1xuXG4gIC8qICAqL1xuXG4gIHZhciByZWYkMSA9IGNyZWF0ZUNvbXBpbGVyKGJhc2VPcHRpb25zKTtcbiAgdmFyIGNvbXBpbGUgPSByZWYkMS5jb21waWxlO1xuICB2YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4gIC8qICAqL1xuXG4gIC8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG4gIHZhciBkaXY7XG4gIGZ1bmN0aW9uIGdldFNob3VsZERlY29kZSAoaHJlZikge1xuICAgIGRpdiA9IGRpdiB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gICAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZignJiMxMDsnKSA+IDBcbiAgfVxuXG4gIC8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG4gIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IGdldFNob3VsZERlY29kZShmYWxzZSkgOiBmYWxzZTtcbiAgLy8gIzY4Mjg6IGNocm9tZSBlbmNvZGVzIGNvbnRlbnQgaW4gYVtocmVmXVxuICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbiAgLyogICovXG5cbiAgdmFyIGlkVG9UZW1wbGF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gICAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxuICB9KTtcblxuICB2YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcbiAgVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gICAgZWwsXG4gICAgaHlkcmF0aW5nXG4gICkge1xuICAgIGVsID0gZWwgJiYgcXVlcnkoZWwpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5IHx8IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyByZXNvbHZlIHRlbXBsYXRlL2VsIGFuZCBjb252ZXJ0IHRvIHJlbmRlciBmdW5jdGlvblxuICAgIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlID0gaWRUb1RlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgIChcIlRlbXBsYXRlIGVsZW1lbnQgbm90IGZvdW5kIG9yIGlzIGVtcHR5OiBcIiArIChvcHRpb25zLnRlbXBsYXRlKSksXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgICAgdGVtcGxhdGUgPSBnZXRPdXRlckhUTUwoZWwpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgICBtYXJrKCdjb21waWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgICBkZWxpbWl0ZXJzOiBvcHRpb25zLmRlbGltaXRlcnMsXG4gICAgICAgICAgY29tbWVudHM6IG9wdGlvbnMuY29tbWVudHNcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHRoaXMuX25hbWUpICsgXCIgY29tcGlsZVwiKSwgJ2NvbXBpbGUnLCAnY29tcGlsZSBlbmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICAgKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgICByZXR1cm4gZWwub3V0ZXJIVE1MXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICB9XG4gIH1cblxuICBWdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblxuICByZXR1cm4gVnVlO1xuXG59KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvZXM2XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1zdGFydFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3BhZC1lbmRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N5bWJvbC9hc3luYy1pdGVyYXRvclwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC92YWx1ZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL29iamVjdC9lbnRyaWVzXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHlcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3dlYlwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7XG4iLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpIH0pO1xuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgc2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldCB9KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpIHJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgQmFzZSA9ICROdW1iZXI7XG52YXIgcHJvdG8gPSAkTnVtYmVyLnByb3RvdHlwZTtcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xudmFyIFRSSU0gPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcbnZhciAkdG9GaXhlZCA9IDEuMC50b0ZpeGVkO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xudmFyIEVSUk9SID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnO1xudmFyIFpFUk8gPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uIChuLCBjKSB7XG4gIHZhciBpID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2kgPCA2KSB7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgcyA9ICcnO1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4LjAudG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUik7XG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSBaRVJPO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZSAoaiA+PSA3KSB7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUgKGogPj0gMjMpIHtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmID4gMCkge1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xuIiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHsgcGFyc2VGbG9hdDogJHBhcnNlRmxvYXQgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KSB7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcbiIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMTBFO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJykgfSk7XG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcbiAgICB2YXIgdHBsID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdyk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsZW4gPiBpKSB7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTtcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcikge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSksICdEYXRlJywge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSVNPU3RyaW5nID0gcmVxdWlyZSgnLi9fZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGx6ID0gZnVuY3Rpb24gKG51bSkge1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoLTVlMTMgLSAxKSkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB2YXIgZCA9IHRoaXM7XG4gIHZhciB5ID0gZC5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xufSA6ICR0b0lTT1N0cmluZztcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcbnZhciBwcm90byA9IERhdGUucHJvdG90eXBlO1xuXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5JywgeyBpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcbnZhciBLRVkgPSAnZmluZCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcbiIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCZgJ118XFxkXFxkP3w8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBmdW5jdGlvbmFsUmVwbGFjZSA9IHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIGlmICghZ2xvYmFsKSBicmVhaztcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyKHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xuICAgICAgICBpZiAoZnVuY3Rpb25hbFJlcGxhY2UpIHtcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IFN0cmluZyhyZXBsYWNlVmFsdWUuYXBwbHkodW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcbiAgICAgICAgICBuZXh0U291cmNlUG9zaXRpb24gPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWNjdW11bGF0ZWRSZXN1bHQgKyBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xuXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gICAgfVxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgICB2YXIgY2FwdHVyZTtcbiAgICAgIHN3aXRjaCAoY2guY2hhckF0KDApKSB7XG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyLnNsaWNlKDAsIHBvc2l0aW9uKTtcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbY2guc2xpY2UoMSwgLTEpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgICB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHNlYXJjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTRVQgPSAnU2V0JztcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XG4gICAgdmFyIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XG52YXIgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgckNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl07XG4gIHZhciBkZXNjLCBwcm90bztcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYgKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpIHJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpIH0pO1xuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5pbmNsdWRlcztcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkU3RhcnQ7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcucGFkRW5kO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC52YWx1ZXM7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZW50cmllcztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEluIHNsb3BweSBtb2RlLCB1bmJvdW5kIGB0aGlzYCByZWZlcnMgdG8gdGhlIGdsb2JhbCBvYmplY3QsIGZhbGxiYWNrIHRvXG4gIC8vIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGlmIHdlJ3JlIGluIGdsb2JhbCBzdHJpY3QgbW9kZS4gVGhhdCBpcyBzYWRseSBhIGZvcm1cbiAgLy8gb2YgaW5kaXJlY3QgZXZhbCB3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeS5cbiAgKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbiAgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKClcbik7XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWFyY2gtZm9ybS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3NlYXJjaC1mb3JtLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKHRydWUpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJmb3JtIHtcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDAgMWVtIDFlbSAxZW07XFxufVxcbmZvcm0gW3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBsaW5lLWhlaWdodDogMjRwdDtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41ZW07XFxuICAgIHBhZGRpbmc6IDAgMC41ZW07XFxufVxcbmZvcm0gW3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXG4gICAgYmFja2dyb3VuZDogc2xhdGVncmV5O1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41ZW07XFxuICAgIGZvbnQtc2l6ZTogMS4xZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBwYWRkaW5nOiAwLjVlbTtcXG59XFxuZm9ybSBbdHlwZT1cXFwic3VibWl0XFxcIl06aG92ZXIge1xcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS90b3RvL0RvY3VtZW50cy93ZWIvb2Rpbi1wcm9qZWN0L2phdmFzY3JpcHQvd2VhdGhlci1qcy9zcmMvYXBwL2FwcC1jb21wb25lbnRzL3NlYXJjaC1mb3JtLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsc0JBQXNCO0FBQ3hCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixnQkFBZ0I7QUFDcEI7QUFDQTtJQUNJLHFCQUFxQjtJQUNyQiw2QkFBNkI7SUFDN0Isb0JBQW9CO0lBQ3BCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsWUFBWTtJQUNaLGVBQWU7SUFDZixjQUFjO0FBQ2xCO0FBQ0E7TUFDTSx1QkFBdUI7QUFDN0JcIixcImZpbGVcIjpcInNlYXJjaC1mb3JtLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiZm9ybSB7XFxuICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwIDFlbSAxZW0gMWVtO1xcbn1cXG5mb3JtIFt0eXBlPVxcXCJzZWFyY2hcXFwiXSB7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgbGluZS1oZWlnaHQ6IDI0cHQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNWVtO1xcbiAgICBwYWRkaW5nOiAwIDAuNWVtO1xcbn1cXG5mb3JtIFt0eXBlPVxcXCJzdWJtaXRcXFwiXSB7XFxuICAgIGJhY2tncm91bmQ6IHNsYXRlZ3JleTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuNWVtO1xcbiAgICBmb250LXNpemU6IDEuMWVtO1xcbiAgICBmb250LXdlaWdodDogNzAwO1xcbiAgICBjb2xvcjogd2hpdGU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgcGFkZGluZzogMC41ZW07XFxufVxcbmZvcm0gW3R5cGU9XFxcInN1Ym1pdFxcXCJdOmhvdmVyIHtcXG4gICAgICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3JlcG9ydC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3JlcG9ydC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKSh0cnVlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiI3JlcG9ydCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC1nYXA6IDJlbTtcXG4gIHBsYWNlLWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDFlbTtcXG59XFxuI3JlcG9ydCBoMSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxubWFpbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICBmb250LXdlaWdodDogNzAwO1xcbn1cXG4jdGVtcCB7XFxuICBmb250LXNpemU6IDNlbTtcXG59XFxuI3dlYXRoZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luOiBhdXRvIDA7XFxufVxcbiN3ZWF0aGVyLWRlc2NyaXB0aW9uIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcbi5tb3JlLWluZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHRleHQtYWxpZ246IGp1c3RpZnk7XFxufVxcbi5pbmZvIHtcXG4gIHBhZGRpbmc6IDAgMWVtO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvaG9tZS90b3RvL0RvY3VtZW50cy93ZWIvb2Rpbi1wcm9qZWN0L2phdmFzY3JpcHQvd2VhdGhlci1qcy9zcmMvYXBwL2FwcC1jb21wb25lbnRzL3JlcG9ydC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsYUFBYTtFQUNiLGFBQWE7RUFDYixxQkFBcUI7RUFDckIsWUFBWTtBQUNkO0FBQ0E7SUFDSSxrQkFBa0I7QUFDdEI7QUFDQTtFQUNFLGFBQWE7RUFDYiw2QkFBNkI7RUFDN0IsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxjQUFjO0FBQ2hCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsY0FBYztBQUNoQjtBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UsY0FBYztBQUNoQlwiLFwiZmlsZVwiOlwicmVwb3J0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI3JlcG9ydCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC1nYXA6IDJlbTtcXG4gIHBsYWNlLWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDFlbTtcXG59XFxuI3JlcG9ydCBoMSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxubWFpbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICBmb250LXdlaWdodDogNzAwO1xcbn1cXG4jdGVtcCB7XFxuICBmb250LXNpemU6IDNlbTtcXG59XFxuI3dlYXRoZXIge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luOiBhdXRvIDA7XFxufVxcbiN3ZWF0aGVyLWRlc2NyaXB0aW9uIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcbi5tb3JlLWluZm8ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHRleHQtYWxpZ246IGp1c3RpZnk7XFxufVxcbi5pbmZvIHtcXG4gIHBhZGRpbmc6IDAgMWVtO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21haW4uc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxYjk2ZGZmNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0xIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbWFpbi5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21haW4uc2Nzc1wiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikodHJ1ZSk7XG4vLyBJbXBvcnRzXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9TnVuaXRvOjQwMCw0MDBpLDcwMCk7XCIsIFwiXCJdKTtcblxuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwOyB9XFxuXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kOiBsaWdodGdyZXk7XFxuICBmb250LWZhbWlseTogJ051bml0bycsIEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuICBjb2xvcjogd2hpdGU7IH1cXG5cXG4ud3JhcHBlciB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgcGxhY2UtY29udGVudDogY2VudGVyO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7IH1cXG5cXG4jYXBwIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBwbGFjZS1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZDogc2xhdGVncmV5O1xcbiAgbWluLXdpZHRoOiA1MDBweDtcXG4gIG1pbi1oZWlnaHQ6IDEyNXB4OyB9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiL2hvbWUvdG90by9Eb2N1bWVudHMvd2ViL29kaW4tcHJvamVjdC9qYXZhc2NyaXB0L3dlYXRoZXItanMvc3JjL21haW4uc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFDQTtFQUNFLHNCQUFzQjtFQUN0QixTQUFTO0VBQ1QsVUFBVSxFQUFFOztBQUVkO0VBQ0UscUJBQXFCO0VBQ3JCLG1EQUFtRDtFQUNuRCxZQUFZLEVBQUU7O0FBRWhCO0VBQ0UsYUFBYTtFQUNiLHFCQUFxQjtFQUNyQixZQUFZO0VBQ1osV0FBVyxFQUFFOztBQUVmO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixxQkFBcUI7RUFDckIsZ0JBQWdCO0VBQ2hCLGlCQUFpQixFQUFFXCIsXCJmaWxlXCI6XCJtYWluLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCB1cmwoXFxcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1OdW5pdG86NDAwLDQwMGksNzAwXFxcIik7XFxuKiB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDsgfVxcblxcbmJvZHkge1xcbiAgYmFja2dyb3VuZDogbGlnaHRncmV5O1xcbiAgZm9udC1mYW1pbHk6ICdOdW5pdG8nLCBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgY29sb3I6IHdoaXRlOyB9XFxuXFxuLndyYXBwZXIge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIHBsYWNlLWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlOyB9XFxuXFxuI2FwcCB7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgcGxhY2UtaXRlbXM6IGNlbnRlcjtcXG4gIGJhY2tncm91bmQ6IHNsYXRlZ3JleTtcXG4gIG1pbi13aWR0aDogNTAwcHg7XFxuICBtaW4taGVpZ2h0OiAxMjVweDsgfVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZm9ybVwiLFxuICAgIHtcbiAgICAgIG9uOiB7XG4gICAgICAgIHN1Ym1pdDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICBfdm0uJGVtaXQoXCJuZXctcmVwb3J0XCIsIF92bS5nZXRSZXBvcnQoX3ZtLmNpdHkpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgdmFsdWU6IF92bS5jaXR5LFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJjaXR5XCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGF0dHJzOiB7IHR5cGU6IFwic2VhcmNoXCIsIHBsYWNlaG9sZGVyOiBcIkV4YW1wbGU6ICdUcm9uZGhlaW0nXCIgfSxcbiAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jaXR5IH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3ZtLmNpdHkgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImlucHV0XCIsIHsgYXR0cnM6IHsgdHlwZTogXCJzdWJtaXRcIiwgdmFsdWU6IFwiR28hXCIgfSB9KVxuICAgIF1cbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgPGZvcm0gQHN1Ym1pdC5wcmV2ZW50PVwiJGVtaXQoJ25ldy1yZXBvcnQnLCBnZXRSZXBvcnQoY2l0eSkpXCI+XG4gICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBwbGFjZWhvbGRlcj1cIkV4YW1wbGU6ICdUcm9uZGhlaW0nXCIgdi1tb2RlbD1cImNpdHlcIj5cbiAgICA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiIHZhbHVlPVwiR28hXCI+XG4gIDwvZm9ybT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgYXBwSWQ6IFN0cmluZyxcbiAgICBsb2FkaW5nUmVwb3J0OiBCb29sZWFuXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNpdHk6IFwiXCJcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYXN5bmMgZ2V0UmF3UmVwb3J0KGNpdHlOYW1lKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgIGBodHRwczovL2FwaS5vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvd2VhdGhlcj9xPSR7Y2l0eU5hbWV9JnVuaXRzPW1ldHJpYyZBUFBJRD0ke1xuICAgICAgICAgICAgdGhpcy5hcHBJZFxuICAgICAgICAgIH1gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHJhd1JlcG9ydCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIHJhd1JlcG9ydDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGFsZXJ0KGBTb3JyeSB0aGVyZSB3YXMgYW4gZXJyb3I6ICR7ZXJyb3IuY29kZX06ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xlYW5SYXdSZXBvcnQocmF3UmVwb3J0KSB7XG4gICAgICBjb25zdCBjbGVhblJlcG9ydCA9IHtcbiAgICAgICAgY2l0eTogcmF3UmVwb3J0Lm5hbWUsXG4gICAgICAgIGNvdW50cnk6IHJhd1JlcG9ydC5zeXMuY291bnRyeSxcbiAgICAgICAgaHVtaWRpdHk6IHJhd1JlcG9ydC5tYWluLmh1bWlkaXR5LFxuICAgICAgICBwcmVzc3VyZTogcmF3UmVwb3J0Lm1haW4ucHJlc3N1cmUsXG4gICAgICAgIHRlbXA6IE1hdGguZmxvb3IocmF3UmVwb3J0Lm1haW4udGVtcCksXG4gICAgICAgIHdlYXRoZXI6IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogcmF3UmVwb3J0LndlYXRoZXJbMF0uZGVzY3JpcHRpb24sXG4gICAgICAgICAgbWFpbjogcmF3UmVwb3J0LndlYXRoZXJbMF0ubWFpblxuICAgICAgICB9LFxuICAgICAgICB3aW5kOiB7XG4gICAgICAgICAgZGlyZWN0aW9uOiByYXdSZXBvcnQud2luZC5kZWcsXG4gICAgICAgICAgc3BlZWQ6IHJhd1JlcG9ydC53aW5kLnNwZWVkXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gY2xlYW5SZXBvcnQ7XG4gICAgfSxcblxuICAgIGFzeW5jIGdldFJlcG9ydChjaXR5TmFtZSkge1xuICAgICAgdGhpcy4kZW1pdChcInRvZ2dsZS1sb2FkaW5nXCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmF3UmVwb3J0ID0gYXdhaXQgdGhpcy5nZXRSYXdSZXBvcnQoY2l0eU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhblJhd1JlcG9ydChyYXdSZXBvcnQpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgYWxlcnQoYFNvcnJ5IHRoZXJlIHdhcyBhbiBlcnJvciBvbjogJHtlcnJvci5jb2RlfTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5jaXR5ID0gXCJcIjtcbiAgICAgICAgdGhpcy4kZW1pdChcInRvZ2dsZS1sb2FkaW5nXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbmZvcm0ge1xuICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDAgMWVtIDFlbSAxZW07XG5cbiAgW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAgIGJvcmRlcjogbm9uZTtcbiAgICBsaW5lLWhlaWdodDogMjRwdDtcbiAgICBib3JkZXItcmFkaXVzOiAwLjVlbTtcbiAgICBwYWRkaW5nOiAwIDAuNWVtO1xuICB9XG5cbiAgW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAgIGJhY2tncm91bmQ6IHNsYXRlZ3JleTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmFkaXVzOiAwLjVlbTtcbiAgICBmb250LXNpemU6IDEuMWVtO1xuICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBwYWRkaW5nOiAwLjVlbTtcblxuICAgICY6aG92ZXIge1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gICAgfVxuICB9XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VhcmNoLWZvcm0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWFyY2gtZm9ybS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9zZWFyY2gtZm9ybS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Nzk1ZGViNDMmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vc2VhcmNoLWZvcm0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9zZWFyY2gtZm9ybS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vc2VhcmNoLWZvcm0udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS90b3RvL0RvY3VtZW50cy93ZWIvb2Rpbi1wcm9qZWN0L2phdmFzY3JpcHQvd2VhdGhlci1qcy9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNzk1ZGViNDMnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNzk1ZGViNDMnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3NlYXJjaC1mb3JtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03OTVkZWI0MyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc3OTVkZWI0MycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2FwcC9hcHAtY29tcG9uZW50cy9zZWFyY2gtZm9ybS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwicmVwb3J0XCIgfSB9LCBbXG4gICAgX3ZtLmxvYWRpbmdcbiAgICAgID8gX2MoXCJkaXZcIiwgW19jKFwiaDFcIiwgW192bS5fdihcImxvYWRpbmcuLi5cIildKV0pXG4gICAgICA6IF92bS5pc0VtcHR5KF92bS5pbmZvKVxuICAgICAgPyBfYyhcImRpdlwiLCBbX2MoXCJoMVwiLCBbX3ZtLl92KFwiTG9vayBmb3IgYSBjaXR5XCIpXSldKVxuICAgICAgOiBfYyhcImRpdlwiLCBbXG4gICAgICAgICAgX2MoXCJoMVwiLCBbX3ZtLl92KF92bS5fcyhfdm0udGl0bGUpKV0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJtYWluXCIsIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwidGVtcFwiIH0gfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLnRlbXApICsgXCLCsFwiKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBhdHRyczogeyBpZDogXCJ3ZWF0aGVyXCIgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFwicFwiLCB7IGF0dHJzOiB7IGlkOiBcIndlYXRoZXItbWFpblwiIH0gfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmluZm8ud2VhdGhlci5tYWluKSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwicFwiLCB7IGF0dHJzOiB7IGlkOiBcIndlYXRoZXItZGVzY3JpcHRpb25cIiB9IH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLndlYXRoZXIuZGVzY3JpcHRpb24pKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwic2VjdGlvblwiLCB7IHN0YXRpY0NsYXNzOiBcIm1vcmUtaW5mb1wiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5mb1wiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJoMlwiLCB7IHN0YXRpY0NsYXNzOiBcImluZm8tdGl0bGVcIiB9LCBbX3ZtLl92KFwiSHVtaWRpdHk6XCIpXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwicFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uaW5mby5odW1pZGl0eSkgKyBcIiVcIildKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbmZvXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImgyXCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5mby10aXRsZVwiIH0sIFtfdm0uX3YoXCJQcmVzc3VyZTpcIildKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJwXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS5pbmZvLnByZXNzdXJlKSArIFwiIGhwYVwiKV0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImluZm9cIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiaDJcIiwgeyBzdGF0aWNDbGFzczogXCJpbmZvLXRpdGxlXCIgfSwgW192bS5fdihcIldpbmQ6XCIpXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwicFwiLCBbX3ZtLl92KF92bS5fcyhfdm0uaW5mby53aW5kLnNwZWVkKSArIFwiIG0vc1wiKV0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwicmVwb3J0XCI+XG4gICAgPGRpdiB2LWlmPVwibG9hZGluZ1wiPlxuICAgICAgPGgxPmxvYWRpbmcuLi48L2gxPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgdi1lbHNlLWlmPVwiaXNFbXB0eShpbmZvKVwiPlxuICAgICAgPGgxPkxvb2sgZm9yIGEgY2l0eTwvaDE+XG4gICAgPC9kaXY+XG4gICAgPGRpdiB2LWVsc2U+XG4gICAgICA8aDE+e3sgdGl0bGUgfX08L2gxPlxuICAgICAgPG1haW4+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wXCI+e3sgaW5mby50ZW1wIH19wrA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cIndlYXRoZXJcIj5cbiAgICAgICAgICA8cCBpZD1cIndlYXRoZXItbWFpblwiPnt7IGluZm8ud2VhdGhlci5tYWluIH19PC9wPlxuICAgICAgICAgIDxwIGlkPVwid2VhdGhlci1kZXNjcmlwdGlvblwiPnt7IGluZm8ud2VhdGhlci5kZXNjcmlwdGlvbiB9fTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L21haW4+XG4gICAgICA8c2VjdGlvbiBjbGFzcz1cIm1vcmUtaW5mb1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5mb1wiPlxuICAgICAgICAgIDxoMiBjbGFzcz1cImluZm8tdGl0bGVcIj5IdW1pZGl0eTo8L2gyPlxuICAgICAgICAgIDxwPnt7IGluZm8uaHVtaWRpdHkgfX0lPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImluZm9cIj5cbiAgICAgICAgICA8aDIgY2xhc3M9XCJpbmZvLXRpdGxlXCI+UHJlc3N1cmU6PC9oMj5cbiAgICAgICAgICA8cD57eyBpbmZvLnByZXNzdXJlIH19IGhwYTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbmZvXCI+XG4gICAgICAgICAgPGgyIGNsYXNzPVwiaW5mby10aXRsZVwiPldpbmQ6PC9oMj5cbiAgICAgICAgICA8cD57eyBpbmZvLndpbmQuc3BlZWQgfX0gbS9zPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9wczoge1xuICAgIGluZm86IE9iamVjdCxcbiAgICBsb2FkaW5nOiBCb29sZWFuXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBpc0VtcHR5KG9iaikge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICB0aXRsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5pbmZvLmNpdHl9LCAke3RoaXMuaW5mby5jb3VudHJ5fWA7XG4gICAgfSxcbiAgICB3aW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLmluZm8ud2luZC5zcGVlZH0gbS9zIC0gJHt0aGlzLmluZm8ud2luZC5kaXJlY3Rpb259wrBgO1xuICAgIH1cbiAgfVxufTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiNyZXBvcnQge1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLWdhcDogMmVtO1xuICBwbGFjZS1jb250ZW50OiBjZW50ZXI7XG4gIHBhZGRpbmc6IDFlbTtcblxuICBoMSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG59XG5cbm1haW4ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbn1cblxuI3RlbXAge1xuICBmb250LXNpemU6IDNlbTtcbn1cblxuI3dlYXRoZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogYXV0byAwO1xufVxuXG4jd2VhdGhlci1kZXNjcmlwdGlvbiB7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLm1vcmUtaW5mbyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHRleHQtYWxpZ246IGp1c3RpZnk7XG59XG5cbi5pbmZvIHtcbiAgcGFkZGluZzogMCAxZW07XG59XG48L3N0eWxlPlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVwb3J0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcmVwb3J0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vcmVwb3J0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iMGM1ZjVhYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9yZXBvcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9yZXBvcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL3JlcG9ydC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9ob21lL3RvdG8vRG9jdW1lbnRzL3dlYi9vZGluLXByb2plY3QvamF2YXNjcmlwdC93ZWF0aGVyLWpzL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdiMGM1ZjVhYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdiMGM1ZjVhYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vcmVwb3J0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iMGM1ZjVhYyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdiMGM1ZjVhYycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2FwcC9hcHAtY29tcG9uZW50cy9yZXBvcnQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0IHNlYXJjaEZvcm0gZnJvbSAnLi9hcHAtY29tcG9uZW50cy9zZWFyY2gtZm9ybS52dWUnO1xuaW1wb3J0IHJlcG9ydCBmcm9tICcuL2FwcC1jb21wb25lbnRzL3JlcG9ydC52dWUnO1xuXG5jb25zdCB3ZWF0aGVyQXBwID0gbmV3IFZ1ZSh7XG4gIGVsOiAnI2FwcCcsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBzZWFyY2hGb3JtLFxuICAgIHJlcG9ydCxcbiAgfSxcbiAgZGF0YToge1xuICAgIHJlcG9ydDoge30sXG4gICAgbG9hZGluZ1JlcG9ydDogZmFsc2UsXG4gICAgYXBwSWQ6ICc0YWIzMjM0NmQzZWIxMjNmMzQzZTBlMjMwNjBmZjU5NycsXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBhc3luYyBzYXZlUmVwb3J0KHdlYXRoZXJSZXBvcnQpIHtcbiAgICAgIHRoaXMucmVwb3J0ID0gYXdhaXQgd2VhdGhlclJlcG9ydDtcbiAgICB9LFxuXG4gICAgb25Ub2dnbGVMb2FkaW5nKCkge1xuICAgICAgdGhpcy5sb2FkaW5nUmVwb3J0ID0gIXRoaXMubG9hZGluZ1JlcG9ydDtcbiAgICB9LFxuICB9LFxufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9